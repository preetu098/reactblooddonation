{"version":3,"sources":["components/Search/SearchTheme.module.css","Constans/index.ts","components/Chart/HelplineChart.tsx","components/Chart/MonthlyDonation.tsx","components/Chart/MonthlyEventChart.tsx","components/Helpline/index.tsx","components/Search/Search.tsx","components/Table/StatTable.tsx","Helplers/index.ts","Constans/DemoData.ts","services/index.ts","App.tsx","index.tsx"],"names":["module","exports","CITIES_ARRAY","MONTH_END","MONTH","CITY_HELPLINE_CITIES","Agra","Jaipur","Kanpur","Kolkata","Lucknow","Odisha","Pune","Ranchi","Varanasi","HelplineChart","helplines","selectedCity","chart","useRef","useState","city","setCity","useEffect","useLayoutEffect","current","data","i","push","month","donations","map","h","mon","parseInt","Added_Time","split","currCity","City_Region","display_value","currDonations","length","includes","console","log","filterData","x","am4core","am4charts","paddingRight","xAxis","xAxes","dataFields","category","title","text","renderer","minGridDistance","cellStartLocation","cellEndLocation","valueAxis","yAxes","donationAxis","opposite","series","name","yAxis","columns","template","fill","width","valueY","categoryX","tooltipText","series2","scrollbarX","cursor","legend","dispose","className","style","backgroundColor","id","height","am4themes_animated","CampDonationChart","back","date","label","chartData","setData","d","filter","da","toString","size","onClick","theme","VictoryTheme","material","domainPadding","y","textAnchor","tickValues","f","dependentAxis","tickFormat","labelComponent","alignment","barWidth","events","target","eventHandlers","mutation","props","index","url","DonationCharts","camps","monthStatShown","showMonthStat","allCamps","setCamps","monthStat","setMonthStat","currMonthStat","setCurrMonthStat","ref","React","createRef","monthData","Array","tempCamps","from","monthDonation","c","BloodConnect_City","e","Date_field","year","currDonation","Date","getFullYear","ID","exportComponentAsPDF","animate","duration","onLoad","MonthlyEventChart","camp","awareness","count","campData","setCampData","awarenessData","setAwarenessData","centerTitle","orientation","gutter","border","stroke","fontSize","symbol","type","offset","colorScale","HelplineComponent","searchedCity","isLoading","setLoading","totalHelpline","setTotal","openHelpline","setOpen","closedHelpline","setClosed","helplineDonations","setDonations","total","open","closed","Status","Loading","options","animationData","require","loop","autoplay","isStopped","color","Search","handleChange","suggestions","setSuggestion","value","setValue","inputProps","placeholder","onChange","event","newValue","onKeyDown","key","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","slice","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","StatTable","av","allHelplines","loading","setMonth","setYear","totalCamps","totalAwareness","totalVolunteer","totalDonation","totalHelplineDonations","tempData","startDate","endDate","reverse","join","getTime","getDateRange","campDate","TypeOfEvent","currDonors","activeVolunteer","v","helpline","htmlFor","cellSpacing","cellPadding","TABLESTATSDEMO","Math","floor","random","CREATOR","window","ZOHO","getVolunteer","page","criteria","config","reportName","pageSize","API","getAllRecords","getEvent","getHelplines","fetchAllData","a","init","activeVolunteers","len","data1","av1","hlp","hlp1","App","BASE_URL","location","ancestorOrigins","allEvents","setEvents","setHelplines","allVolunteer","setVolunteer","aV","setAV","setAwareness","monthlyCampData","setmonthlyCampData","monthlyAwarenessData","setmonthlyAwarenessData","aVUrl","setaVUrl","campUrl","setcampUrl","awarenessUrl","setawarenessUrl","loadData","volunteer","monthCamp","monthAwareness","myCamps","myAwareness","Helpline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wlgRACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,qBAAuB,0CAA0C,gBAAkB,qCAAqC,WAAa,kC,2TCDrLC,EAAe,CACxB,OACA,aACA,YACA,SACA,SACA,UACA,UACA,SACA,OACA,SACA,YAISC,EAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACzDC,EAAQ,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAE5GC,EAAuB,CAChCC,KAAM,CAAC,QACP,YAAa,CAAC,YAAa,SAC3BC,OAAQ,CAAC,UACTC,OAAQ,CAAC,UACTC,QAAS,CAAC,WACVC,QAAS,CAAC,WACVC,OAAQ,CAAC,cAAe,UAAU,eAClCC,KAAM,CAAC,QACPC,OAAQ,CAAC,UACTC,SAAU,CAAC,aCPA,SAASC,EAAT,GAGU,IAFrBC,EAEoB,EAFpBA,UACAC,EACoB,EADpBA,aAEMC,EAAQC,iBAAiC,MAD3B,EAEIC,mBAAiBH,GAFrB,mBAEbI,EAFa,KAEPC,EAFO,KAkJpB,OAzFAC,qBAAU,WACFN,GAAgBA,IAAiBI,GAAMC,EAAQL,KACpD,CAACA,IAEJO,2BAAgB,WACRH,GAAQL,GA1DG,WACf,GAAKA,GAAcE,EAAMO,QAAzB,CACA,IAAIC,EAAoB,GACxB,IAAK,IAAIC,KAAKvB,EACVsB,EAAKE,KAAK,CACNC,MAAOzB,EAAMuB,GACbG,UAAW,EACXd,UAAW,IAGnBA,EAAUe,KAAI,SAACC,GAEX,IAAIC,EAAMC,SAASF,EAAEG,WAAWC,MAAM,KAAK,GAAGA,MAAM,KAAK,IACrDC,EAAWL,EAAEM,YAAYC,cAC7B,GAAa,QAATlB,EAAgB,CAChB,IAAImB,EAAgBR,EAAE,gCACtBN,EAAKO,EAAM,GAAGH,WACVU,GAAiBA,EAAcC,OAAS,EAClCP,SAASM,GACT,EACVd,EAAKO,EAAM,GAAGjB,WAAa,EAC3BU,EAAKO,EAAM,GAAGJ,MAAQzB,EAAM6B,EAAM,QAC/B,GAAa,eAATZ,GACP,IACKhB,EAAqB,aAAaqC,SAASL,KAC3ChC,EAAqBM,OAAO+B,SAASL,KACrCnC,EAAawC,SAASL,GACzB,CACE,IAAIG,EAAgBR,EAAE,gCACtBN,EAAKO,EAAM,GAAGH,WACVU,GAAiBA,EAAcC,OAAS,EAClCP,SAASM,GACT,EACVd,EAAKO,EAAM,GAAGjB,WAAa,EAC3BU,EAAKO,EAAM,GAAGJ,MAAQzB,EAAM6B,EAAM,SAGtC,GAAI5B,EAAqBgB,GAAMqB,SAASL,GAAW,CAC/C,IAAIG,EAAgBR,EAAE,gCACtBN,EAAKO,EAAM,GAAGH,WACVU,GAAiBA,EAAcC,OAAS,EAClCP,SAASM,GACT,EACVd,EAAKO,EAAM,GAAGjB,WAAa,EAC3BU,EAAKO,EAAM,GAAGJ,MAAQzB,EAAM6B,EAAM,GAG1C,OAAO,KAEXU,QAAQC,IAAIlB,GACZR,EAAMO,QAAQC,KAAOA,GASjBmB,KAEL,CAACxB,EAAML,IAEVQ,2BAAgB,WACZ,IAAIsB,EAAIC,IAAe,WAAYC,KAEnCF,EAAEG,aAAe,GAEjBH,EAAEpB,KAAO,CACL,CACIG,MAAO,UACPC,UAAW,EACXd,UAAW,IAEf,CACIa,MAAO,WACPC,UAAW,EACXd,UAAW,IAEf,CACIa,MAAO,QACPC,UAAW,EACXd,UAAW,IAEf,CACIa,MAAO,QACPC,UAAW,EACXd,UAAW,IAEf,CACIa,MAAO,MACPC,UAAW,EACXd,UAAW,KAInB,IAAIkC,EAAQJ,EAAEK,MAAMvB,KAAK,IAAIoB,KAC7BE,EAAME,WAAWC,SAAW,QAC5BH,EAAMI,MAAMC,KAAO,SACnBL,EAAMM,SAASC,gBAAkB,GAEjCP,EAAMM,SAASE,kBAAoB,GACnCR,EAAMM,SAASG,gBAAkB,GAEjC,IAAIC,EAAYd,EAAEe,MAAMjC,KAAK,IAAIoB,KACjCY,EAAUN,MAAMC,KAAO,iBAEvB,IAAIO,EAAehB,EAAEe,MAAMjC,KAAK,IAAIoB,KACpCc,EAAaR,MAAMC,KAAO,YAC1BO,EAAaN,SAASO,UAAW,EAEjC,IAAIC,EAASlB,EAAEkB,OAAOpC,KAAK,IAAIoB,KAC/BgB,EAAOC,KAAO,WACdD,EAAOE,MAAQN,EACfI,EAAOG,QAAQC,SAASC,KAAOtB,IAAc,WAC7CiB,EAAOG,QAAQC,SAASE,MAAQvB,IAAgB,IAChDiB,EAAOZ,WAAWmB,OAAS,YAC3BP,EAAOZ,WAAWoB,UAAY,QAC9BR,EAAOS,YAAc,WAErB,IAAIC,EAAU5B,EAAEkB,OAAOpC,KAAK,IAAIoB,KAChC0B,EAAQT,KAAO,YACfS,EAAQR,MAAQJ,EAChBY,EAAQP,QAAQC,SAASC,KAAOtB,IAAc,WAC9C2B,EAAQP,QAAQC,SAASE,MAAQvB,IAAgB,IACjD2B,EAAQtB,WAAWmB,OAAS,YAC5BG,EAAQtB,WAAWoB,UAAY,QAC/BE,EAAQD,YAAc,qBAEtB,IAAIE,EAAa,IAAI3B,IAQrB,OAPAF,EAAE8B,OAAS,IAAI5B,IACf2B,EAAWX,OAAOpC,KAAKoC,GAGvBlB,EAAE+B,OAAS,IAAI7B,IACf9B,EAAMO,QAAUqB,EAET,WACHA,EAAEgC,aAEP,IAGC,yBACIC,UAAU,sBACVC,MAAO,CAAEC,gBAAiB,YACtB,wBAAIF,UAAU,aAAd,0BACJ,yBAAKG,GAAG,WAAWF,MAAO,CAAEV,MAAO,OAAQa,OAAQ,YA3J/DpC,IAAiBqC,K,mEC+MXC,G,OAAoB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAM5D,EAAyB,EAAzBA,KAAyB,EAwB3BN,mBAvByC,CAClE,CACIC,KAAM,OACNkE,KAAM,aACNzC,EAAG,KACHhB,UAAW,GACX0D,MAAO,MAEX,CACInE,KAAM,OACNkE,KAAM,aACNzC,EAAG,KACHhB,UAAW,GACX0D,MAAO,MAEX,CACInE,KAAM,OACNkE,KAAM,aACNzC,EAAG,KACHhB,UAAW,GACX0D,MAAO,QArByC,mBAwBjDC,EAxBiD,KAwBtCC,EAxBsC,KA2CxD,OAhBAnE,qBAAU,WACN,GAAIG,EAAM,CACN,IACIiE,EADKjE,EAAKkE,QAAO,SAACD,GAAD,OAAiB,MAAVA,EAAEJ,MAAgBI,EAAEJ,KAAK9C,OAAS,KACnDV,KAAI,SAAC8D,GACZ,MAAO,CACHxE,KAAMwE,EAAGxE,KACTkE,KAAMM,EAAGN,KAAKnD,MAAM,KAAK,GACzBN,UAAWI,SAAS2D,EAAG/D,UAAUgE,YACjCN,MAAOK,EAAG/D,UAAH,wBAAgC+D,EAAGN,KAAnC,KACPzC,EAAG+C,EAAGN,KAAKnD,MAAM,KAAK,GAAnB,WAA4ByD,EAAGxE,KAA/B,SAGXqE,EAAQC,MAEb,CAACjE,IAGA,yBAAKqD,UAAU,kCACX,kBAAC,IAAD,CAAagB,KAAM,GAAIC,QAASV,IAChC,kBAAC,IAAD,CACIW,MAAOC,IAAaC,SACpB7B,MAAO,IACPa,OAAQ,IACRiB,cAAe,KACf,kBAAC,IAAD,CACI7C,KAAK,oBACLT,EAAG,IACHuD,EAAG,GACHC,WAAW,WAGf,kBAAC,IAAD,CACIC,WAAYd,EAAU1D,KAAI,SAACyE,GAAD,OAAOA,EAAE1D,OAGvC,kBAAC,IAAD,CAAa2D,eAAa,EAACC,WAAY,SAAC5D,GAAD,OAAOA,KAC9C,kBAAC,IAAD,CACIpB,KAAM+D,EACNkB,eAAgB,kBAAC,IAAD,MAChB7D,EAAE,IACFuD,EAAE,YACFO,UAAU,SACVC,SAAU,GACVC,OAAQ,CACJ,CACIC,OAAQ,OACRC,cAAe,CACXhB,QAAS,WACL,MAAO,CACH,CACIe,OAAQ,OACRE,SAAU,SAACC,GAIP,OAHAvE,QAAQC,IACJsE,EAAMxF,KAAKwF,EAAMC,OAAOC,MAErB,eAaxCC,EAjSQ,SAAC,GAAoC,IAAlCpG,EAAiC,EAAjCA,aAAcqG,EAAmB,EAAnBA,MAAmB,EAiB1BlG,mBAfR,CACjB,CAAES,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,EAAGC,UAAW,EAAG0D,MAAO,KACjC,CAAE3D,MAAO,GAAIC,UAAW,EAAG0D,MAAO,KAClC,CAAE3D,MAAO,GAAIC,UAAW,EAAG0D,MAAO,KAClC,CAAE3D,MAAO,GAAIC,UAAW,EAAG0D,MAAO,OAdiB,mBAiBhDC,EAjBgD,KAiBrCC,EAjBqC,OAkB/BtE,mBAAiBH,GAlBc,mBAkBhDI,EAlBgD,KAkB1CC,EAlB0C,OAmBfF,oBAAkB,GAnBH,mBAmBhDmG,EAnBgD,KAmBhCC,EAnBgC,OAoB1BpG,qBApB0B,mBAoBhDqG,EApBgD,KAoBtCC,EApBsC,OAsBrBtG,qBAtBqB,mBAsBhDuG,EAtBgD,KAsBrCC,EAtBqC,OAuBbxG,qBAvBa,mBAuBhDyG,EAvBgD,KAuBjCC,EAvBiC,KAyBnDC,EAAMC,IAAMC,YAgFhB,OAhBA1G,qBAAU,WACFN,IAAiBI,GAAMC,EAAQL,KACpC,CAACA,IAIJM,qBAAU,WACD+F,GA/DU,WACf,IAAIY,EAAYC,MAAM,IACjB9D,KAAK,GACLtC,KAAI,iBAAM,CAAC,OAChB,GAAK0F,EAAL,CACA,IAAIW,EAAYD,MAAME,KAAKZ,GAEvBa,EAA0BH,MAAM,IAAI9D,KAAK,GAChC,QAAThD,IACA+G,EAAYA,EAAUxC,QAAO,SAAC2C,GAAD,OAAOA,EAAEC,oBAAsBnH,MAEhE+G,EAAUrG,KAAI,SAAC0G,GAAO,IAAD,EACGA,EAAEC,WAAWtG,MAAM,KADtB,mBACVH,EADU,KACL0G,EADK,KAEbC,EAAeH,EAAE,mCAerB,OAdIvG,SAASyG,MAAU,IAAIE,MAAOC,gBAC9BZ,EAAUhG,SAASD,GAAO,GAAGL,KAAK,CAC9BE,UACI8G,GAAgBA,EAAanG,OAAS,EAChCP,SAAS0G,GACT,EACVpD,MAAOiD,EAAEM,GACTlH,MAAOK,SAASD,GAAO,EACvBsD,KAAMkD,EAAEC,WACRrH,KAAMoH,EAAED,oBAERI,GAAgBA,EAAanG,OAAS,IACtC6F,EAAcpG,SAASD,GAAM,IAAMC,SAAS0G,KAE7C,KAOXlD,GAAQ,SAAChE,GAEL,OADgByG,MAAME,KAAK3G,GACZK,KAAI,SAAC4D,GAGhB,OAFAA,EAAE7D,UAAYwG,EAAc3C,EAAE9D,MAAQ,GACtC8D,EAAEH,MAAQ8C,EAAc3C,EAAE9D,MAAQ,GAAK,GAChC8D,QAGfhD,QAAQC,IAAIsF,GACZN,EAAaM,IAoBbrF,KAED,CAACxB,EAAMiG,IAEV/F,qBAAU,WACF+F,GAAOI,EAASJ,KACrB,CAACA,IAGA,oCACMC,EA2EE,kBAAC,EAAD,CACIjC,KAAM,WACF3C,QAAQC,IAAI,gBACZ4E,GAAc,IAElB9F,KAAMmG,IA/EV,yBACI3C,GAAG,QACH6C,IAAKA,EACLhD,UAAU,kCACV,4BAAQA,UAAU,OAAOiB,QAAS,WApF9CgD,+BAAqBjB,KAoFT,kBAGA,kBAAC,IAAD,CACI9B,MAAOC,IAAaC,SACpB7B,MAAO,IACPa,OAAQ,IACRiB,cAAe,IACf6C,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,OAExB,kBAAC,IAAD,CACI3F,KAAK,iBACLT,EAAG,IACHuD,EAAG,GACHC,WAAW,WAEf,kBAAC,IAAD,CACIC,WAAYd,EAAU1D,KAAI,SAACyE,GAAD,OAAOA,EAAE3E,SACnC6E,WAAY,CACR,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,SAGR,kBAAC,IAAD,CAAaD,eAAa,EAACC,WAAY,SAAC5D,GAAD,OAAOA,KAC9C,kBAAC,IAAD,CACIpB,KAAM+D,EACN3C,EAAE,QACFuD,EAAE,YACFO,UAAU,SACVE,OAAQ,CACJ,CACIC,OAAQ,OACRC,cAAe,CACXhB,QAAS,WACL,MAAO,CACH,CACIe,OAAQ,OACRE,SAAU,SAACC,GAjFvC,IAACvF,EA0F+B,OARAgB,QAAQC,IACJsE,EAAMC,OAnFzCxF,EAsFmCuF,EAAMxF,KACFwF,EAAMC,OACRtF,MAAQ,EAvF1D8F,GAAaA,EAAUhG,KACvBgB,QAAQC,IAAI,6BAA8B+E,EAAUhG,IACpDmG,GAAiB,SAAAS,GAAC,OAAIZ,EAAUhG,OAEpC6F,GAAc,GACd7E,QAAQC,IAAI,oCAoF2C,e,kBCtLhD,SAASwG,EAAT,GAAsE,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,UAAkC,EA8BhDlI,mBA7BX,CACjB,CAAES,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,GAAI0H,MAAO,EAAG/D,MAAO,GAC9B,CAAE3D,MAAO,GAAI0H,MAAO,EAAG/D,MAAO,GAC9B,CAAE3D,MAAO,GAAI0H,MAAO,EAAG/D,MAAO,KAb8C,mBA8BzEgE,EA9ByE,KA8B/DC,EA9B+D,OA+BtCrI,mBAhBpB,CAClB,CAAES,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,EAAG0H,MAAO,EAAG/D,MAAO,GAC7B,CAAE3D,MAAO,GAAI0H,MAAO,EAAG/D,MAAO,GAC9B,CAAE3D,MAAO,GAAI0H,MAAO,EAAG/D,MAAO,GAC9B,CAAE3D,MAAO,GAAI0H,MAAO,EAAG/D,MAAO,KA3B8C,mBA+BzEkE,EA/ByE,KA+B1DC,EA/B0D,KAuDhF,OAvBApI,qBAAU,WACF8H,GACAI,GAAY,SAAC9D,GACT,OAAOA,EAAE5D,KAAI,SAAA8D,GAGT,OAFAA,EAAG0D,MAAQF,EAAKxD,EAAGhE,MAAQ,GAC3BgE,EAAGL,MAAQ6D,EAAKxD,EAAGhE,MAAQ,GACpBgE,UAIpB,CAACwD,IAEJ9H,qBAAU,WACF+H,GACAK,GAAiB,SAAChE,GACd,OAAOA,EAAE5D,KAAI,SAAA8D,GAGT,OAFAA,EAAG0D,MAAQD,EAAUzD,EAAGhE,MAAQ,GAChCgE,EAAGL,MAAQ8D,EAAUzD,EAAGhE,MAAQ,GACzBgE,UAIpB,CAACyD,IAEA,yBAAKvE,UAAU,kCACX,kBAAC,IAAD,CACIkB,MAAOC,IAAaC,SACpB7B,MAAO,IACPa,OAAQ,IACRiB,cAAe,KAGf,kBAAC,IAAD,CAAc7C,KAAK,iBAAiBT,EAAG,IAAKuD,EAAG,GAAIC,WAAW,WAC9D,kBAAC,IAAD,CAAexD,EAAG,IAAKuD,EAAG,GACtB/C,MAAM,SACNsG,aAAW,EACXC,YAAY,aACZC,OAAQ,GACR9E,MAAO,CAAE+E,OAAQ,CAAEC,OAAQ,SAAW1G,MAAO,CAAE2G,SAAU,KACzDvI,KAAM,CACF,CAAEuC,KAAM,OAAQiG,OAAQ,CAAE7F,KAAM,OAAQ8F,KAAK,cAC7C,CAAElG,KAAM,YAAaiG,OAAQ,CAAE7F,KAAM,YAG7C,kBAAC,IAAD,CAEIkC,WAAYiD,EAASzH,KAAI,SAAAyE,GAAC,OAAIA,EAAE3E,SAChC6E,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,SAEhG,kBAAC,IAAD,CACID,eAAa,EAEbC,WAAY,SAAA5D,GAAC,OAAIA,KAErB,kBAAC,IAAD,CACIsH,OAAQ,GACRC,WAAY,cACZpB,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,OAGxB,kBAAC,IAAD,CACIxH,KAAM8H,EACN1G,EAAE,QACFuD,EAAE,QACFO,UAAU,SACVE,OAAQ,CAAC,CACLC,OAAQ,OACRC,cAAe,CACXhB,QAAS,WACL,MAAO,CAAC,CACJe,OAAQ,OACRE,SAAU,SAACC,GAEP,OADAvE,QAAQC,IAAIsE,EAAMxF,KAAKwF,EAAMC,OAAOC,MAC7B,WAO/B,kBAAC,IAAD,CACI1F,KAAMgI,EACN5G,EAAE,QACFuD,EAAE,QACFO,UAAU,SACVE,OAAQ,CAAC,CACLC,OAAQ,OACRC,cAAe,CACXhB,QAAS,WACL,MAAO,CAAC,CACJe,OAAQ,OACRE,SAAU,SAACC,GAEP,OADAvE,QAAQC,IAAIsE,EAAMxF,KAAKwF,EAAMC,OAAOC,MAC7B,cCxInD,IA0JekD,EA1JW,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,aAAcvJ,EAAuB,EAAvBA,UAAuB,EACtCI,mBAAiB,OADqB,mBACvDC,EADuD,KACjDC,EADiD,OAE9BF,oBAAkB,GAFY,mBAEvDoJ,EAFuD,KAE5CC,EAF4C,OAG5BrJ,mBAAS,GAHmB,mBAGvDsJ,EAHuD,KAGxCC,EAHwC,OAI9BvJ,mBAAS,GAJqB,mBAIvDwJ,EAJuD,KAIzCC,EAJyC,OAK1BzJ,mBAAS,GALiB,mBAKvD0J,EALuD,KAKvCC,EALuC,OAMpB3J,mBAAS,GANW,mBAMvD4J,EANuD,KAMpCC,EANoC,KAgD9D1J,qBAAU,WACNoB,QAAQC,IAAI,eAAgB2H,GACxBA,IAAiBlJ,GAAMC,EAAQiJ,KACpC,CAACA,IAEJhJ,qBAAU,WACNkJ,GAAW,GACPzJ,GA/CW,WACf,GAAKA,EAAL,CACA,IAAIkK,EAAQ,EACRC,EAAO,EACPC,EAAS,EACTtJ,EAAY,EAChBd,EAAUe,KAAI,SAAC0G,GACX,IAAIpG,EAAWoG,EAAEnG,YAAYC,cAsB7B,MArBY,eAATlB,EACKhB,EAAqB,aAAaqC,SAASL,IAAchC,EAAqBM,OAAO+B,SAASL,IAAcnC,EAAawC,SAASL,KACrH,SAAboG,EAAE4C,OAAmBF,GAAQ,EACX,WAAb1C,EAAE4C,SACND,GAAU,EACP3C,EAAE,iCAAoCA,EAAE,gCAAgChG,OAAS,IACpFX,GAAaI,SAASuG,EAAE,mCAE7ByC,GAAS,IAGK,QAAT7J,GAAkBhB,EAAqBgB,GAAMqB,SAASL,MAC1C,SAAboG,EAAE4C,OAAmBF,GAAQ,EACX,WAAb1C,EAAE4C,SACND,GAAU,EACP3C,EAAE,iCAAoCA,EAAE,gCAAgChG,OAAS,IACpFX,GAAaI,SAASuG,EAAE,mCAE7ByC,GAAS,GAGN,KAGXL,EAAQM,GACRJ,EAAUK,GACVT,EAASO,GACTD,EAAanJ,GACb2I,GAAW,IAWI5H,KAEhB,CAACxB,EAAML,IAEV,IAAMsK,EAAU,WACZ,OACI,6BACI,kBAAC,IAAD,CACIC,QAAS,CACLC,cAAeC,EAAQ,KACvBC,MAAM,EACNC,UAAU,GAEdxG,OAAQ,IACRb,MAAO,IACPsH,WAAYpB,MAK5B,OACI,yBAAKzF,UAAU,uBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAACc,EAAD,MAPA,6BACI,uBAAGvG,UAAU,gBAAb,kBAGA,uBAAGA,UAAU,QAAQ2F,MAQrC,yBAAK3F,UAAU,YACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAACc,EAAD,MAPA,6BACI,uBAAGvG,UAAU,gBAAb,QAGA,uBAAGA,UAAU,QAAQ6F,MAQrC,yBAAK7F,UAAU,YACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAACc,EAAD,MAPA,6BACI,uBAAGvG,UAAU,gBAAb,UAGA,uBAAGA,UAAU,QAAQ+F,MAQrC,yBAAK/F,UAAU,YACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAACc,EAAD,MAPA,6BACI,uBAAGvG,UAAU,gBAAb,aAGA,uBAAGA,UAAU,QAAQiG,S,6CC7ItC,SAASc,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,aAAqC,EAE7B3K,mBAAsB,IAFO,mBAE3D4K,EAF2D,KAE9CC,EAF8C,OAGxC7K,mBAAS,IAH+B,mBAG3D8K,EAH2D,KAGpDC,EAHoD,KAI5D9K,EAAO,CACT,CAAE4C,KAAM,aACR,CAAEA,KAAM,QACR,CAAEA,KAAM,WACR,CAAEA,KAAM,UACR,CAAEA,KAAM,WACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YACR,CAAEA,KAAM,QACR,CAAEA,KAAM,UACR,CAAEA,KAAM,eAqCNmI,EAAa,CACfC,YAAa,iBACbH,QACAI,SAba,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,SACvBL,EAASK,IAaTC,UAVkB,SAAChE,GACN,UAAVA,EAAEiE,KACDX,EAAatD,EAAE1B,OAAOmF,SAU9B,OACI,yBAAKnH,UAAU,iBACX,yBAAKA,UAAU,oBACX,kBAAC,IAAD,CACIiH,YAAaA,EACbW,4BA5BoB,SAAC,GAAe,IAAbT,EAAY,EAAZA,MACnCD,EAnBmB,SAACC,GACpB,IAAMU,EAAaV,EAAMW,OAAOC,cAC1BC,EAAcH,EAAWnK,OAE/B,OAAuB,IAAhBsK,EAAoB,GAAK1L,EAAKuE,QAAO,SAAA2C,GAAC,OACzCA,EAAEtE,KAAK6I,cAAcE,MAAM,EAAGD,KAAiBH,KAcrCK,CAAef,KA4BjBgB,4BAzBoB,WAChCjB,EAAc,KAyBFkB,mBAvCW,SAAAC,GAAU,OAAIA,EAAWnJ,MAwCpCoJ,iBArCS,SAAAD,GAAU,OAC/B,yBAAKrI,UAAU,cACVqI,EAAWnJ,OAoCJmI,WAAYA,EACZnG,MAAOA,MAGX,yBAAKlB,UAAU,cAAciB,QAAS,WAClCrD,QAAQC,IAAIsJ,GACZH,EAAaG,KAEb,kBAAC,IAAD,CAAUL,MAAM,a,OCzErB,SAASyB,EAAT,GAIU,IAHrBxG,EAGoB,EAHpBA,OACAyG,EAEoB,EAFpBA,GACAC,EACoB,EADpBA,aACoB,EACIpM,mBAAkC,MADtC,mBACbM,EADa,KACPgE,EADO,OAEUtE,oBAAkB,GAF5B,mBAEbqM,EAFa,KAEJhD,EAFI,OAGMrJ,mBAAiB,GAHvB,mBAGbS,EAHa,KAGN6L,EAHM,OAIItM,mBAAiB,GAJrB,mBAIbuH,EAJa,KAIPgF,EAJO,KAOhBC,EAAa,EACbC,EAAiB,EACjBnD,EAAgB,EAChBoD,EAAiB,EACjBC,EAAgB,EAChBC,EAAyB,EACvBjG,EAAMC,IAAMC,YAEZpF,EAAa,WACf,IAAMoL,EAA6B,GADd,ECxBD,SAACpM,EAAa8G,GAGtC,IAAIuF,EAA2B,GAC3BC,EAAyB,GAY7B,GAXAD,EAAU,GAAK,KAGF,IAATvF,GACAuF,EAAU,GAAK,OACfC,EAAQ,GAAK,SAEfD,EAAU,GAAKvF,EAAK7C,WACpBqI,EAAQ,GAAKxF,EAAK7C,YAGN,IAAVjE,EACAqM,EAAU,GAAK,KACfC,EAAQ,GAAK,KACbA,EAAQ,GAAK,SACV,CACL,IAAIlM,EAAMJ,EAAQ,EAAIA,EAAMiE,WAAa,IAAIjE,EAAMiE,WACnDoI,EAAU,GAAKjM,EACfkM,EAAQ,GAAKlM,EACbkM,EAAQ,GAAKhO,EAAU0B,EAAM,GAAGiE,WAIlC,MAAO,CAFW,IAAI+C,KAAKqF,EAAUE,UAAUC,KAAK,MAAMC,UACxC,IAAIzF,KAAKsF,EAAQC,UAAUC,KAAK,MAAMC,WDDvBC,CAAa1M,EAAO8G,GAF5B,mBAEduF,EAFc,KAEHC,EAFG,KAGrB,GAAKrH,EAAL,CAHqB,eAIZnF,GACL,IAAIN,EAAOnB,EAAayB,GACpB2F,EAAQ,EACRxF,EAAY,EACZwH,EAAY,EACZtI,EAAY,EACZgK,EAAoB,EACxBlE,EAAO/E,KAAI,SAAC0G,GACR,IAAI+F,EAAW,IAAI3F,KACfJ,EAAEC,WAAWtG,MAAM,KAAKgM,UAAUC,KAAK,MACzCC,UACF,GACI7F,EAAED,oBAAsBnH,GACxBmN,GAAYN,GACZM,GAAYL,EACd,CACE,IAAIxI,EAAI8C,EAAE,mCACY,cAAlBA,EAAEgG,YACFnF,KAEAhC,IACAxF,GAAa6D,GAAKA,EAAElD,OAAS,EAAIP,SAASyD,GAAK,GAGvD,OAAO,KAEP6H,IACa,eAATnM,EACAmM,EAAazL,KAAI,SAACC,GACd,IAAIuD,EAAO,IAAIsD,KACX7G,EAAEG,WAAWC,MAAM,KAAK,GACnBA,MAAM,KACNgM,UACAC,KAAK,MACZC,UACEjM,EAAWL,EAAEM,YAAYC,cACzBmM,EAAa1M,EAAE,gCACnB,OACI3B,EAAqB,aAAaqC,SAC9BL,IAEJhC,EAAqBM,OAAO+B,SAASL,KAIpCnC,EAAa0F,QAAO,SAAC2C,GAAD,OAAOA,IAAMlH,KAAMqB,SACpCL,IAEJkD,GAAQ2I,GACR3I,GAAQ4I,IAERnN,GAAa,EACbgK,GACI0D,GAAcA,EAAWjM,OAAS,EAC5BP,SAASwM,GACT,GAZH,KAiBflB,EAAazL,KAAI,SAACC,GACd,IAAIuD,EAAO,IAAIsD,KACX7G,EAAEG,WAAWC,MAAM,KAAK,GACnBA,MAAM,KACNgM,UACAC,KAAK,MACZC,UACEI,EAAa1M,EAAE,gCAcnB,OAZI3B,EAAqBgB,GAAMqB,SACvBV,EAAEM,YAAYC,gBAElBgD,GAAQ2I,GACR3I,GAAQ4I,IAERnN,GAAa,EACbgK,GACI0D,GAAcA,EAAWjM,OAAS,EAC5BP,SAASwM,GACT,GAEP,MAGnBT,EAASrM,KAAK,CACVP,KAAMA,EACNsN,gBAAiBpB,EACXA,EAAG3H,QAAO,SAACgJ,GAAD,OAAOA,EAAEpG,oBAAsBnH,KAAMoB,OAC/C,EACN6E,QACAgC,YACAxH,YACA+M,SAAU7N,EACVgK,kBAAmBA,KA7F3B,IAAK,IAAIrJ,KAAKzB,EAAe,EAApByB,GAiGTgB,QAAQC,IAAIqL,GACZvI,EAAQuI,GACRxD,GAAW,KASf,OANAlJ,qBAAU,WACNoB,QAAQC,IAAI,kBACZ6H,GAAW,GACP3D,GAAUyG,GAAI1K,MACnB,CAAChB,EAAO8G,EAAM7B,EAAQyG,IAGrB,yBAAKxI,UAAU,2BAA2BgD,IAAKA,GAC3C,yBAAK7C,GAAG,UAAUH,UAAU,sBACxB,yBAAKA,UAAU,qDACX,4CACA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,4BACX,2BAAO+J,QAAQ,SAAf,SACA,4BACI5J,GAAG,QACHoH,SAAU,gBAAGvF,EAAH,EAAGA,OAAH,OACN2G,EAASxL,SAAS6E,EAAOmF,UAE7B,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,KAAd,YACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,eAMR,yBAAKnH,UAAU,2BACX,2BAAO+J,QAAQ,SAAf,QACA,4BACI5J,GAAG,QACHoH,SAAU,gBAAGvF,EAAH,EAAGA,OAAH,OACN4G,EAAQzL,SAAS6E,EAAOmF,UAE5B,4BAAQA,MAAM,KAAd,OAhKV,CAAC,KAAK,MAkKiBnK,KAAI,SAACsE,GAAD,OACV,4BAAQ6F,MAAO7F,GAAKA,QAKnC,yBAAKtB,UAAU,2BACX,uBAAGA,UAAU,QAAb,kBACA,4BAAQiB,QAAS,kBAAMgD,+BAAqBjB,KAA5C,eAMZ,2BAAO7C,GAAG,WAAW6J,YAAY,IAAIC,YAAY,KAC7C,+BACI,4BACI,4BACI,uCAEJ,4BACI,wCAEJ,4BACI,4CAEJ,4BACI,2CAEJ,4BACI,4CAEJ,4BACI,qDAIZ,+BACKvB,EACG,yBAAK1I,UAAU,qEACX,kBAAC,EAAD,CAAS0I,QAASA,KAGtB/L,EAAMK,KACF,WAUIoF,GACE,IATE9F,EASH,EATGA,KACAiG,EAQH,EARGA,MACAgC,EAOH,EAPGA,UACAuF,EAMH,EANGA,SACA/M,EAKH,EALGA,UACAkJ,EAIH,EAJGA,kBACA2D,EAGH,EAHGA,gBAUJ,OANAf,GAActG,EACduG,GAAkBvE,EAClByE,GAAiBjM,EACjB4I,GAAiBmE,EACjBf,GAAkBa,EAClBX,GAA0BhD,EAEtB,wBAAI0B,IAAKvF,GACL,wBAAIpC,UAAU,UAAU1D,GACxB,4BAAKiG,GACL,4BAAKgC,GACL,4BAAKuF,GACL,4BACK/M,EADL,IACiBkJ,GAEjB,4BAAK2D,OAOzB,wBAAI3J,MAAO,CAAEC,gBAAiB,YAC1B,wBAAIF,UAAU,UAAd,SACA,4BAAK6I,GACL,4BAAKC,GACL,4BAAKnD,GACL,4BAAKqD,EAAL,IAAqBC,GACrB,4BAAKF,Q,aEvQpBmB,G,qBAAmC,IAEhD,IAAK,IAAItN,KAAKzB,EACV+O,EAAerN,KAAK,CAChBP,KAAMnB,EAAayB,GACnB2F,MAAO4H,KAAKC,MAAsB,GAAhBD,KAAKE,UACvB9F,UAAW4F,KAAKC,MAAsB,EAAhBD,KAAKE,UAC3BP,SAAUK,KAAKC,MAAsB,GAAhBD,KAAKE,UAC1BtN,UAAWoN,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3BT,gBAAiBO,KAAKC,MAAsB,IAAhBD,KAAKE,UACjCpE,kBAAmB,KAIpB,ICFDqE,EAAUC,OAAOC,KAAKF,QAqBtBG,EAAe,SACjBC,EACApO,GAEA,IAAIqO,EAAW,qBACF,QAATrO,IACAqO,EAAQ,mDAA+CrO,EAA/C,OAEZsB,QAAQC,KTnCc,GS0CtB,IAAI+M,EAAS,CACTC,WAAY,2BACZF,WACAD,KAAMA,EAAK3J,WACX+J,SAAU,OAEd,OAAOR,EAAQS,IAAIC,cAAcJ,IAG/BK,EAAW,SACbP,EACApO,GAEA,IAAIqO,EAAW,GACF,QAATrO,IACAqO,EAAQ,+BAA2BrO,EAA3B,OAOZ,IAAIsO,EAAS,CACTC,WAAY,wBACZF,WACAD,KAAMA,EAAK3J,WACX+J,SAAU,OAEd,OAAOR,EAAQS,IAAIC,cAAcJ,IAI/BM,EAAe,SACjBR,EACApO,GAEA,IAAIqO,EAAW,GACF,QAATrO,GAA2B,eAATA,IAClBqO,EAAQ,wBAAoBrO,EAApB,MAQZ,IAAIsO,EAAS,CACTC,WAAY,kBACZF,WACAD,KAAMA,EAAK3J,WACX+J,SAAU,OAEd,OAAOR,EAAQS,IAAIC,cAAcJ,IAIxBO,EAAY,uCAAG,4DAAAC,EAAA,sEAMdd,EAAQe,OANM,cAQpBtJ,EAA8B,GAC9BuJ,EAAuC,GACvCrP,EAAoC,GACpCsP,EAAM,EACNb,EAAO,EAZa,mBAcCO,EAASP,IAAQ,OAdlB,iBAcd/N,EAdc,EAcdA,KACNoF,EAAOlF,KAAP,MAAAkF,EAAM,YAASpF,IACf4O,EAAM5O,EAAKe,OAhBS,WAkBL,MAAR6N,EAlBa,kCAmBYN,EAASP,IAAQ,OAnB7B,iBAmBJc,EAnBI,EAmBV7O,KACNoF,EAAOlF,KAAP,MAAAkF,EAAM,YAASyJ,IACfD,EAAMC,EAAM9N,OArBI,0EAwBpBE,QAAQC,IAAI,0BAAZ,MAxBoB,eA2BxB6M,EAAO,EACPa,EAAM,EA5BkB,oBA8BKd,EAAaC,IAAQ,OA9B1B,iBA8BRlC,EA9BQ,EA8Bd7L,KACN4O,EAAM/C,EAAG9K,OACT4N,EAAiBzO,KAAjB,MAAAyO,EAAgB,YAAS9C,IAhCL,WAiCL,MAAR+C,EAjCa,kCAkCUd,EAAaC,IAAQ,OAlC/B,iBAkCJe,EAlCI,EAkCV9O,KACN4O,EAAME,EAAI/N,OACV4N,EAAiBzO,KAAjB,MAAAyO,EAAgB,YAASG,IApCT,2EAuCpB7N,QAAQC,IAAI,+BAvCQ,eA0CxB6M,EAAO,EACPa,EAAM,EA3CkB,oBA6CML,EAAaR,IAAQ,OA7C3B,iBA6CRgB,EA7CQ,EA6Cd/O,KACN4O,EAAMG,EAAIhO,OACVzB,EAAUY,KAAV,MAAAZ,EAAS,YAASyP,IA/CE,WAiDL,MAARH,EAjDa,kCAkDWL,EAAaR,IAAQ,OAlDhC,iBAkDJiB,EAlDI,EAkDVhP,KACN4O,EAAMI,EAAKjO,OACXzB,EAAUY,KAAV,MAAAZ,EAAS,YAAS0P,IApDF,2EAuDpB/N,QAAQC,IAAI,8BAvDQ,eA0DxBD,QAAQC,IAAI,iBAAiB5B,GA1DL,kBA2DjB,CACH8F,OAAQA,EACRuJ,iBAAkBA,EAClBrP,UAAWA,IA9DS,0EAAH,qDCoLZsK,EAAU,SAAC,GAAiB,IAAfmC,EAAc,EAAdA,QACtB,OACI,6BACI,kBAAC,IAAD,CACIlC,QAAS,CACLC,cAAeC,EAAQ,KACvBC,MAAM,EACNC,UAAU,GAEdxG,OAAQ,IACRb,MAAO,IACPsH,WAAY6B,MAKbkD,EAtSH,WACR,IAAIC,EACA,sEAEAtB,OAAOuB,SAASC,iBAChBxB,OAAOuB,SAASC,gBAAgB,KAC/BxB,OAAOuB,SAASC,gBAAgB,GAAGpO,SAAS,cAEzC4M,OAAOuB,SAASC,gBAAgB,GAAGpO,SAAS,kBAC5CkO,EAAWtB,OAAOuB,SAASC,gBAAgB,IATrC,MAYiB1P,qBAZjB,mBAYP2P,EAZO,KAYIC,EAZJ,OAauB5P,qBAbvB,mBAaPoM,EAbO,KAaOyD,EAbP,OAcuB7P,qBAdvB,mBAcP8P,EAdO,KAcOC,EAdP,OAgBU/P,mBAAS,OAhBnB,mBAgBPC,EAhBO,KAgBDC,EAhBC,OAiBkBF,oBAAS,GAjB3B,mBAiBPoJ,EAjBO,KAiBIC,EAjBJ,OAkBMrJ,oBAAU,GAlBhB,mBAkBPgQ,EAlBO,KAkBHC,EAlBG,OAmBYjQ,oBAAU,GAnBtB,mBAmBPkG,EAnBO,KAmBAI,EAnBA,OAoBoBtG,oBAAU,GApB9B,mBAoBPkI,EApBO,KAoBIgI,EApBJ,OAqBoBlQ,oBAAU,GArB9B,mBAqBPU,EArBO,KAqBImJ,EArBJ,OA0BgC7J,mBAAS+G,MAAM,IAAI9D,KAAK,IA1BxD,mBA0BPkN,EA1BO,KA0BUC,GA1BV,QA4B0CpQ,mBACpD+G,MAAM,IAAI9D,KAAK,IA7BL,qBA4BPoN,GA5BO,MA4BeC,GA5Bf,SA+BYtQ,mBAAS,GAAD,OAC3BwP,EAD2B,oDA/BpB,qBA+BPe,GA/BO,MA+BAC,GA/BA,SAkCgBxQ,mBAAS,GAAD,OAC/BwP,EAD+B,oDAlCxB,qBAkCPiB,GAlCO,MAkCEC,GAlCF,SAqC0B1Q,mBAAS,GAAD,OACzCwP,EADyC,yDArClC,qBAqCPmB,GArCO,MAqCOC,GArCP,MAgIRC,GAAQ,uCAAG,kCAAA9B,EAAA,sEACyCD,IADzC,gBACLpJ,EADK,EACLA,OAAQ9F,EADH,EACGA,UAAWqP,EADd,EACcA,iBAC3BW,GAAU,SAACvI,GAAD,OAAO3B,KACjBmK,GAAa,SAACxI,GAAD,OAAOzH,KACpBmQ,GAAa,SAAC1I,GAAD,OAAO4H,KAJP,2CAAH,qDAOd9O,qBAAU,WAEAwP,GAAeG,GAhGN,WACfvO,QAAQC,IAAI,iBAAkBmO,EAAWG,GACzCzG,GAAW,GACX,IAAInD,EAAQ,EACRgC,EAAY,EACZxH,EAAY,EACZoQ,EAAY,EACZC,EAAYhK,MAAM,IAAI9D,KAAK,GAC3B+N,EAAiBjK,MAAM,IAAI9D,KAAK,GACpC,GAAI0M,EACA,GAAa,QAAT1P,EACAiG,EAAQyJ,EAAUnL,QAAO,SAAC6C,GAAD,MAAyB,SAAlBA,EAAEgG,eAC7BhM,OACL6G,EAAYyH,EAAUnL,QAClB,SAAC6C,GAAD,MAAyB,cAAlBA,EAAEgG,eACXhM,OAEFsO,EAAUhP,KAAI,SAAC0G,GACX,IAAIxG,EAAMC,SAASuG,EAAEC,WAAWtG,MAAM,KAAK,IAW3C,OAVWF,SAASuG,EAAEC,WAAWtG,MAAM,KAAK,OAC/B,IAAIyG,MAAOC,gBACE,SAAlBL,EAAEgG,YAAwB0D,EAAUlQ,EAAM,IAAM,EAC/CmQ,EAAenQ,EAAM,IAAM,GAEpCH,GAC4C,MAAxC2G,EAAE,oCACFA,EAAE,mCAAmChG,OAAS,EACxCP,SAASuG,EAAE,oCACX,EACH,SAER,CACH,IAAI4J,EAAUtB,EAAUnL,QACpB,SAAC6C,GAAD,MACsB,SAAlBA,EAAEgG,aAA0BhG,EAAED,oBAAsBnH,KAE5DiG,EAAQ+K,EAAQ5P,OAChB,IAAI6P,EAAcvB,EAAUnL,QACxB,SAAC6C,GAAD,MACsB,cAAlBA,EAAEgG,aACFhG,EAAED,oBAAsBnH,KAEhCiI,EAAYgJ,EAAY7P,OAGxB4P,EAAQtQ,KAAI,SAAC0G,GACT,IAAIxG,EAAMC,SAASuG,EAAEC,WAAWtG,MAAM,KAAK,IACvCuG,EAAOzG,SAASuG,EAAEC,WAAWtG,MAAM,KAAK,IAS5C,OARAN,GAC4C,MAAxC2G,EAAE,oCACFA,EAAE,mCAAmChG,OAAS,EACxCP,SAASuG,EAAE,oCACX,EACNE,KAAS,IAAIE,MAAOC,gBACpBqJ,EAAUlQ,EAAM,IAAM,GAEnB,KAEXqQ,EAAYvQ,KAAI,SAAC0G,GACb,IAAIxG,EAAMC,SAASuG,EAAEC,WAAWtG,MAAM,KAAK,IAK3C,OAJWF,SAASuG,EAAEC,WAAWtG,MAAM,KAAK,OAC/B,IAAIyG,MAAOC,gBACpBsJ,EAAenQ,EAAM,IAAM,GAExB,KAKfiP,IACoBgB,EAAP,QAAT7Q,EAA4B6P,EAAazO,OAE7ByO,EAAatL,QACrB,SAACgJ,GAAD,OAAOA,EAAEpG,oBAAsBnH,KACjCoB,OACNE,QAAQC,IAAI,4BAA6BsP,IAG7CxK,EAASJ,GACT+J,EAAMa,GACNjH,EAAanJ,GACbwP,EAAahI,GACboI,GAAwBU,GACxBZ,GAAmBW,GACnB1H,GAAW,GAYwB5H,KAEpC,CAACxB,EAAM0P,EAAWG,IAGrB3P,qBAAU,WACN0Q,OAED,IAuBH,OAdA1Q,qBAAU,WACO,QAATF,IACAuQ,GAAS,GAAD,OACDhB,EADC,6EAC4EvP,IAEpFyQ,GAAW,GAAD,OACHlB,EADG,6EAC0EvP,IAEpF2Q,GAAgB,GAAD,OACRpB,EADQ,kFAC0EvP,OAG9F,CAACuP,EAAUvP,IAGV,yBAAK0D,UAAU,aACX,yBAAKA,UAAU,gCACX,wBAAIA,UAAU,kFACA,QAAT1D,EAAiB,eAAiBA,GAEvC,kBAAC,EAAD,CAAQ0K,aA3BF,SAACxD,GACXA,IAAMlH,IACNoJ,GAAW,GACXnJ,EAAQiH,QA0BR,yBAAKxD,UAAU,OACX,yBAAKA,UAAU,YACX,yBACIA,UAAU,YACViB,QAAS,WACLsJ,OAAOnE,KAAKwG,GAAO,YAGvB,yBAAK5M,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAAC,EAAD,CAASiD,QAASjD,IAPlB,6BACI,uBAAGzF,UAAU,gBAAb,oBAGA,uBAAGA,UAAU,QAAQqM,MAQrC,yBAAKrM,UAAU,YACX,yBACIA,UAAU,aACViB,QAAS,WACLsJ,OAAOnE,KAAK0G,GAAS,YAEzB,yBAAK9M,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAAC,EAAD,CAASiD,QAASjD,IAPlB,6BACI,uBAAGzF,UAAU,gBAAb,SAGA,uBAAGA,UAAU,QAAQuC,MAQrC,yBAAKvC,UAAU,YACX,yBACIA,UAAU,aACViB,QAAS,WACLsJ,OAAOnE,KAAK4G,GAAc,YAE9B,yBAAKhN,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAAC,EAAD,CAASiD,QAASjD,IAPlB,6BACI,uBAAGzF,UAAU,gBAAb,aAGA,uBAAGA,UAAU,QAAQuE,MAQrC,yBAAKvE,UAAU,YACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,uBACX,kBAAC,IAAD,CAAWgB,KAAM,GAAI8F,MAAM,aAE7BrB,EAQE,kBAAC,EAAD,CAASiD,QAASjD,IAPlB,6BACI,uBAAGzF,UAAU,gBAAb,aAGA,uBAAGA,UAAU,QAAQjD,OASxC,kBAACyQ,EAAD,CAAmBvR,UAAWwM,EAAcjD,aAAclJ,IAC3D,kBAACiM,EAAD,CAAWxG,OAAQiK,EAAWvD,aAAcA,EAAcD,GAAI2D,IAC9D,kBAAC,EAAD,CACI5J,MAAK,OAAEyJ,QAAF,IAAEA,OAAF,EAAEA,EAAWnL,QAAO,SAAC6C,GAAD,MAAyB,SAAlBA,EAAEgG,eAClCxN,aAAcI,IAElB,kBAAC+H,EAAD,CACIC,KAAMkI,EACNjI,UAAWmI,KAEf,kBAAC1Q,EAAD,CAAeC,UAAWwM,EAAcvM,aAAcI,MCvRlEmR,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.97b888e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchTheme_container__1nyy1\",\"suggestionsContainer\":\"SearchTheme_suggestionsContainer__11igi\",\"suggestionsList\":\"SearchTheme_suggestionsList__2fUzU\",\"suggestion\":\"SearchTheme_suggestion__1AGtJ\"};","export const CITIES_ARRAY = [\n    \"Agra\",\n    \"Consulting\",\n    \"Delhi NCR\",\n    \"Jaipur\",\n    \"Kanpur\",\n    \"Kolkata\",\n    \"Lucknow\",\n    \"Odisha\",\n    \"Pune\",\n    \"Ranchi\",\n    \"Varanasi\",\n];\nexport const __IS_DEV__ = false;\n\nexport const MONTH_END = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nexport const MONTH = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n\nexport const CITY_HELPLINE_CITIES = {\n    Agra: [\"Agra\"],\n    \"Delhi NCR\": [\"Delhi NCR\", \"Delhi\"],\n    Jaipur: [\"Jaipur\"],\n    Kanpur: [\"Kanpur\"],\n    Kolkata: [\"Kolkata\"],\n    Lucknow: [\"Lucknow\"],\n    Odisha: [\"Bhubaneswar\", \"Cuttack\",\"Odisha (OR)\"],\n    Pune: [\"Pune\"],\n    Ranchi: [\"Ranchi\"],\n    Varanasi: [\"Varanasi\"],\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { ReactElement, useLayoutEffect, useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Helpline } from \"../../Types\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES, MONTH } from \"../../Constans\";\n\ninterface Props {\n    helplines: Helpline[] | undefined;\n    selectedCity: string;\n}\n\ninterface ChartData {\n    helplines: number;\n    donations: number;\n    month?: string;\n}\n\nam4core.useTheme(am4themes_animated);\nexport default function HelplineChart({\n    helplines,\n    selectedCity,\n}: Props): ReactElement {\n    const chart = useRef<am4charts.XYChart | null>(null);\n    const [city, setCity] = useState<string>(selectedCity);\n\n    const filterData = () => {\n        if (!helplines || !chart.current) return;\n        let data: ChartData[] = [];\n        for (let i in MONTH) {\n            data.push({\n                month: MONTH[i],\n                donations: 0,\n                helplines: 0,\n            });\n        }\n        helplines.map((h) => {\n            \n            let mon = parseInt(h.Added_Time.split(\" \")[0].split(\"-\")[1]);\n            let currCity = h.City_Region.display_value;\n            if (city === \"All\") {\n                let currDonations = h[\"Helpline_Handler.Donor_Count\"];\n                data[mon - 1].donations +=\n                    currDonations && currDonations.length > 0\n                        ? parseInt(currDonations)\n                        : 0;\n                data[mon - 1].helplines += 1;\n                data[mon - 1].month = MONTH[mon - 1];\n            } else if (city === \"Consulting\") {\n                if (\n                    !CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(currCity) &&\n                    !CITY_HELPLINE_CITIES.Odisha.includes(currCity) &&\n                    !CITIES_ARRAY.includes(currCity)\n                ) {\n                    let currDonations = h[\"Helpline_Handler.Donor_Count\"];\n                    data[mon - 1].donations +=\n                        currDonations && currDonations.length > 0\n                            ? parseInt(currDonations)\n                            : 0;\n                    data[mon - 1].helplines += 1;\n                    data[mon - 1].month = MONTH[mon - 1];\n                }\n            } else {\n                if (CITY_HELPLINE_CITIES[city].includes(currCity)) {\n                    let currDonations = h[\"Helpline_Handler.Donor_Count\"];\n                    data[mon - 1].donations +=\n                        currDonations && currDonations.length > 0\n                            ? parseInt(currDonations)\n                            : 0;\n                    data[mon - 1].helplines += 1;\n                    data[mon - 1].month = MONTH[mon - 1];\n                }\n            }\n            return 0;\n        });\n        console.log(data);\n        chart.current.data = data;\n    };\n\n    useEffect(() => {\n        if (selectedCity && selectedCity !== city) setCity(selectedCity);\n    }, [selectedCity]);\n\n    useLayoutEffect(() => {\n        if (city && helplines) {\n            filterData();\n        }\n    }, [city, helplines]);\n\n    useLayoutEffect(() => {\n        let x = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n        x.paddingRight = 20;\n\n        x.data = [\n            {\n                month: \"January\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"February\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"March\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"April\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"May\",\n                donations: 5,\n                helplines: 52,\n            },\n        ];\n\n        let xAxis = x.xAxes.push(new am4charts.CategoryAxis());\n        xAxis.dataFields.category = \"month\";\n        xAxis.title.text = \"Months\";\n        xAxis.renderer.minGridDistance = 20;\n\n        xAxis.renderer.cellStartLocation = 0.2;\n        xAxis.renderer.cellEndLocation = 0.6;\n\n        let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.title.text = \"Total Requests\";\n\n        let donationAxis = x.yAxes.push(new am4charts.ValueAxis());\n        donationAxis.title.text = \"Donations\";\n        donationAxis.renderer.opposite = true;\n\n        let series = x.series.push(new am4charts.ColumnSeries());\n        series.name = \"Requests\";\n        series.yAxis = valueAxis;\n        series.columns.template.fill = am4core.color(\"#104547\"); // fill\n        series.columns.template.width = am4core.percent(80);\n        series.dataFields.valueY = \"helplines\";\n        series.dataFields.categoryX = \"month\";\n        series.tooltipText = \"{valueY}\";\n\n        let series2 = x.series.push(new am4charts.ColumnSeries());\n        series2.name = \"Donations\";\n        series2.yAxis = donationAxis;\n        series2.columns.template.fill = am4core.color(\"#CDA2AB\");\n        series2.columns.template.width = am4core.percent(80);\n        series2.dataFields.valueY = \"donations\";\n        series2.dataFields.categoryX = \"month\";\n        series2.tooltipText = \"{valueY} donations\";\n\n        let scrollbarX = new am4charts.XYChartScrollbar();\n        x.cursor = new am4charts.XYCursor();\n        scrollbarX.series.push(series);\n        \n\n        x.legend = new am4charts.Legend();\n        chart.current = x;\n\n        return () => {\n            x.dispose();\n        };\n    }, []);\n\n    return (\n        <div\n            className=\"container mx-0 px-0\"\n            style={{ backgroundColor: \"#ffffff\" }}>\n                <h6 className=\"px-4 pt-4\">Monthly Helpline Data </h6>\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { exportComponentAsPDF } from \"react-component-export-image\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport {\r\n    VictoryAxis, VictoryBar,\r\n    VictoryChart,\r\n\r\n\r\n    VictoryLabel, VictoryTheme,\r\n\r\n    VictoryTooltip\r\n} from \"victory\";\r\nimport { Event } from \"../../Types\";\r\nimport \"./Chart.css\";\r\n\r\ninterface Props {\r\n    selectedCity: string;\r\n    camps: Event[] | undefined;\r\n}\r\n\r\ninterface dataProps {\r\n    month: number;\r\n    donations: number;\r\n    label: string;\r\n}\r\n\r\ninterface MonthData {\r\n    city: string;\r\n    date: string;\r\n    donations: number;\r\n}\r\n\r\nconst DonationCharts = ({ selectedCity, camps }: Props) => {\r\n    // for year data  like jan, feb, mar\r\n    const initial_data = [\r\n        { month: 1, donations: 0, label: \"0\" },\r\n        { month: 2, donations: 0, label: \"0\" },\r\n        { month: 3, donations: 0, label: \"0\" },\r\n        { month: 4, donations: 0, label: \"0\" },\r\n        { month: 5, donations: 0, label: \"0\" },\r\n        { month: 6, donations: 0, label: \"0\" },\r\n        { month: 7, donations: 0, label: \"0\" },\r\n        { month: 8, donations: 0, label: \"0\" },\r\n        { month: 9, donations: 0, label: \"0\" },\r\n        { month: 10, donations: 0, label: \"0\" },\r\n        { month: 11, donations: 0, label: \"0\" },\r\n        { month: 12, donations: 0, label: \"0\" },\r\n    ];\r\n\r\n    const [chartData, setData] = useState<dataProps[]>(initial_data);\r\n    const [city, setCity] = useState<string>(selectedCity);\r\n    const [monthStatShown, showMonthStat] = useState<boolean>(false);\r\n    const [allCamps, setCamps] = useState<Event[]>();\r\n    // month details\r\n    const [monthStat, setMonthStat] = useState<any>();\r\n    const [currMonthStat, setCurrMonthStat] = useState<MonthData[]>();\r\n\r\n    let ref = React.createRef<any>();\r\n\r\n    const downloadChart = () => {\r\n        exportComponentAsPDF(ref);\r\n    };\r\n\r\n   ;\r\n\r\n    const filterData = () => {\r\n        let monthData = Array(12) // camps and their donation details each month\r\n            .fill(0)\r\n            .map(() => [{}]);\r\n        if (!allCamps) return;\r\n        let tempCamps = Array.from(allCamps);\r\n        \r\n        let monthDonation:number[]  = Array(12).fill(0)\r\n        if (city !== \"All\") {\r\n            tempCamps = tempCamps.filter((c) => c.BloodConnect_City === city);\r\n        }\r\n        tempCamps.map((e) => {\r\n            let [, mon, year] = e.Date_field.split(\"-\");\r\n            let currDonation = e[\"Post_Camp_ID.Number_of_Donation\"];\r\n            if (parseInt(year) === new Date().getFullYear()) {\r\n                monthData[parseInt(mon) - 1].push({\r\n                    donations:\r\n                        currDonation && currDonation.length > 0\r\n                            ? parseInt(currDonation)\r\n                            : 0,\r\n                    label: e.ID,\r\n                    month: parseInt(mon) - 1,\r\n                    date: e.Date_field,\r\n                    city: e.BloodConnect_City\r\n                });\r\n                if (currDonation && currDonation.length > 0)\r\n                    monthDonation[parseInt(mon)- 1] += parseInt(currDonation)\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        \r\n        \r\n\r\n        // setting data for first chart\r\n        setData((data) => {\r\n            const newData = Array.from(data);\r\n            return newData.map((d) => {\r\n                d.donations = monthDonation[d.month - 1];\r\n                d.label = monthDonation[d.month - 1] + \"\";\r\n                return d;\r\n            });\r\n        });\r\n        console.log(monthData)\r\n        setMonthStat(monthData);\r\n    };\r\n\r\n    const handleClick = (i: number) => {\r\n        if (monthStat && monthStat[i]) {\r\n            console.log(\"Setting current month stat\", monthStat[i])\r\n            setCurrMonthStat(c => monthStat[i]);\r\n        }\r\n        showMonthStat(true);\r\n        console.log(\"Done setting current month stat\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedCity !== city) setCity(selectedCity);\r\n    }, [selectedCity]);\r\n\r\n    // i neeed to filter data in year  based and with city filter\r\n\r\n    useEffect(() => {\r\n        if (!camps) return;\r\n        filterData();\r\n        //fetchYearData();\r\n    }, [city, camps]);\r\n\r\n    useEffect(() => {\r\n        if (camps) setCamps(camps);\r\n    }, [camps]);\r\n\r\n    return (\r\n        <>\r\n            {!monthStatShown ? (\r\n                <div\r\n                    id=\"chart\"\r\n                    ref={ref}\r\n                    className=\"container chart-container my-4\">\r\n                    <button className=\"mx-2\" onClick={() => downloadChart()}>\r\n                        Download Chart\r\n                    </button>\r\n                    <VictoryChart\r\n                        theme={VictoryTheme.material}\r\n                        width={800}\r\n                        height={400}\r\n                        domainPadding={100}\r\n                        animate={{\r\n                            duration: 2000,\r\n                            onLoad: { duration: 1000 },\r\n                        }}>\r\n                        <VictoryLabel\r\n                            text=\"Monthly Report\"\r\n                            x={225}\r\n                            y={30}\r\n                            textAnchor=\"middle\"\r\n                        />\r\n                        <VictoryAxis\r\n                            tickValues={chartData.map((f) => f.month)}\r\n                            tickFormat={[\r\n                                \"Jan\",\r\n                                \"Feb\",\r\n                                \"Mar\",\r\n                                \"Apr\",\r\n                                \"May\",\r\n                                \"June\",\r\n                                \"July\",\r\n                                \"Aug\",\r\n                                \"Sep\",\r\n                                \"Oct\",\r\n                                \"Nov\",\r\n                                \"Dec\",\r\n                            ]}\r\n                        />\r\n                        <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                        <VictoryBar\r\n                            data={chartData}\r\n                            x=\"month\"\r\n                            y=\"donations\"\r\n                            alignment=\"middle\"\r\n                            events={[\r\n                                {\r\n                                    target: \"data\",\r\n                                    eventHandlers: {\r\n                                        onClick: () => {\r\n                                            return [\r\n                                                {\r\n                                                    target: \"data\",\r\n                                                    mutation: (props) => {\r\n                                                        console.log(\r\n                                                            props.index\r\n                                                        );\r\n                                                        handleClick(\r\n                                                            props.data[\r\n                                                                props.index\r\n                                                            ].month - 1\r\n                                                        );\r\n                                                        return true;\r\n                                                    },\r\n                                                },\r\n                                            ];\r\n                                        },\r\n                                    },\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n            ) : (\r\n                <CampDonationChart\r\n                    back={() => {\r\n                        console.log(\"back pressed\");\r\n                        showMonthStat(false);\r\n                    }}\r\n                    data={currMonthStat}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst CampDonationChart = ({ back, data }): ReactElement => {\r\n    const initial_data: Array<MonthData & { x: string; label: string }> = [\r\n        {\r\n            city: \"Agra\",\r\n            date: \"10-07-2020\",\r\n            x: \"12\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"11-07-2020\",\r\n            x: \"22\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"12-07-2020\",\r\n            x: \"34\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n    ];\r\n    const [chartData, setData] = useState<\r\n        Array<MonthData & { x: string; label: string }>\r\n    >(initial_data);\r\n    useEffect(() => {\r\n        if (data) {\r\n            let d2 = data.filter((d) => d.date != null && d.date.length > 0);\r\n            let d = d2.map((da) => {\r\n                return {\r\n                    city: da.city,\r\n                    date: da.date.split(\"-\")[0],\r\n                    donations: parseInt(da.donations.toString()),\r\n                    label: da.donations + ` donations on ${da.date} `,\r\n                    x: da.date.split(\"-\")[0] + `(${da.city})`,\r\n                };\r\n            });\r\n            setData(d);\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"container chart-container my-4\">\r\n            <FiArrowLeft size={24} onClick={back} />\r\n            <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                width={800}\r\n                height={400}\r\n                domainPadding={100}>\r\n                <VictoryLabel\r\n                    text=\"Monthly Donations\"\r\n                    x={225}\r\n                    y={30}\r\n                    textAnchor=\"middle\"\r\n                />\r\n\r\n                <VictoryAxis\r\n                    tickValues={chartData.map((f) => f.x)}\r\n                    //tickFormat={['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']}\r\n                />\r\n                <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                <VictoryBar\r\n                    data={chartData}\r\n                    labelComponent={<VictoryTooltip />}\r\n                    x=\"x\"\r\n                    y=\"donations\"\r\n                    alignment=\"middle\"\r\n                    barWidth={24}\r\n                    events={[\r\n                        {\r\n                            target: \"data\",\r\n                            eventHandlers: {\r\n                                onClick: () => {\r\n                                    return [\r\n                                        {\r\n                                            target: \"data\",\r\n                                            mutation: (props) => {\r\n                                                console.log(\r\n                                                    props.data[props.index].url\r\n                                                );\r\n                                                return true;\r\n                                            },\r\n                                        },\r\n                                    ];\r\n                                },\r\n                            },\r\n                        },\r\n                    ]}\r\n                />\r\n            </VictoryChart>\r\n        </div>\r\n    );\r\n};\r\nexport default DonationCharts;\r\n","import React, { useEffect, useState, ReactElement } from 'react'\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryGroup, VictoryLegend } from 'victory'\nimport './Chart.css'\n\ninterface Props {\n    camp?: number[];\n    awareness?: number[]\n}\ninterface dataProps {\n    month: number;\n    donations: number;\n    label: number;\n    url: string\n}\n\ninterface GraphData {\n    month: number;\n    count: number;\n    label: number;\n}\n\nexport default function MonthlyEventChart({ camp, awareness }: Props): ReactElement {\n    const initial_data = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n    const initial_data1 = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n\n    const [campData, setCampData] = useState<GraphData[]>(initial_data)\n    const [awarenessData, setAwarenessData] = useState<GraphData[]>(initial_data1)\n    useEffect(() => {\n        if (camp) {\n            setCampData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = camp[da.month - 1]\n                    da.label = camp[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [camp])\n\n    useEffect(() => {\n        if (awareness) {\n            setAwarenessData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = awareness[da.month - 1]\n                    da.label = awareness[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [awareness])\n    return (\n        <div className=\"container chart-container my-4\">\n            <VictoryChart\n                theme={VictoryTheme.material}\n                width={800}\n                height={400}\n                domainPadding={100}\n            >\n\n                <VictoryLabel text=\"Monthly Report\" x={225} y={30} textAnchor=\"middle\" />\n                <VictoryLegend x={125} y={50}\n                    title=\"Legend\"\n                    centerTitle\n                    orientation=\"horizontal\"\n                    gutter={20}\n                    style={{ border: { stroke: \"black\" }, title: { fontSize: 20 } }}\n                    data={[\n                        { name: \"Camp\", symbol: { fill: \"blue\", type:\"rectangle\" } },\n                        { name: \"Awareness\", symbol: { fill: \"cyan\" } }\n                    ]}\n                />\n                <VictoryAxis\n\n                    tickValues={campData.map(f => f.month)}\n                    tickFormat={['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']}\n                />\n                <VictoryAxis\n                    dependentAxis\n\n                    tickFormat={x => x}\n                />\n                <VictoryGroup\n                    offset={20}\n                    colorScale={'qualitative'}\n                    animate={{\n                        duration: 2000,\n                        onLoad: { duration: 1000 }\n                    }}\n                >\n                    <VictoryBar\n                        data={campData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                    <VictoryBar\n                        data={awarenessData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                </VictoryGroup>\n            </VictoryChart>\n        </div>\n    )\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport { FiArrowUp } from \"react-icons/fi\";\nimport Lottie from \"react-lottie\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES } from \"../../Constans\";\nimport { Helpline } from \"../../Types\";\n\ninterface Props {\n    searchedCity: string;\n    helplines: Helpline[] | undefined;\n}\n\nconst HelplineComponent = ({ searchedCity, helplines }: Props) => {\n    const [city, setCity] = useState<string>(\"All\");\n    const [isLoading, setLoading] = useState<boolean>(true);\n    const [totalHelpline, setTotal] = useState(0);\n    const [openHelpline, setOpen] = useState(0);\n    const [closedHelpline, setClosed] = useState(0);\n    const [helplineDonations, setDonations] = useState(0);\n\n    const filterData = () => {\n        if (!helplines) return;\n        let total = 0,\n            open = 0,\n            closed = 0,\n            donations = 0;\n        helplines.map((e) => {\n            let currCity = e.City_Region.display_value;\n            if(city === \"Consulting\") {\n                if(!CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(currCity) && !CITY_HELPLINE_CITIES.Odisha.includes(currCity) && !CITIES_ARRAY.includes(currCity)){\n                if (e.Status === \"Open\") open += 1;\n                else if (e.Status === \"Closed\"){\n                     closed += 1;\n                     if(e[\"Helpline_Handler.Donor_Count\"]  && e[\"Helpline_Handler.Donor_Count\"].length > 0)\n                     donations += parseInt(e[\"Helpline_Handler.Donor_Count\"])\n                }\n                total += 1;\n            }\n            }\n            else if (city === \"All\" || CITY_HELPLINE_CITIES[city].includes(currCity)) {\n                if (e.Status === \"Open\") open += 1;\n                else if (e.Status === \"Closed\"){\n                     closed += 1;\n                     if(e[\"Helpline_Handler.Donor_Count\"]  && e[\"Helpline_Handler.Donor_Count\"].length > 0)\n                     donations += parseInt(e[\"Helpline_Handler.Donor_Count\"])\n                }\n                total += 1;\n                \n            }\n            return 0;\n        });\n\n        setOpen(open);\n        setClosed(closed);\n        setTotal(total);\n        setDonations(donations)\n        setLoading(false);\n    };\n\n    // function to fecth helpline stats\n    useEffect(() => {\n        console.log(\"City changed\", searchedCity);\n        if (searchedCity !== city) setCity(searchedCity);\n    }, [searchedCity]);\n\n    useEffect(() => {\n        setLoading(true);\n        if (helplines) filterData();\n        // fetchData();\n    }, [city, helplines]);\n\n    const Loading = () => {\n        return (\n            <div>\n                <Lottie\n                    options={{\n                        animationData: require(\"../../assets/animation/dot.json\"),\n                        loop: true,\n                        autoplay: true,\n                    }}\n                    height={100}\n                    width={100}\n                    isStopped={!isLoading}\n                />\n            </div>\n        );\n    };\n    return (\n        <div className=\"container mx-0 px-0\">\n            <div className=\"row \">\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Total Requests\n                                </p>\n                                <p className=\"stat\">{totalHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Open\n                                </p>\n                                <p className=\"stat\">{openHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Closed\n                                </p>\n                                <p className=\"stat\">{closedHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Donations\n                                </p>\n                                <p className=\"stat\">{helplineDonations}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default HelplineComponent;\n","import React, { ReactElement, useState } from 'react'\r\nimport { FiSearch } from 'react-icons/fi'\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nimport './Search.css'\r\nimport theme from \"./SearchTheme.module.css\"\r\ninterface Props {\r\n    handleChange: (c: string) => void\r\n}\r\ninterface CityProps {\r\n    name: string\r\n}\r\n\r\nexport default function Search({ handleChange }: Props): ReactElement {\r\n\r\n    const [suggestions, setSuggestion] = useState<CityProps[]>([])\r\n    const [value, setValue] = useState('')\r\n    const city = [\r\n        { name: 'Delhi NCR' },\r\n        { name: 'Agra' },\r\n        { name: 'Lucknow' },\r\n        { name: 'Jaipur' },\r\n        { name: 'Kolkata' },\r\n        { name: 'Ranchi' },\r\n        { name: 'Odisha' },\r\n        { name: 'Varanasi' },\r\n        { name: 'Pune' },\r\n        { name: 'Kanpur' },\r\n        { name: 'Consulting' }\r\n    ]\r\n    const getSuggestions = (value: string) => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n\r\n        return inputLength === 0 ? [] : city.filter(c =>\r\n            c.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n    };\r\n\r\n    const getSuggestionValue = suggestion => suggestion.name;\r\n\r\n    // Use your imagination to render suggestions.\r\n    const renderSuggestion = suggestion => (\r\n        <div className=\"suggestion\">\r\n            {suggestion.name}\r\n        </div>\r\n    );\r\n\r\n    const onSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestion(getSuggestions(value))\r\n    };\r\n\r\n    const onSuggestionsClearRequested = () => {\r\n        setSuggestion([])\r\n    }\r\n    const onChange = (event, { newValue }) => {\r\n        setValue(newValue)\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if(e.key === 'Enter') {\r\n            handleChange(e.target.value)\r\n        }\r\n    }\r\n\r\n    const inputProps = {\r\n        placeholder: 'Enter the city',\r\n        value,\r\n        onChange: onChange,\r\n        onKeyDown: handleKeyDown\r\n    };\r\n    return (\r\n        <div className=\"my-4 col-lg-6\">\r\n            <div className=\"d-flex container\">\r\n                <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                    theme={theme}\r\n                />\r\n                \r\n                <div className=\"search-icon\" onClick={() => {\r\n                    console.log(value)\r\n                    handleChange(value)\r\n                }}>\r\n                    <FiSearch color=\"white\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { ReactElement, useEffect, useState } from \"react\";\nimport { exportComponentAsPDF } from \"react-component-export-image\";\nimport { Loading } from \"../../App\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES } from \"../../Constans\";\nimport { getDateRange } from \"../../Helplers\";\nimport { Event, Helpline, TableStatsType, Team } from \"../../Types\";\nimport \"./Table.css\";\n\ninterface Props {\n    events: Event[] | undefined;\n    av: Team[] | undefined;\n    allHelplines: Helpline[] | undefined;\n}\n\nexport default function StatTable({\n    events,\n    av,\n    allHelplines,\n}: Props): ReactElement {\n    const [data, setData] = useState<TableStatsType[] | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [month, setMonth] = useState<number>(0);\n    const [year, setYear] = useState<number>(0);\n    const yearArray = [2020,2019];\n\n    let totalCamps = 0,\n        totalAwareness = 0,\n        totalHelpline = 0,\n        totalVolunteer = 0,\n        totalDonation = 0,\n        totalHelplineDonations = 0;\n    const ref = React.createRef<any>();\n\n    const filterData = () => {\n        const tempData: TableStatsType[] = [];\n        const [startDate, endDate] = getDateRange(month, year);\n        if (!events) return;\n        for (let i in CITIES_ARRAY) {\n            let city = CITIES_ARRAY[i];\n            let camps = 0,\n                donations = 0,\n                awareness = 0,\n                helplines = 0,\n                helplineDonations = 0;\n            events.map((e) => {\n                let campDate = new Date(\n                    e.Date_field.split(\"-\").reverse().join(\"-\")\n                ).getTime();\n                if (\n                    e.BloodConnect_City === city &&\n                    campDate >= startDate &&\n                    campDate <= endDate\n                ) {\n                    let d = e[\"Post_Camp_ID.Number_of_Donation\"];\n                    if (e.TypeOfEvent === \"Awareness\") {\n                        awareness++;\n                    } else {\n                        camps++;\n                        donations += d && d.length > 0 ? parseInt(d) : 0;\n                    }\n                }\n                return 0;\n            });\n            if (allHelplines)\n                if (city === \"Consulting\") {\n                    allHelplines.map((h) => {\n                        let date = new Date(\n                            h.Added_Time.split(\" \")[0]\n                                .split(\"-\")\n                                .reverse()\n                                .join(\"-\")\n                        ).getTime();\n                        let currCity = h.City_Region.display_value;\n                        let currDonors = h[\"Helpline_Handler.Donor_Count\"];\n                        if (\n                            CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(\n                                currCity\n                            ) ||\n                            CITY_HELPLINE_CITIES.Odisha.includes(currCity)\n                        )\n                            return 0;\n                        else if (\n                            !CITIES_ARRAY.filter((c) => c !== city).includes(\n                                currCity\n                            ) &&\n                            date >= startDate &&\n                            date <= endDate\n                        ) {\n                            helplines += 1;\n                            helplineDonations +=\n                                currDonors && currDonors.length > 0\n                                    ? parseInt(currDonors)\n                                    : 0;\n                        }\n                    return 0;\n                    });\n                } else {\n                    allHelplines.map((h) => {\n                        let date = new Date(\n                            h.Added_Time.split(\" \")[0]\n                                .split(\"-\")\n                                .reverse()\n                                .join(\"-\")\n                        ).getTime();\n                        let currDonors = h[\"Helpline_Handler.Donor_Count\"];\n                        if (\n                            CITY_HELPLINE_CITIES[city].includes(\n                                h.City_Region.display_value\n                            ) &&\n                            date >= startDate &&\n                            date <= endDate\n                        ) {\n                            helplines += 1;\n                            helplineDonations +=\n                                currDonors && currDonors.length > 0\n                                    ? parseInt(currDonors)\n                                    : 0;\n                        }\n                        return 0;\n                    });\n                }\n            tempData.push({\n                city: city,\n                activeVolunteer: av\n                    ? av.filter((v) => v.BloodConnect_City === city).length\n                    : 0,\n                camps,\n                awareness,\n                donations,\n                helpline: helplines,\n                helplineDonations: helplineDonations,\n            });\n        }\n\n        console.log(tempData);\n        setData(tempData);\n        setLoading(false);\n    };\n\n    useEffect(() => {\n        console.log(\"called functin\");\n        setLoading(true);\n        if (events && av) filterData();\n    }, [month, year, events, av]);\n\n    return (\n        <div className=\"container py-4 mx-0 px-0\" ref={ref}>\n            <div id=\"wrapper\" className=\"d-flex flex-column\">\n                <div className=\"d-flex flex-row justify-content-between py-4 px-3\">\n                    <h4>Report Table</h4>\n                    <div className=\"d-flex flex-row\">\n                        <div className=\"d-flex flex-column max-2\">\n                            <label htmlFor=\"month\">Month</label>\n                            <select\n                                id=\"month\"\n                                onChange={({ target }) =>\n                                    setMonth(parseInt(target.value))\n                                }>\n                                <option value=\"0\">All</option>\n                                <option value=\"1\">January</option>\n                                <option value=\"2\">Febraury</option>\n                                <option value=\"3\">March</option>\n                                <option value=\"4\">April</option>\n                                <option value=\"5\">May</option>\n                                <option value=\"6\">June</option>\n                                <option value=\"7\">July</option>\n                                <option value=\"8\">August</option>\n                                <option value=\"9\">September</option>\n                                <option value=\"10\">October</option>\n                                <option value=\"11\">November</option>\n                                <option value=\"12\">Decenmber</option>\n                            </select>\n                        </div>\n\n                        {/* Year filter */}\n\n                        <div className=\"d-flex flex-column mx-2\">\n                            <label htmlFor=\"month\">Year</label>\n                            <select\n                                id=\"month\"\n                                onChange={({ target }) =>\n                                    setYear(parseInt(target.value))\n                                }>\n                                <option value=\"0\">All</option>\n                                {\n                                   yearArray.map((y) => (\n                                       <option value={y} >{y}</option>\n                                   ))\n                                }\n                            </select>\n                        </div>\n                        <div className=\"d-flex flex-column mx-2\">\n                            <p className=\"mb-1\">Download Table</p>\n                            <button onClick={() => exportComponentAsPDF(ref)}>\n                                Download\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <table id=\"keywords\" cellSpacing=\"0\" cellPadding=\"0\">\n                    <thead>\n                        <tr>\n                            <th>\n                                <span>City</span>\n                            </th>\n                            <th>\n                                <span>Camps</span>\n                            </th>\n                            <th>\n                                <span>Awareness</span>\n                            </th>\n                            <th>\n                                <span>Helpline</span>\n                            </th>\n                            <th>\n                                <span>Donations</span>\n                            </th>\n                            <th>\n                                <span>Active Volunteer</span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {loading ? (\n                            <div className=\"container-fluid d-flex justiify-content-center align-items-center\">\n                                <Loading loading={loading} />\n                            </div>\n                        ) : (\n                            data!.map(\n                                (\n                                    {\n                                        city,\n                                        camps,\n                                        awareness,\n                                        helpline,\n                                        donations,\n                                        helplineDonations,\n                                        activeVolunteer,\n                                    },\n                                    index\n                                ) => {\n                                    totalCamps += camps;\n                                    totalAwareness += awareness;\n                                    totalDonation += donations;\n                                    totalHelpline += helpline;\n                                    totalVolunteer += activeVolunteer;\n                                    totalHelplineDonations += helplineDonations;\n                                    return (\n                                        <tr key={index}>\n                                            <td className=\"lalign\">{city}</td>\n                                            <td>{camps}</td>\n                                            <td>{awareness}</td>\n                                            <td>{helpline}</td>\n                                            <td>\n                                                {donations}+{helplineDonations}\n                                            </td>\n                                            <td>{activeVolunteer}</td>\n                                        </tr>\n                                    );\n                                }\n                            )\n                        )}\n\n                        <tr style={{ backgroundColor: \"#ececec\" }}>\n                            <td className=\"lalign\">Total</td>\n                            <td>{totalCamps}</td>\n                            <td>{totalAwareness}</td>\n                            <td>{totalHelpline}</td>\n                            <td>{totalDonation}+{totalHelplineDonations}</td>\n                            <td>{totalVolunteer}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n","import { MONTH_END } from \"../Constans\";\n\nexport const sleep = (ms:number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n// inputs \n// Jan - Dec - [1 - 12] 0 - All Months\n// year = 0 means all years\nexport const getDateRange = (month:number,year: number):number []=> {\n\n    // start and end date for filter \n    let startDate: Array<string> = [],\n        endDate: Array<string> = [];\n    startDate[0] = \"01\";\n\n    // selecting all years\n    if (year === 0) {\n        startDate[2] = \"2000\";\n        endDate[2] = \"2099\";\n    }else {\n      startDate[2] = year.toString();\n      endDate[2] = year.toString();\n    }\n    // selecting all month\n    if (month === 0) {\n        startDate[1] = \"01\";\n        endDate[1] = \"12\";\n        endDate[0] = \"31\"\n    } else {\n      let mon = month > 9 ? month.toString() : \"0\"+month.toString()\n      startDate[1] = mon\n      endDate[1] = mon\n      endDate[0] = MONTH_END[month-1].toString();\n    }\n    let sdTimestamp = new Date(startDate.reverse().join(\"-\")).getTime()\n    let edTimestamp = new Date(endDate.reverse().join(\"-\")).getTime()\n    return [sdTimestamp,edTimestamp]\n}","import { CITIES_ARRAY } from \".\";\nimport { sleep } from \"../Helplers\";\nimport { TableStatsType } from \"../Types\";\nimport CAMPDATA from \"./CAMP.json\";\nimport HELPLINEDATA from \"./HELPLINE.json\";\nimport TEAMDATA from \"./TEAM.json\";\n\nexport const TABLESTATSDEMO: TableStatsType[] = [];\n\nfor (let i in CITIES_ARRAY) {\n    TABLESTATSDEMO.push({\n        city: CITIES_ARRAY[i],\n        camps: Math.floor(Math.random() * 10),\n        awareness: Math.floor(Math.random() * 5),\n        helpline: Math.floor(Math.random() * 20),\n        donations: Math.floor(Math.random() * 25),\n        activeVolunteer: Math.floor(Math.random() * 150),\n        helplineDonations: 12\n    });\n}\n\nexport const CAMP_DATA_DEMO = CAMPDATA;\n\nexport const getDemoVolunteerData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return TEAMDATA \n    return TEAMDATA.data.filter((t) => t.BloodConnect_City === city)\n    \n};\n\nexport const getDemoCampData = async (city?: string):Promise<any> => {\n   await sleep(300);\n    if (!city) return CAMPDATA;\n    return  CAMPDATA.data.filter((c) => c.BloodConnect_City === city)\n    \n};\n\nexport const getDemoHelplineData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return  HELPLINEDATA \n    // @ts-ignore\n    return  HELPLINEDATA.data.filter((h) =>city !== \"Consulting\" ?  h.City_Region.display_value === city : !CITIES_ARRAY.includes(h.City_Region.display_value))\n    \n};\n","import { __IS_DEV__ } from \"../Constans\";\r\nimport {\r\n    getDemoCampData,\r\n    getDemoHelplineData, getDemoVolunteerData\r\n} from \"../Constans/DemoData\";\r\nimport {\r\n    CreatorResponse,\r\n\r\n    Event,\r\n\r\n    Helpline, Team\r\n} from \"../Types\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ZOHO: any;\r\n    }\r\n}\r\n\r\nconst CREATOR = window.ZOHO.CREATOR;\r\n\r\nexport const get = () => {\r\n    CREATOR.init()\r\n        .then((d) => {\r\n            let config = {\r\n                reportName: \"BloodConnect_Team_Report\",\r\n                page: \"1\",\r\n                pageSize: \"200\",\r\n            };\r\n\r\n            //get all records API\r\n            CREATOR.API.getAllRecords(config).then(function (response) {\r\n                //callback block\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n        });\r\n};\r\n\r\nconst getVolunteer = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Team>> => {\r\n    let criteria = '(Status==\"Active\")';\r\n    if (city !== \"All\") {\r\n        criteria = `(Status==\"Active\" && BloodConnect_City==\"${city}\")`;\r\n    }\r\n    console.log(__IS_DEV__)\r\n    if (__IS_DEV__) {\r\n        console.log(\"Heya\")\r\n        if (city !== \"All\") return getDemoVolunteerData(city);\r\n        return getDemoVolunteerData();\r\n    }\r\n\r\n    let config = {\r\n        reportName: \"BloodConnect_Team_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getEvent = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Event>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\") {\r\n        criteria = `(BloodConnect_City==\"${city}\")`;\r\n    }\r\n\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoCampData(city);\r\n        return getDemoCampData();\r\n    }\r\n    let config = {\r\n        reportName: \"Camp_Awareness_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\n\r\nconst getHelplines = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Helpline>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\" && city !== \"Consulting\") {\r\n        criteria = `(City_Region==${city})`;\r\n    }\r\n\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoHelplineData(city);\r\n        return getDemoHelplineData();\r\n    }\r\n\r\n    let config = {\r\n        reportName: \"Helpline_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\n// fetching all data at once to make the api calls less\r\nexport const fetchAllData = async (): Promise<{\r\n    events: Event[]| undefined;\r\n    activeVolunteers: Team[] | undefined;\r\n    helplines: Helpline[] | undefined;\r\n}> => {\r\n    if(!__IS_DEV__)\r\n        await CREATOR.init()\r\n\r\n    let events: Event[] | undefined = [];\r\n    let activeVolunteers: Team[] | undefined = [];\r\n    let helplines: Helpline[] | undefined = [];\r\n    let len = 0;\r\n    let page = 1;\r\n    try {\r\n        let { data } = await getEvent(page++, \"All\");\r\n        events.push(...data);\r\n        len = data.length;\r\n\r\n        while (len === 200) {\r\n            let { data: data1 } = await getEvent(page++, \"All\");\r\n            events.push(...data1);\r\n            len = data1.length;\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in event fetching\",e);\r\n    }\r\n    // getting volunteer data\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: av } = await getVolunteer(page++, \"All\");\r\n        len = av.length;\r\n        activeVolunteers.push(...av);\r\n        while (len === 200) {\r\n            let { data: av1 } = await getVolunteer(page++, \"All\");\r\n            len = av1.length;\r\n            activeVolunteers.push(...av1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in volunteer fetching\");\r\n    }\r\n    // helplines\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: hlp } = await getHelplines(page++, \"All\");\r\n        len = hlp.length;\r\n        helplines.push(...hlp);\r\n\r\n        while (len === 200) {\r\n            let { data: hlp1 } = await getHelplines(page++, \"All\");\r\n            len = hlp1.length;\r\n            helplines.push(...hlp1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in helpline fetching\");\r\n    }\r\n\r\n    console.log(\"Helplines are \",helplines)\r\n    return {\r\n        events: events,\r\n        activeVolunteers: activeVolunteers,\r\n        helplines: helplines,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FiArrowUp } from \"react-icons/fi\";\r\nimport Lottie from \"react-lottie\";\r\nimport \"./App.css\";\r\nimport HelplineChart from \"./components/Chart/HelplineChart\";\r\nimport DonationCharts from \"./components/Chart/MonthlyDonation\";\r\nimport MonthlyEventChart from \"./components/Chart/MonthlyEventChart\";\r\nimport HelplineComponent from \"./components/Helpline\";\r\nimport Search from \"./components/Search/Search\";\r\nimport StatTable from \"./components/Table/StatTable\";\r\nimport { fetchAllData } from \"./services/index\";\r\nimport { Event, Helpline, Team } from \"./Types\";\r\n\r\nconst App = () => {\r\n    let BASE_URL =\r\n        \"https://app.zohocreator.in/deepak64/bloodconnect-india-donor-system\";\r\n    if (\r\n        window.location.ancestorOrigins &&\r\n        window.location.ancestorOrigins[0] &&\r\n        !window.location.ancestorOrigins[0].includes(\"localhost\")\r\n    ) {\r\n        if (window.location.ancestorOrigins[0].includes(\"bloodconnect\"))\r\n            BASE_URL = window.location.ancestorOrigins[0];\r\n    }\r\n\r\n    const [allEvents, setEvents] = useState<Event[] | undefined>();\r\n    const [allHelplines, setHelplines] = useState<Helpline[] | undefined>();\r\n    const [allVolunteer, setVolunteer] = useState<Team[] | undefined>();\r\n\r\n    const [city, setCity] = useState(\"All\");\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [aV, setAV] = useState(-1);\r\n    const [camps, setCamps] = useState(-1);\r\n    const [awareness, setAwareness] = useState(-1);\r\n    const [donations, setDonations] = useState(-1);\r\n\r\n    // Monthly Datas\r\n    // Donations data\r\n    // Camp data\r\n    const [monthlyCampData, setmonthlyCampData] = useState(Array(12).fill(0));\r\n    // Awareness data\r\n    const [monthlyAwarenessData, setmonthlyAwarenessData] = useState(\r\n        Array(12).fill(0)\r\n    );\r\n    const [aVUrl, setaVUrl] = useState(\r\n        `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active`\r\n    );\r\n    const [campUrl, setcampUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp`\r\n    );\r\n    const [awarenessUrl, setawarenessUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness`\r\n    );\r\n\r\n    const filterData = () => {\r\n        console.log(\"Filtering data\", allEvents, allVolunteer);\r\n        setLoading(true);\r\n        let camps = 0,\r\n            awareness = 0,\r\n            donations = 0,\r\n            volunteer = 0;\r\n        let monthCamp = Array(12).fill(0);\r\n        let monthAwareness = Array(12).fill(0);\r\n        if (allEvents) {\r\n            if (city === \"All\") {\r\n                camps = allEvents.filter((e) => e.TypeOfEvent === \"Camp\")\r\n                    .length;\r\n                awareness = allEvents.filter(\r\n                    (e) => e.TypeOfEvent === \"Awareness\"\r\n                ).length;\r\n\r\n                allEvents.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        if (e.TypeOfEvent === \"Camp\") monthCamp[mon - 1] += 1;\r\n                        else monthAwareness[mon - 1] += 1;\r\n                    }\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                    return 0;\r\n                });\r\n            } else {\r\n                let myCamps = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Camp\" && e.BloodConnect_City === city\r\n                );\r\n                camps = myCamps.length;\r\n                let myAwareness = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Awareness\" &&\r\n                        e.BloodConnect_City === city\r\n                );\r\n                awareness = myAwareness.length;\r\n\r\n                // calcuating camp and awarness per month\r\n                myCamps.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthCamp[mon - 1] += 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                myAwareness.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthAwareness[mon - 1] += 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (allVolunteer) {\r\n            if (city === \"All\") volunteer = allVolunteer.length;\r\n            else\r\n                volunteer = allVolunteer.filter(\r\n                    (v) => v.BloodConnect_City === city\r\n                ).length;\r\n            console.log(\"volunteer filter complete\", volunteer);\r\n        }\r\n\r\n        setCamps(camps);\r\n        setAV(volunteer);\r\n        setDonations(donations);\r\n        setAwareness(awareness);\r\n        setmonthlyAwarenessData(monthAwareness);\r\n        setmonthlyCampData(monthCamp);\r\n        setLoading(false);\r\n        return;\r\n    };\r\n    const loadData = async () => {\r\n        const { events, helplines, activeVolunteers } = await fetchAllData();\r\n        setEvents((e) => events);\r\n        setHelplines((e) => helplines);\r\n        setVolunteer((e) => activeVolunteers);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //loadAllData();\r\n        if (!!allEvents && !!allVolunteer) filterData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [city, allEvents, allVolunteer]);\r\n\r\n    // only once\r\n    useEffect(() => {\r\n        loadData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const setSearch = (c: string): void => {\r\n        if (c !== city) {\r\n            setLoading(true);\r\n            setCity(c);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (city !== \"All\") {\r\n            setaVUrl(\r\n                `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active&BloodConnect_City=${city}`\r\n            );\r\n            setcampUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp&BloodConnect_City=${city}`\r\n            );\r\n            setawarenessUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness&BloodConnect_City=${city}`\r\n            );\r\n        }\r\n    }, [BASE_URL, city]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-between \">\r\n                <h4 className=\"stat col-lg-4 col-sm-12  mt-2 d-flex align-items-center justify-content-center\">\r\n                    {city === \"All\" ? \"BloodConnect\" : city}\r\n                </h4>\r\n                <Search handleChange={setSearch} />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card\"\r\n                        onClick={() => {\r\n                            window.open(aVUrl, \"_blank\");\r\n                        }}>\r\n                        \r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Active Volunteer\r\n                                </p>\r\n                                <p className=\"stat\">{aV}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(campUrl, \"_blank\");\r\n                        }}>\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Camps\r\n                                </p>\r\n                                <p className=\"stat\">{camps}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(awarenessUrl, \"_blank\");\r\n                        }}>\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Awareness\r\n                                </p>\r\n                                <p className=\"stat\">{awareness}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div className=\"stat-card \">\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Donations\r\n                                </p>\r\n                                <p className=\"stat\">{donations}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n             <HelplineComponent helplines={allHelplines} searchedCity={city} /> \r\n            <StatTable events={allEvents} allHelplines={allHelplines} av={allVolunteer} />\r\n            <DonationCharts\r\n                camps={allEvents?.filter((e) => e.TypeOfEvent === \"Camp\")}\r\n                selectedCity={city}\r\n            />\r\n            <MonthlyEventChart\r\n                camp={monthlyCampData}\r\n                awareness={monthlyAwarenessData}\r\n            />\r\n            <HelplineChart helplines={allHelplines} selectedCity={city} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Loading = ({ loading }) => {\r\n    return (\r\n        <div>\r\n            <Lottie\r\n                options={{\r\n                    animationData: require(\"./assets/animation/dot.json\"),\r\n                    loop: true,\r\n                    autoplay: true,\r\n                }}\r\n                height={100}\r\n                width={100}\r\n                isStopped={!loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}