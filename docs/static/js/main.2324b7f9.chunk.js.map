{"version":3,"sources":["components/Search/SearchTheme.module.css","Constants/index.ts","components/Chart/HelplineChart.tsx","components/Chart/MonthlyDonation.tsx","components/Chart/MonthlyEventChart.tsx","components/Helpline/index.tsx","components/Search/Search.tsx","components/Table/StatTable.tsx","Helplers/index.ts","Constants/DemoData.ts","services/index.ts","App.tsx","index.tsx"],"names":["module","exports","CITIES_ARRAY","MONTH_END","MONTH","HelplineChart","selectedCity","newHelplines","chart","useRef","useState","city","setCity","useEffect","useLayoutEffect","current","data","i","push","month","donations","helplines","year","Date","getFullYear","detail","map","h","currCity","parseInt","filterData","x","am4core","am4charts","paddingRight","xAxis","xAxes","dataFields","category","title","text","renderer","minGridDistance","cellStartLocation","cellEndLocation","valueAxis","yAxes","donationAxis","opposite","series","name","yAxis","columns","template","fill","width","valueY","categoryX","tooltipText","series2","scrollbarX","cursor","legend","dispose","className","style","backgroundColor","id","height","am4themes_animated","CampDonationChart","back","date","label","chartData","setData","d","filter","length","da","split","toString","size","onClick","theme","VictoryTheme","material","domainPadding","y","textAnchor","tickValues","f","dependentAxis","tickFormat","labelComponent","alignment","barWidth","events","target","eventHandlers","mutation","props","console","log","index","url","DonationCharts","camps","monthStatShown","showMonthStat","allCamps","setCamps","monthStat","setMonthStat","currMonthStat","setCurrMonthStat","ref","React","createRef","monthData","Array","tempCamps","from","monthDonation","c","BloodConnect_City","e","Date_field","mon","currDonation","ID","exportComponentAsPDF","animate","duration","onLoad","MonthlyEventChart","camp","awareness","count","campData","setCampData","awarenessData","setAwarenessData","centerTitle","orientation","gutter","border","stroke","fontSize","symbol","type","offset","colorScale","HelplineComponent","searchedCity","isLoading","setLoading","totalHelpline","setTotal","openHelpline","setOpen","closedHelpline","setClosed","helplineDonations","setDonations","total","open","closed","Loading","options","animationData","require","loop","autoplay","isStopped","color","Search","handleChange","suggestions","setSuggestion","value","setValue","inputProps","placeholder","onChange","event","newValue","onKeyDown","key","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","slice","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","StatTable","av","loading","setMonth","setYear","yearArray","totalCamps","totalAwareness","totalVolunteer","totalDonation","totalHelplineDonations","tempData","startDate","endDate","reverse","join","getTime","getDateRange","campDate","TypeOfEvent","jsonData","currTotal","currDonations","md","activeVolunteer","v","helpline","htmlFor","cellSpacing","cellPadding","TABLESTATSDEMO","Math","floor","random","CREATOR","window","ZOHO","getVolunteer","page","criteria","config","reportName","pageSize","API","getAllRecords","getEvent","fetchAllData","a","init","activeVolunteers","len","data1","av1","fetch","newHelpline","json","App","BASE_URL","location","ancestorOrigins","includes","allEvents","setEvents","setNewHelplines","allVolunteer","setVolunteer","aV","setAV","setAwareness","monthlyCampData","setmonthlyCampData","monthlyAwarenessData","setmonthlyAwarenessData","aVUrl","setaVUrl","campUrl","setcampUrl","awarenessUrl","setawarenessUrl","loadData","volunteer","monthCamp","monthAwareness","myCamps","myAwareness","Helpline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2324b7f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchTheme_container__1nyy1\",\"suggestionsContainer\":\"SearchTheme_suggestionsContainer__11igi\",\"suggestionsList\":\"SearchTheme_suggestionsList__2fUzU\",\"suggestion\":\"SearchTheme_suggestion__1AGtJ\"};","export const CITIES_ARRAY = [\n    \"Agra\",\n    \"Consulting\",\n    \"Delhi NCR\",\n    \"Jaipur\",\n    \"Kanpur\",\n    \"Kolkata\",\n    \"Lucknow\",\n    \"Odisha\",\n    \"Pune\",\n    \"Ranchi\",\n    \"Varanasi\",\n];\nexport const __IS_DEV__ = false; \n\n\nexport const MONTH_END = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nexport const MONTH = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n\nexport const CITY_HELPLINE_CITIES = {\n    Agra: [\"Agra\"],\n    \"Delhi NCR\": [\"Delhi NCR\", \"Delhi\"],\n    Jaipur: [\"Jaipur\"],\n    Kanpur: [\"Kanpur\"],\n    Kolkata: [\"Kolkata\"],\n    Lucknow: [\"Lucknow\"],\n    Odisha: [\"Bhubaneswar\", \"Cuttack\",\"Odisha (OR)\"],\n    Pune: [\"Pune\"],\n    Ranchi: [\"Ranchi\"],\n    Varanasi: [\"Varanasi\"],\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { ReactElement, useLayoutEffect, useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { CITIES_ARRAY, MONTH } from \"../../Constants\";\n\ninterface Props {\n    newHelplines:any | undefined;\n    selectedCity: string;\n}\n\ninterface ChartData {\n    helplines: number;\n    donations: number;\n    month?: string;\n}\n\nam4core.useTheme(am4themes_animated);\nexport default function HelplineChart({\n    selectedCity,\n    newHelplines\n}: Props): ReactElement {\n    const chart = useRef<am4charts.XYChart | null>(null);\n    const [city, setCity] = useState<string>(selectedCity);\n\n\n    // structuring helpline data for chart\n    const filterData = () => {\n        if (!chart.current || !newHelplines) return;\n        let data: ChartData[] = [];\n        for (let i in MONTH) {\n            data.push({\n                month: MONTH[i],\n                donations: 0,\n                helplines: 0,\n            });\n        }\n\n        let year = new Date().getFullYear()\n        if(city !== \"All\") {\n            if(!newHelplines[city]) return;\n            newHelplines[city].detail[year].map((h,i) => {\n                data[i].donations = h.donations ? h.donations: 0;\n                data[i].helplines = h.helplines ? h.helplines: 0;\n                return 0;\n            })\n\n        } else {\n            for(let i in CITIES_ARRAY) {\n                let currCity  = CITIES_ARRAY[i];\n                if(!newHelplines[currCity]) return;\n            newHelplines[currCity].detail[year].map((h,i) => {\n                data[i].donations += h.donations ? parseInt(h.donations): 0;\n                data[i].helplines += h.helplines ? parseInt(h.helplines) : 0;\n                return 0;\n            })\n                \n            }\n        }\n\n       \n        \n        chart.current.data = data;\n    };\n\n    useEffect(() => {\n        if (selectedCity && selectedCity !== city) setCity(selectedCity);\n    }, [selectedCity]);\n\n    /* for charts , for data change above */\n    useLayoutEffect(() => {\n        if (city && newHelplines) {\n            filterData();\n        }\n    }, [city, newHelplines]);\n\n    useLayoutEffect(() => {\n        let x = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n        x.paddingRight = 20;\n\n        x.data = [\n            {\n                month: \"January\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"February\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"March\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"April\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"May\",\n                donations: 5,\n                helplines: 52,\n            },\n        ];\n\n        let xAxis = x.xAxes.push(new am4charts.CategoryAxis());\n        xAxis.dataFields.category = \"month\";\n        xAxis.title.text = \"Months\";\n        xAxis.renderer.minGridDistance = 20;\n\n        xAxis.renderer.cellStartLocation = 0.2;\n        xAxis.renderer.cellEndLocation = 0.6;\n\n        let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.title.text = \"Total Requests\";\n\n        let donationAxis = x.yAxes.push(new am4charts.ValueAxis());\n        donationAxis.title.text = \"Donations\";\n        donationAxis.renderer.opposite = true;\n\n        let series = x.series.push(new am4charts.ColumnSeries());\n        series.name = \"Requests\";\n        series.yAxis = valueAxis;\n        series.columns.template.fill = am4core.color(\"#104547\"); // fill\n        series.columns.template.width = am4core.percent(80);\n        series.dataFields.valueY = \"helplines\";\n        series.dataFields.categoryX = \"month\";\n        series.tooltipText = \"{valueY}\";\n\n        let series2 = x.series.push(new am4charts.ColumnSeries());\n        series2.name = \"Donations\";\n        series2.yAxis = donationAxis;\n        series2.columns.template.fill = am4core.color(\"#CDA2AB\");\n        series2.columns.template.width = am4core.percent(80);\n        series2.dataFields.valueY = \"donations\";\n        series2.dataFields.categoryX = \"month\";\n        series2.tooltipText = \"{valueY} donations\";\n\n        let scrollbarX = new am4charts.XYChartScrollbar();\n        x.cursor = new am4charts.XYCursor();\n        scrollbarX.series.push(series);\n        \n\n        x.legend = new am4charts.Legend();\n        chart.current = x;\n\n        return () => {\n            x.dispose();\n        };\n    }, []);\n\n    return (\n        <div\n            className=\"container mx-0 px-0\"\n            style={{ backgroundColor: \"#ffffff\" }}>\n                <h6 className=\"px-4 pt-4\">Monthly Helpline Data </h6>\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { exportComponentAsPDF } from \"react-component-export-image\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport {\r\n    VictoryAxis, VictoryBar,\r\n    VictoryChart,\r\n\r\n\r\n    VictoryLabel, VictoryTheme,\r\n\r\n    VictoryTooltip\r\n} from \"victory\";\r\nimport { Event } from \"../../Types\";\r\nimport \"./Chart.css\";\r\n\r\ninterface Props {\r\n    selectedCity: string;\r\n    camps: Event[] | undefined;\r\n}\r\n\r\ninterface dataProps {\r\n    month: number;\r\n    donations: number;\r\n    label: string;\r\n}\r\n\r\ninterface MonthData {\r\n    city: string;\r\n    date: string;\r\n    donations: number;\r\n}\r\n\r\nconst DonationCharts = ({ selectedCity, camps }: Props) => {\r\n    // for year data  like jan, feb, mar\r\n    const initial_data = [\r\n        { month: 1, donations: 0, label: \"0\" },\r\n        { month: 2, donations: 0, label: \"0\" },\r\n        { month: 3, donations: 0, label: \"0\" },\r\n        { month: 4, donations: 0, label: \"0\" },\r\n        { month: 5, donations: 0, label: \"0\" },\r\n        { month: 6, donations: 0, label: \"0\" },\r\n        { month: 7, donations: 0, label: \"0\" },\r\n        { month: 8, donations: 0, label: \"0\" },\r\n        { month: 9, donations: 0, label: \"0\" },\r\n        { month: 10, donations: 0, label: \"0\" },\r\n        { month: 11, donations: 0, label: \"0\" },\r\n        { month: 12, donations: 0, label: \"0\" },\r\n    ];\r\n\r\n    const [chartData, setData] = useState<dataProps[]>(initial_data);\r\n    const [city, setCity] = useState<string>(selectedCity);\r\n    const [monthStatShown, showMonthStat] = useState<boolean>(false);\r\n    const [allCamps, setCamps] = useState<Event[]>();\r\n    // month details\r\n    const [monthStat, setMonthStat] = useState<any>();\r\n    const [currMonthStat, setCurrMonthStat] = useState<MonthData[]>();\r\n\r\n    let ref = React.createRef<any>();\r\n\r\n    const downloadChart = () => {\r\n        exportComponentAsPDF(ref);\r\n    };\r\n\r\n   ;\r\n\r\n    const filterData = () => {\r\n        let monthData = Array(12) // camps and their donation details each month\r\n            .fill(0)\r\n            .map(() => [{}]);\r\n        if (!allCamps) return;\r\n        let tempCamps = Array.from(allCamps);\r\n        \r\n        let monthDonation:number[]  = Array(12).fill(0)\r\n        if (city !== \"All\") {\r\n            tempCamps = tempCamps.filter((c) => c.BloodConnect_City === city);\r\n        }\r\n        tempCamps.map((e) => {\r\n            let [, mon, year] = e.Date_field.split(\"-\");\r\n            let currDonation = e[\"Post_Camp_ID.Number_of_Donation\"];\r\n            if (parseInt(year) === new Date().getFullYear()) {\r\n                monthData[parseInt(mon) - 1].push({\r\n                    donations:\r\n                        currDonation && currDonation.length > 0\r\n                            ? parseInt(currDonation)\r\n                            : 0,\r\n                    label: e.ID,\r\n                    month: parseInt(mon) - 1,\r\n                    date: e.Date_field,\r\n                    city: e.BloodConnect_City\r\n                });\r\n                if (currDonation && currDonation.length > 0)\r\n                    monthDonation[parseInt(mon)- 1] += parseInt(currDonation)\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        \r\n        \r\n\r\n        // setting data for first chart\r\n        setData((data) => {\r\n            const newData = Array.from(data);\r\n            return newData.map((d) => {\r\n                d.donations = monthDonation[d.month - 1];\r\n                d.label = monthDonation[d.month - 1] + \"\";\r\n                return d;\r\n            });\r\n        });\r\n        setMonthStat(monthData);\r\n    };\r\n\r\n    const handleClick = (i: number) => {\r\n        if (monthStat && monthStat[i]) {\r\n            setCurrMonthStat(c => monthStat[i]);\r\n        }\r\n        showMonthStat(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedCity !== city) setCity(selectedCity);\r\n    }, [selectedCity]);\r\n\r\n    // i neeed to filter data in year  based and with city filter\r\n\r\n    useEffect(() => {\r\n        if (!camps) return;\r\n        filterData();\r\n        //fetchYearData();\r\n    }, [city, camps]);\r\n\r\n    useEffect(() => {\r\n        if (camps) setCamps(camps);\r\n    }, [camps]);\r\n\r\n    return (\r\n        <>\r\n            {!monthStatShown ? (\r\n                <div\r\n                    id=\"chart\"\r\n                    ref={ref}\r\n                    className=\"container chart-container my-4\">\r\n                    <button className=\"mx-2\" onClick={() => downloadChart()}>\r\n                        Download Chart\r\n                    </button>\r\n                    <VictoryChart\r\n                        theme={VictoryTheme.material}\r\n                        width={800}\r\n                        height={400}\r\n                        domainPadding={100}\r\n                        animate={{\r\n                            duration: 2000,\r\n                            onLoad: { duration: 1000 },\r\n                        }}>\r\n                        <VictoryLabel\r\n                            text=\"Monthly Report\"\r\n                            x={225}\r\n                            y={30}\r\n                            textAnchor=\"middle\"\r\n                        />\r\n                        <VictoryAxis\r\n                            tickValues={chartData.map((f) => f.month)}\r\n                            tickFormat={[\r\n                                \"Jan\",\r\n                                \"Feb\",\r\n                                \"Mar\",\r\n                                \"Apr\",\r\n                                \"May\",\r\n                                \"June\",\r\n                                \"July\",\r\n                                \"Aug\",\r\n                                \"Sep\",\r\n                                \"Oct\",\r\n                                \"Nov\",\r\n                                \"Dec\",\r\n                            ]}\r\n                        />\r\n                        <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                        <VictoryBar\r\n                            data={chartData}\r\n                            x=\"month\"\r\n                            y=\"donations\"\r\n                            alignment=\"middle\"\r\n                            events={[\r\n                                {\r\n                                    target: \"data\",\r\n                                    eventHandlers: {\r\n                                        onClick: () => {\r\n                                            return [\r\n                                                {\r\n                                                    target: \"data\",\r\n                                                    mutation: (props) => {\r\n                                                        console.log(\r\n                                                            props.index\r\n                                                        );\r\n                                                        handleClick(\r\n                                                            props.data[\r\n                                                                props.index\r\n                                                            ].month - 1\r\n                                                        );\r\n                                                        return true;\r\n                                                    },\r\n                                                },\r\n                                            ];\r\n                                        },\r\n                                    },\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n            ) : (\r\n                <CampDonationChart\r\n                    back={() => {\r\n                        console.log(\"back pressed\");\r\n                        showMonthStat(false);\r\n                    }}\r\n                    data={currMonthStat}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst CampDonationChart = ({ back, data }): ReactElement => {\r\n    const initial_data: Array<MonthData & { x: string; label: string }> = [\r\n        {\r\n            city: \"Agra\",\r\n            date: \"10-07-2020\",\r\n            x: \"12\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"11-07-2020\",\r\n            x: \"22\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"12-07-2020\",\r\n            x: \"34\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n    ];\r\n    const [chartData, setData] = useState<\r\n        Array<MonthData & { x: string; label: string }>\r\n    >(initial_data);\r\n    useEffect(() => {\r\n        if (data) {\r\n            let d2 = data.filter((d) => d.date != null && d.date.length > 0);\r\n            let d = d2.map((da) => {\r\n                return {\r\n                    city: da.city,\r\n                    date: da.date.split(\"-\")[0],\r\n                    donations: parseInt(da.donations.toString()),\r\n                    label: da.donations + ` donations on ${da.date} `,\r\n                    x: da.date.split(\"-\")[0] + `(${da.city})`,\r\n                };\r\n            });\r\n            setData(d);\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"container chart-container my-4\">\r\n            <FiArrowLeft size={24} onClick={back} />\r\n            <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                width={800}\r\n                height={400}\r\n                domainPadding={100}>\r\n                <VictoryLabel\r\n                    text=\"Monthly Donations\"\r\n                    x={225}\r\n                    y={30}\r\n                    textAnchor=\"middle\"\r\n                />\r\n\r\n                <VictoryAxis\r\n                    tickValues={chartData.map((f) => f.x)}\r\n                    //tickFormat={['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']}\r\n                />\r\n                <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                <VictoryBar\r\n                    data={chartData}\r\n                    labelComponent={<VictoryTooltip />}\r\n                    x=\"x\"\r\n                    y=\"donations\"\r\n                    alignment=\"middle\"\r\n                    barWidth={24}\r\n                    events={[\r\n                        {\r\n                            target: \"data\",\r\n                            eventHandlers: {\r\n                                onClick: () => {\r\n                                    return [\r\n                                        {\r\n                                            target: \"data\",\r\n                                            mutation: (props) => {\r\n                                                console.log(\r\n                                                    props.data[props.index].url\r\n                                                );\r\n                                                return true;\r\n                                            },\r\n                                        },\r\n                                    ];\r\n                                },\r\n                            },\r\n                        },\r\n                    ]}\r\n                />\r\n            </VictoryChart>\r\n        </div>\r\n    );\r\n};\r\nexport default DonationCharts;\r\n","import React, { useEffect, useState, ReactElement } from 'react'\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryGroup, VictoryLegend } from 'victory'\nimport './Chart.css'\n\ninterface Props {\n    camp?: number[];\n    awareness?: number[]\n}\ninterface dataProps {\n    month: number;\n    donations: number;\n    label: number;\n    url: string\n}\n\ninterface GraphData {\n    month: number;\n    count: number;\n    label: number;\n}\n\nexport default function MonthlyEventChart({ camp, awareness }: Props): ReactElement {\n    const initial_data = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n    const initial_data1 = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n\n    const [campData, setCampData] = useState<GraphData[]>(initial_data)\n    const [awarenessData, setAwarenessData] = useState<GraphData[]>(initial_data1)\n    useEffect(() => {\n        if (camp) {\n            setCampData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = camp[da.month - 1]\n                    da.label = camp[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [camp])\n\n    useEffect(() => {\n        if (awareness) {\n            setAwarenessData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = awareness[da.month - 1]\n                    da.label = awareness[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [awareness])\n    return (\n        <div className=\"container chart-container my-4\">\n            <VictoryChart\n                theme={VictoryTheme.material}\n                width={800}\n                height={400}\n                domainPadding={100}\n            >\n\n                <VictoryLabel text=\"Monthly Report\" x={225} y={30} textAnchor=\"middle\" />\n                <VictoryLegend x={125} y={50}\n                    title=\"Legend\"\n                    centerTitle\n                    orientation=\"horizontal\"\n                    gutter={20}\n                    style={{ border: { stroke: \"black\" }, title: { fontSize: 20 } }}\n                    data={[\n                        { name: \"Camp\", symbol: { fill: \"blue\", type:\"rectangle\" } },\n                        { name: \"Awareness\", symbol: { fill: \"cyan\" } }\n                    ]}\n                />\n                <VictoryAxis\n\n                    tickValues={campData.map(f => f.month)}\n                    tickFormat={['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']}\n                />\n                <VictoryAxis\n                    dependentAxis\n\n                    tickFormat={x => x}\n                />\n                <VictoryGroup\n                    offset={20}\n                    colorScale={'qualitative'}\n                    animate={{\n                        duration: 2000,\n                        onLoad: { duration: 1000 }\n                    }}\n                >\n                    <VictoryBar\n                        data={campData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                    <VictoryBar\n                        data={awarenessData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                </VictoryGroup>\n            </VictoryChart>\n        </div>\n    )\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from \"react\";\nimport { FiArrowUp } from \"react-icons/fi\";\nimport Lottie from \"react-lottie\";\nimport { CITIES_ARRAY } from \"../../Constants\";\n\ninterface Props {\n    searchedCity: string;\n    newHelplines: any | undefined;\n}\n\nconst HelplineComponent = ({ searchedCity , newHelplines }: Props) => {\n    const [city, setCity] = useState<string>(\"All\");\n    const [isLoading, setLoading] = useState<boolean>(true);\n    const [totalHelpline, setTotal] = useState(0);\n    const [openHelpline, setOpen] = useState(0);\n    const [closedHelpline, setClosed] = useState(0);\n    const [helplineDonations, setDonations] = useState(0);\n\n    const filterData = () => {\n        if(!newHelplines) return;\n        let total = 0,\n            open = 0,\n            closed = 0,\n            donations = 0;\n\n        if(city !== \"All\") {\n            open = newHelplines[city].open;\n            closed = newHelplines[city].closed;\n            total = newHelplines[city].total;\n            for(let year in newHelplines[city].detail) {\n                // eslint-disable-next-line no-loop-func\n                newHelplines[city].detail[year].map((h:any) => {\n                    if(h.donations) {\n                        donations += parseInt(h.donations)\n                    }\n                    return 0;\n                })\n            }\n        } else {\n            for(let i in CITIES_ARRAY) {\n                let currCity = CITIES_ARRAY[i];\n                \n                open += parseInt(newHelplines[currCity].open);\n                closed += parseInt(newHelplines[currCity].closed);\n                total += parseInt(newHelplines[currCity].total); \n                for(let year in newHelplines[currCity].detail) {\n                // eslint-disable-next-line no-loop-func\n                newHelplines[currCity].detail[year].map((h:any) => {\n                    if(h.donations) {\n                        donations += parseInt(h.donations)\n                    }\n                    return 0;\n                })\n            }\n            }\n        }\n\n\n        setOpen(open);\n        setClosed(closed);\n        setTotal(total);\n        setDonations(donations)\n        setLoading(false);\n    };\n\n    // function to fecth helpline stats\n    useEffect(() => {\n        console.log(\"City changed\", searchedCity);\n        if (searchedCity !== city) setCity(searchedCity);\n    }, [searchedCity]);\n\n    useEffect(() => {\n        setLoading(true);\n        if (newHelplines) filterData();\n        // fetchData();\n    }, [city, newHelplines]);\n\n    const Loading = () => {\n        return (\n            <div>\n                <Lottie\n                    options={{\n                        animationData: require(\"../../assets/animation/dot.json\"),\n                        loop: true,\n                        autoplay: true,\n                    }}\n                    height={100}\n                    width={100}\n                    isStopped={!isLoading}\n                />\n            </div>\n        );\n    };\n    return (\n        <div className=\"container mx-0 px-0\">\n            <div className=\"row \">\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Total Requests\n                                </p>\n                                <p className=\"stat\">{totalHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Open\n                                </p>\n                                <p className=\"stat\">{openHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Closed\n                                </p>\n                                <p className=\"stat\">{closedHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Donations\n                                </p>\n                                <p className=\"stat\">{helplineDonations}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default HelplineComponent;\n","import React, { ReactElement, useState } from 'react'\r\nimport { FiSearch } from 'react-icons/fi'\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nimport './Search.css'\r\nimport theme from \"./SearchTheme.module.css\"\r\ninterface Props {\r\n    handleChange: (c: string) => void\r\n}\r\ninterface CityProps {\r\n    name: string\r\n}\r\n\r\nexport default function Search({ handleChange }: Props): ReactElement {\r\n\r\n    const [suggestions, setSuggestion] = useState<CityProps[]>([])\r\n    const [value, setValue] = useState('')\r\n    const city = [\r\n        { name: 'Delhi NCR' },\r\n        { name: 'Agra' },\r\n        { name: 'Lucknow' },\r\n        { name: 'Jaipur' },\r\n        { name: 'Kolkata' },\r\n        { name: 'Ranchi' },\r\n        { name: 'Odisha' },\r\n        { name: 'Varanasi' },\r\n        { name: 'Pune' },\r\n        { name: 'Kanpur' },\r\n        { name: 'Consulting' }\r\n    ]\r\n    const getSuggestions = (value: string) => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n\r\n        return inputLength === 0 ? [] : city.filter(c =>\r\n            c.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n    };\r\n\r\n    const getSuggestionValue = suggestion => suggestion.name;\r\n\r\n    // Use your imagination to render suggestions.\r\n    const renderSuggestion = suggestion => (\r\n        <div className=\"suggestion\">\r\n            {suggestion.name}\r\n        </div>\r\n    );\r\n\r\n    const onSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestion(getSuggestions(value))\r\n    };\r\n\r\n    const onSuggestionsClearRequested = () => {\r\n        setSuggestion([])\r\n    }\r\n    const onChange = (event, { newValue }) => {\r\n        setValue(newValue)\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if(e.key === 'Enter') {\r\n            handleChange(e.target.value)\r\n        }\r\n    }\r\n\r\n    const inputProps = {\r\n        placeholder: 'Enter the city',\r\n        value,\r\n        onChange: onChange,\r\n        onKeyDown: handleKeyDown\r\n    };\r\n    return (\r\n        <div className=\"my-4 col-lg-6\">\r\n            <div className=\"d-flex container\">\r\n                <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                    theme={theme}\r\n                />\r\n                \r\n                <div className=\"search-icon\" onClick={() => {\r\n                    console.log(value)\r\n                    handleChange(value)\r\n                }}>\r\n                    <FiSearch color=\"white\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, {ReactElement, useEffect, useState} from \"react\";\nimport {exportComponentAsPDF} from \"react-component-export-image\";\nimport {Loading} from \"../../App\";\nimport {CITIES_ARRAY} from \"../../Constants\";\nimport {getDateRange} from \"../../Helplers\";\nimport {Event, TableStatsType, Team} from \"../../Types\";\nimport \"./Table.css\";\n\ninterface Props {\n  events: Event[] | undefined;\n  av: Team[] | undefined;\n  newHelplines: any | undefined;\n}\n\nexport default function StatTable({\n  events,\n  av,\n  newHelplines,\n}: Props): ReactElement {\n  const [data, setData] = useState<TableStatsType[] | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [month, setMonth] = useState<number>(0);\n  const [year, setYear] = useState<number>(0);\n\n  // you want to change this to automatic \n  const yearArray = [2020, 2019];\n\n  let totalCamps = 0,\n    totalAwareness = 0,\n    totalHelpline = 0,\n    totalVolunteer = 0,\n    totalDonation = 0,\n    totalHelplineDonations = 0;\n  const ref = React.createRef<any>();\n\n  // filtering data \n  const filterData = () => {\n    const tempData: TableStatsType[] = [];\n    const [startDate, endDate] = getDateRange(month, year);\n    if (!events) return;\n    for (let i in CITIES_ARRAY) {\n      let city = CITIES_ARRAY[i];\n      let camps = 0,\n        donations = 0,\n        awareness = 0,\n        helplines = 0,\n        helplineDonations = 0;\n      // camps and camp donations and awareness \n      events.map((e) => {\n        let campDate = new Date(\n          e.Date_field.split(\"-\").reverse().join(\"-\")\n        ).getTime();\n        if (\n          e.BloodConnect_City === city &&\n          campDate >= startDate &&\n          campDate <= endDate\n        ) {\n          let d = e[\"Post_Camp_ID.Number_of_Donation\"];\n          if (e.TypeOfEvent === \"Awareness\") {\n            awareness++;\n          } else {\n            camps++;\n            donations += d && d.length > 0 ? parseInt(d) : 0;\n          }\n        }\n        return 0;\n      });\n      // helplines part here\n      if (newHelplines) {\n        let jsonData = newHelplines;\n        if (year !== 0) {\n          if (jsonData[city]) {\n            if (month !== 0) {\n              if (jsonData[city].detail[year] && jsonData[city].detail[year][month - 1] && jsonData[city].detail[year][month - 1].helplines) {\n                helplines = parseInt(jsonData[city].detail[year][month - 1].helplines);\n                helplineDonations = parseInt(jsonData[city].detail[year][month - 1].donations);\n              } else {\n                helplines = 0;\n                helplineDonations = 0;\n              }\n            } else {\n              // displaying all months data\n              if(jsonData[city].detail[year])\n              jsonData[city].detail[year].map(h => {\n                helplines += parseInt(h.helplines ? h.helplines : '0');\n                helplineDonations += parseInt(h.donations ? h.donations : '0');\n                return 0;\n              })\n            }\n          }\n        } else {\n          // display all years data !! \n          let currTotal = 0;\n          let currDonations = 0;\n          if (jsonData[city]) {\n            yearArray.map(y => {\n              if (jsonData[city].detail[y]) {\n                jsonData[city].detail[y].map(md => {\n                  currTotal += parseInt(md.helplines ? md.helplines : '0');\n                  currDonations += parseInt(md.donations ? md.donations : '0');\n                  return 0;\n                })\n              }\n              return 0;\n            })\n          }\n          helplines = currTotal;\n          helplineDonations = currDonations;\n\n        }\n        tempData.push({\n          city: city,\n          activeVolunteer: av\n            ? av.filter((v) => v.BloodConnect_City === city).length\n            : 0,\n          camps,\n          awareness,\n          donations,\n          helpline: helplines,\n          helplineDonations: helplineDonations,\n        });\n      }\n    }\n\n    setData(tempData);\n    setLoading(false);\n  };\n\n\n\n  useEffect(() => {\n    setLoading(true);\n    if (events && av) filterData();\n  }, [month, year, events, av, newHelplines]);\n\n  return (\n    <div className=\"container py-4 mx-0 px-0\" ref={ref}>\n      <div id=\"wrapper\" className=\"d-flex flex-column\">\n        <div className=\"d-flex flex-row justify-content-between py-4 px-3\">\n          <h4>Report Table</h4>\n          <div className=\"d-flex flex-row\">\n            <div className=\"d-flex flex-column max-2\">\n              <label htmlFor=\"month\">Month</label>\n              <select\n                id=\"month\"\n                onChange={({target}) =>\n                  setMonth(parseInt(target.value))\n                }\n              >\n                <option value=\"0\">All</option>\n                <option value=\"1\">January</option>\n                <option value=\"2\">Febraury</option>\n                <option value=\"3\">March</option>\n                <option value=\"4\">April</option>\n                <option value=\"5\">May</option>\n                <option value=\"6\">June</option>\n                <option value=\"7\">July</option>\n                <option value=\"8\">August</option>\n                <option value=\"9\">September</option>\n                <option value=\"10\">October</option>\n                <option value=\"11\">November</option>\n                <option value=\"12\">Decenmber</option>\n              </select>\n            </div>\n\n            {/* Year filter */}\n\n            <div className=\"d-flex flex-column mx-2\">\n              <label htmlFor=\"month\">Year</label>\n              <select\n                id=\"month\"\n                onChange={({target}) =>\n                  setYear(parseInt(target.value))\n                }>\n                <option value=\"0\">All</option>\n                {yearArray.map((y) => (\n                  <option value={y}>{y}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"d-flex flex-column mx-2\">\n              <p className=\"mb-1\">Download Table</p>\n              <button onClick={() => exportComponentAsPDF(ref)}>\n                Download\n                            </button>\n            </div>\n          </div>\n        </div>\n        <table id=\"keywords\" cellSpacing=\"0\" cellPadding=\"0\">\n          <thead>\n            <tr>\n              <th>\n                <span>City</span>\n              </th>\n              <th>\n                <span>Camps</span>\n              </th>\n              <th>\n                <span>Awareness</span>\n              </th>\n              <th>\n                <span>Helpline</span>\n              </th>\n              <th>\n                <span>Donations(Camp+Helpline)</span>\n              </th>\n              <th>\n                <span>Active Volunteer</span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {loading ? (\n              <div className=\"container-fluid d-flex justiify-content-center align-items-center\">\n                <Loading loading={loading} />\n              </div>\n            ) : (\n                data!.map(\n                  (\n                    {\n                      city,\n                      camps,\n                      awareness,\n                      helpline,\n                      donations,\n                      helplineDonations,\n                      activeVolunteer,\n                    },\n                    index\n                  ) => {\n                    totalCamps += camps;\n                    totalAwareness += awareness;\n                    totalDonation += donations;\n                    totalHelpline += helpline;\n                    totalVolunteer += activeVolunteer;\n                    totalHelplineDonations += parseInt(helplineDonations + '');\n                    return (\n                      <tr key={index}>\n                        <td className=\"lalign\">{city}</td>\n                        <td>{camps}</td>\n                        <td>{awareness}</td>\n                        <td>{helpline}</td>\n                        <td>\n                          {donations}+{helplineDonations}\n                        </td>\n                        <td>{activeVolunteer}</td>\n                      </tr>\n                    );\n                  }\n                )\n              )}\n\n            <tr style={{backgroundColor: \"#ececec\"}}>\n              <td className=\"lalign\">Total</td>\n              <td>{totalCamps}</td>\n              <td>{totalAwareness}</td>\n              <td>{totalHelpline}</td>\n              <td>\n                {totalDonation}+{totalHelplineDonations}\n              </td>\n              <td>{totalVolunteer}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import { MONTH_END } from \"../Constants\";\n\nexport const sleep = (ms:number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n// inputs \n// Jan - Dec - [1 - 12] 0 - All Months\n// year = 0 means all years\nexport const getDateRange = (month:number,year: number):number []=> {\n\n    // start and end date for filter \n    let startDate: Array<string> = [],\n        endDate: Array<string> = [];\n    startDate[0] = \"01\";\n\n    // selecting all years\n    if (year === 0) {\n        startDate[2] = \"2000\";\n        endDate[2] = \"2099\";\n    }else {\n      startDate[2] = year.toString();\n      endDate[2] = year.toString();\n    }\n    // selecting all month\n    if (month === 0) {\n        startDate[1] = \"01\";\n        endDate[1] = \"12\";\n        endDate[0] = \"31\"\n    } else {\n      let mon = month > 9 ? month.toString() : \"0\"+month.toString()\n      startDate[1] = mon\n      endDate[1] = mon\n      endDate[0] = MONTH_END[month-1].toString();\n    }\n    let sdTimestamp = new Date(startDate.reverse().join(\"-\")).getTime()\n    let edTimestamp = new Date(endDate.reverse().join(\"-\")).getTime()\n    return [sdTimestamp,edTimestamp]\n}","import { CITIES_ARRAY } from \".\";\nimport { sleep } from \"../Helplers\";\nimport { TableStatsType } from \"../Types\";\nimport CAMPDATA from \"./CAMP.json\";\nimport HELPLINEDATA from \"./HELPLINE.json\";\nimport TEAMDATA from \"./TEAM.json\";\n\nexport const TABLESTATSDEMO: TableStatsType[] = [];\n\nfor (let i in CITIES_ARRAY) {\n    TABLESTATSDEMO.push({\n        city: CITIES_ARRAY[i],\n        camps: Math.floor(Math.random() * 10),\n        awareness: Math.floor(Math.random() * 5),\n        helpline: Math.floor(Math.random() * 20),\n        donations: Math.floor(Math.random() * 25),\n        activeVolunteer: Math.floor(Math.random() * 150),\n        helplineDonations: 12\n    });\n}\n\nexport const CAMP_DATA_DEMO = CAMPDATA;\n\nexport const getDemoVolunteerData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return TEAMDATA \n    return TEAMDATA.data.filter((t) => t.BloodConnect_City === city)\n    \n};\n\nexport const getDemoCampData = async (city?: string):Promise<any> => {\n   await sleep(300);\n    if (!city) return CAMPDATA;\n    return  CAMPDATA.data.filter((c) => c.BloodConnect_City === city)\n    \n};\n\nexport const getDemoHelplineData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return  HELPLINEDATA \n    // @ts-ignore\n    return  HELPLINEDATA.data.filter((h) =>city !== \"Consulting\" ?  h.City_Region.display_value === city : !CITIES_ARRAY.includes(h.City_Region.display_value))\n    \n};\n","import { __IS_DEV__ } from \"../Constants\";\r\nimport {\r\n    getDemoCampData, getDemoVolunteerData\r\n} from \"../Constants/DemoData\";\r\nimport {\r\n    CreatorResponse,\r\n    Event, Team\r\n} from \"../Types\";\r\ndeclare global {\r\n    interface Window {\r\n        ZOHO: any;\r\n    }\r\n}\r\n\r\nconst CREATOR = window.ZOHO.CREATOR;\r\n\r\nexport const get = () => {\r\n    CREATOR.init()\r\n        .then((d) => {\r\n            let config = {\r\n                reportName: \"BloodConnect_Team_Report\",\r\n                page: \"1\",\r\n                pageSize: \"200\",\r\n            };\r\n\r\n            //get all records API\r\n            CREATOR.API.getAllRecords(config).then(function (response) {\r\n                //callback block\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n        });\r\n};\r\n\r\nconst getVolunteer = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Team>> => {\r\n    let criteria = '(Status==\"Active\")';\r\n    if (city !== \"All\") {\r\n        criteria = `(Status==\"Active\" && BloodConnect_City==\"${city}\")`;\r\n    }\r\n    console.log(__IS_DEV__)\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoVolunteerData(city);\r\n        return getDemoVolunteerData();\r\n    }\r\n\r\n    let config = {\r\n        reportName: \"BloodConnect_Team_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getEvent = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Event>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\") {\r\n        criteria = `(BloodConnect_City==\"${city}\")`;\r\n    }\r\n\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoCampData(city);\r\n        return getDemoCampData();\r\n    }\r\n    let config = {\r\n        reportName: \"Camp_Awareness_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\n\r\n\r\n// fetching all data at once to make the api calls less\r\nexport const fetchAllData = async (): Promise<{\r\n    events: Event[]| undefined;\r\n    activeVolunteers: Team[] | undefined;\r\n    newHelpline : any\r\n}> => {\r\n    if(!__IS_DEV__)\r\n        await CREATOR.init()\r\n\r\n    let events: Event[] | undefined = [];\r\n    let activeVolunteers: Team[] | undefined = [];\r\n    let len = 0;\r\n    let page = 1;\r\n    try {\r\n        let { data } = await getEvent(page++, \"All\");\r\n        events.push(...data);\r\n        len = data.length;\r\n\r\n        while (len === 200) {\r\n            let { data: data1 } = await getEvent(page++, \"All\");\r\n            events.push(...data1);\r\n            len = data1.length;\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in event fetching\",e);\r\n    }\r\n    // getting volunteer data\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: av } = await getVolunteer(page++, \"All\");\r\n        len = av.length;\r\n        activeVolunteers.push(...av);\r\n        while (len === 200) {\r\n            let { data: av1 } = await getVolunteer(page++, \"All\");\r\n            len = av1.length;\r\n            activeVolunteers.push(...av1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in volunteer fetching\");\r\n    }\r\n    \r\n    let newHelpline = await fetch(\"https://bc-api2.herokuapp.com/get-helplines\")\r\n    let jsonData = await newHelpline.json();\r\n    console.log(\"data is \",jsonData.data)\r\n    return {\r\n        events: events,\r\n        activeVolunteers: activeVolunteers,\r\n        newHelpline:jsonData.data\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FiArrowUp } from \"react-icons/fi\";\r\nimport Lottie from \"react-lottie\";\r\nimport { exportComponentAsPDF } from \"react-component-export-image\";\r\nimport \"./App.css\";\r\nimport HelplineChart from \"./components/Chart/HelplineChart\";\r\nimport DonationCharts from \"./components/Chart/MonthlyDonation\";\r\nimport MonthlyEventChart from \"./components/Chart/MonthlyEventChart\";\r\nimport HelplineComponent from \"./components/Helpline\";\r\nimport Search from \"./components/Search/Search\";\r\nimport StatTable from \"./components/Table/StatTable\";\r\nimport { fetchAllData } from \"./services/index\";\r\nimport { Event, Team } from \"./Types\";\r\n\r\nconst App = () => {\r\n    let BASE_URL =\r\n        \"https://creatorapp.zoho.in/deepak64/bloodconnect-india-donor-system\";\r\n    if (\r\n        window.location.ancestorOrigins &&\r\n        window.location.ancestorOrigins[0] &&\r\n        !window.location.ancestorOrigins[0].includes(\"localhost\")\r\n    ) {\r\n        if (window.location.ancestorOrigins[0].includes(\"bloodconnect\"))\r\n            BASE_URL = window.location.ancestorOrigins[0];\r\n    }\r\n\r\n\r\n    // all camps and awareness\r\n    const [allEvents, setEvents] = useState<Event[] | undefined>();\r\n\r\n    // helplines\r\n    const [newHelplines, setNewHelplines] = useState<any | undefined>();\r\n    // active volunteers\r\n    const [allVolunteer, setVolunteer] = useState<Team[] | undefined>();\r\n\r\n\r\n    // state variables for data count\r\n    const [city, setCity] = useState(\"All\");\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [aV, setAV] = useState(-1);\r\n    const [camps, setCamps] = useState(-1);\r\n    const [awareness, setAwareness] = useState(-1);\r\n    const [donations, setDonations] = useState(-1);\r\n\r\n    // reference \r\n    const ref = React.createRef<any>()\r\n\r\n    // Monthly Datas\r\n    // Donations data\r\n    // Camp data\r\n    const [monthlyCampData, setmonthlyCampData] = useState(Array(12).fill(0));\r\n    // Awareness data\r\n    const [monthlyAwarenessData, setmonthlyAwarenessData] = useState(\r\n        Array(12).fill(0)\r\n    );\r\n\r\n    // url\r\n    const [aVUrl, setaVUrl] = useState(\r\n        `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active`\r\n    );\r\n    const [campUrl, setcampUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp`\r\n    );\r\n    const [awarenessUrl, setawarenessUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness`\r\n    );\r\n\r\n\r\n    // filtering data based on city, called when city is changed or data is loaded\r\n    const filterData = () => {\r\n        setLoading(true);\r\n        let camps = 0,\r\n            awareness = 0,\r\n            donations = 0,\r\n            volunteer = 0;\r\n        let monthCamp = Array(12).fill(0);\r\n        let monthAwareness = Array(12).fill(0);\r\n        if (allEvents) {\r\n            if (city === \"All\") {\r\n                camps = allEvents.filter((e) => e.TypeOfEvent === \"Camp\")\r\n                    .length;\r\n                awareness = allEvents.filter(\r\n                    (e) => e.TypeOfEvent === \"Awareness\"\r\n                ).length;\r\n\r\n                allEvents.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        if (e.TypeOfEvent === \"Camp\") monthCamp[mon - 1] += 1;\r\n                        else monthAwareness[mon - 1] += 1;\r\n                    }\r\n                    if(e.TypeOfEvent === \"Camp\")\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                    return 0;\r\n                });\r\n            } else {\r\n                let myCamps = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Camp\" && e.BloodConnect_City === city\r\n                );\r\n                camps = myCamps.length;\r\n                let myAwareness = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Awareness\" &&\r\n                        e.BloodConnect_City === city\r\n                );\r\n                awareness = myAwareness.length;\r\n\r\n                // calcuating camp and awarness per month\r\n                myCamps.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthCamp[mon - 1] += 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                myAwareness.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthAwareness[mon - 1] += 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (allVolunteer) {\r\n            if (city === \"All\") volunteer = allVolunteer.length;\r\n            else\r\n                volunteer = allVolunteer.filter(\r\n                    (v) => v.BloodConnect_City === city\r\n                ).length;\r\n        }\r\n\r\n        setCamps(camps);\r\n        setAV(volunteer);\r\n        setDonations(donations);\r\n        setAwareness(awareness);\r\n        setmonthlyAwarenessData(monthAwareness);\r\n        setmonthlyCampData(monthCamp);\r\n        setLoading(false);\r\n        return;\r\n    };\r\n\r\n    // loading data from backend\r\n    const loadData = async () => {\r\n        const { events, activeVolunteers, newHelpline } = await fetchAllData();\r\n        setEvents((e) => events);\r\n        setVolunteer((e) => activeVolunteers);\r\n        setNewHelplines((e) => newHelpline)\r\n    };\r\n\r\n    // calling filter when data is loaded\r\n    useEffect(() => {\r\n        if (!!allEvents && !!allVolunteer) filterData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [city, allEvents, allVolunteer]);\r\n\r\n    // only once\r\n    useEffect(() => {\r\n        loadData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n\r\n    // setting city \r\n    const setSearch = (c: string): void => {\r\n        if (c !== city) {\r\n            setLoading(true);\r\n            setCity(c);\r\n        }\r\n    };\r\n\r\n\r\n    // setting url when city is changed\r\n    useEffect(() => {\r\n        if (city !== \"All\") {\r\n            setaVUrl(\r\n                `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active&BloodConnect_City=${city}`\r\n            );\r\n            setcampUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp&BloodConnect_City=${city}`\r\n            );\r\n            setawarenessUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness&BloodConnect_City=${city}`\r\n            );\r\n        }\r\n    }, [BASE_URL, city]);\r\n\r\n    return (\r\n        <div className=\"container\" ref={ref}>\r\n            <div className=\"row justify-content-between align-items-center \">\r\n                <h4 className=\"stat col-lg-4 col-sm-12  mt-2 d-flex align-items-center justify-content-center\">\r\n                    {city === \"All\" ? \"BloodConnect\" : city}\r\n                </h4>\r\n                <Search handleChange={setSearch} />\r\n                <button className=\"download\" onClick={() => {\r\n                    exportComponentAsPDF(ref)\r\n                }}>Download</button>\r\n            </div>\r\n            <div className=\"row\" >\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card\"\r\n                        onClick={() => {\r\n                            window.open(aVUrl, \"_blank\");\r\n                        }}>\r\n                        \r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Active Volunteer\r\n                                </p>\r\n                                <p className=\"stat\">{aV}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(campUrl, \"_blank\");\r\n                        }}>\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Camps\r\n                                </p>\r\n                                <p className=\"stat\">{camps}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(awarenessUrl, \"_blank\");\r\n                        }}>\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Awareness\r\n                                </p>\r\n                                <p className=\"stat\">{awareness}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div className=\"stat-card \">\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Donations\r\n                                </p>\r\n                                <p className=\"stat\">{donations}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n             <HelplineComponent newHelplines={newHelplines}  searchedCity={city} /> \r\n            <StatTable events={allEvents} newHelplines={newHelplines} av={allVolunteer} />\r\n            <DonationCharts\r\n                camps={allEvents?.filter((e) => e.TypeOfEvent === \"Camp\")}\r\n                selectedCity={city}\r\n            />\r\n            <HelplineChart newHelplines={newHelplines} selectedCity={city} />\r\n            <MonthlyEventChart\r\n                camp={monthlyCampData}\r\n                awareness={monthlyAwarenessData}\r\n            />\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\n// loading component\r\nexport const Loading = ({ loading }) => {\r\n    return (\r\n        <div>\r\n            <Lottie\r\n                options={{\r\n                    animationData: require(\"./assets/animation/dot.json\"),\r\n                    loop: true,\r\n                    autoplay: true,\r\n                }}\r\n                height={100}\r\n                width={100}\r\n                isStopped={!loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}