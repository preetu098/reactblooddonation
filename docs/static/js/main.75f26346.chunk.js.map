{"version":3,"sources":["components/Search/SearchTheme.module.css","Constans/index.ts","components/Chart/HelplineChart.tsx","components/Chart/MonthlyDonation.tsx","components/Chart/MonthlyEventChart.tsx","components/Helpline/index.tsx","components/Search/Search.tsx","components/Table/StatTable.tsx","Helplers/index.ts","Constans/DemoData.ts","services/index.ts","App.tsx","index.tsx"],"names":["module","exports","CITIES_ARRAY","MONTH_END","MONTH","CITY_HELPLINE_CITIES","Agra","Jaipur","Kanpur","Kolkata","Lucknow","Odisha","Pune","Ranchi","Varanasi","HelplineChart","helplines","selectedCity","chart","useRef","useState","city","setCity","useEffect","useLayoutEffect","current","data","i","push","month","donations","map","h","mon","parseInt","Added_Time","split","currCity","City_Region","display_value","currDonations","length","includes","console","log","filterData","x","am4core","am4charts","paddingRight","xAxis","xAxes","dataFields","category","title","text","renderer","minGridDistance","cellStartLocation","cellEndLocation","valueAxis","yAxes","donationAxis","opposite","series","name","yAxis","columns","template","fill","width","valueY","categoryX","tooltipText","series2","scrollbarX","cursor","legend","dispose","className","style","backgroundColor","id","height","am4themes_animated","CampDonationChart","back","date","label","chartData","setData","d","filter","da","toString","sort","a","b","size","onClick","theme","VictoryTheme","material","domainPadding","y","textAnchor","tickValues","f","dependentAxis","tickFormat","labelComponent","alignment","barWidth","events","target","eventHandlers","mutation","props","index","url","DonationCharts","camps","setLoading","monthStatShown","showMonthStat","allCamps","setCamps","monthStat","setMonthStat","currMonthStat","setCurrMonthStat","ref","React","createRef","monthData","Array","tempCamps","from","monthDonation","c","BloodConnect_City","e","Date_field","year","currDonation","Date","getFullYear","ID","exportComponentAsPDF","animate","duration","onLoad","MonthlyEventChart","camp","awareness","count","campData","setCampData","awarenessData","setAwarenessData","centerTitle","orientation","gutter","border","stroke","fontSize","symbol","type","offset","colorScale","HelplineComponent","searchedCity","isLoading","totalHelpline","setTotal","openHelpline","setOpen","closedHelpline","setClosed","helplineDonations","setDonations","total","open","closed","Status","Loading","options","animationData","require","loop","autoplay","isStopped","color","Search","handleChange","suggestions","setSuggestion","value","setValue","inputProps","placeholder","onChange","event","newValue","onKeyDown","key","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","slice","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","StatTable","av","allHelplines","loading","setMonth","setYear","totalCamps","totalAwareness","totalVolunteer","totalDonation","tempData","startDate","endDate","reverse","join","getTime","getDateRange","campDate","TypeOfEvent","activeVolunteer","v","helpline","htmlFor","cellSpacing","cellPadding","TABLESTATSDEMO","Math","floor","random","CREATOR","window","ZOHO","getVolunteer","page","criteria","config","reportName","pageSize","API","getAllRecords","getEvent","getHelplines","fetchAllData","init","activeVolunteers","len","data1","av1","hlp","hlp1","App","BASE_URL","location","ancestorOrigins","allEvents","setEvents","setHelplines","allVolunteer","setVolunteer","aV","setAV","setAwareness","monthlyCampData","setmonthlyCampData","monthlyAwarenessData","setmonthlyAwarenessData","aVUrl","setaVUrl","campUrl","setcampUrl","awarenessUrl","setawarenessUrl","loadData","volunteer","monthCamp","monthAwareness","myCamps","myAwareness","Helpline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75f26346.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchTheme_container__1nyy1\",\"suggestionsContainer\":\"SearchTheme_suggestionsContainer__11igi\",\"suggestionsList\":\"SearchTheme_suggestionsList__2fUzU\",\"suggestion\":\"SearchTheme_suggestion__1AGtJ\"};","export const CITIES_ARRAY = [\n    \"Agra\",\n    \"Consulting\",\n    \"Delhi NCR\",\n    \"Jaipur\",\n    \"Kanpur\",\n    \"Kolkata\",\n    \"Lucknow\",\n    \"Odisha\",\n    \"Pune\",\n    \"Ranchi\",\n    \"Varanasi\",\n];\nexport const __IS_DEV__ = false;\n\nexport const MONTH_END = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nexport const MONTH = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]\n\nexport const CITY_HELPLINE_CITIES = {\n    Agra: [\"Agra\"],\n    \"Delhi NCR\": [\"Delhi NCR\", \"Delhi\"],\n    Jaipur: [\"Jaipur\"],\n    Kanpur: [\"Kanpur\"],\n    Kolkata: [\"Kolkata\"],\n    Lucknow: [\"Lucknow\"],\n    Odisha: [\"Bhubaneswar\", \"Cuttack\",\"Odisha (OR)\"],\n    Pune: [\"Pune\"],\n    Ranchi: [\"Ranchi\"],\n    Varanasi: [\"Varanasi\"],\n};\n","import React, { ReactElement, useLayoutEffect, useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { Helpline } from \"../../Types\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES, MONTH } from \"../../Constans\";\n\ninterface Props {\n    helplines: Helpline[] | undefined;\n    selectedCity: string;\n}\n\ninterface ChartData {\n    helplines: number;\n    donations: number;\n    month?: string;\n}\n\nam4core.useTheme(am4themes_animated);\nexport default function HelplineChart({\n    helplines,\n    selectedCity,\n}: Props): ReactElement {\n    const chart = useRef<am4charts.XYChart | null>(null);\n    const [city, setCity] = useState<string>(selectedCity);\n\n    const filterData = () => {\n        if (!helplines || !chart.current) return;\n        let data: ChartData[] = [];\n        for (let i in MONTH) {\n            data.push({\n                month: MONTH[i],\n                donations: 0,\n                helplines: 0,\n            });\n        }\n        helplines.map((h) => {\n            let mon = parseInt(h.Added_Time.split(\" \")[0].split(\"-\")[1]);\n            let currCity = h.City_Region.display_value;\n            if (city === \"All\") {\n                let currDonations = h[\"Helpline_Handler.Donor_Count\"];\n                data[mon - 1].donations +=\n                    currDonations && currDonations.length > 0\n                        ? parseInt(currDonations)\n                        : 0;\n                data[mon - 1].helplines += 1;\n                data[mon - 1].month = MONTH[mon - 1];\n            } else if (city === \"Consulting\") {\n                if (\n                    !CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(currCity) &&\n                    !CITY_HELPLINE_CITIES.Odisha.includes(currCity) &&\n                    !CITIES_ARRAY.includes(currCity)\n                ) {\n                    let currDonations = h[\"Helpline_Handler.Donor_Count\"];\n                    data[mon - 1].donations +=\n                        currDonations && currDonations.length > 0\n                            ? parseInt(currDonations)\n                            : 0;\n                    data[mon - 1].helplines += 1;\n                    data[mon - 1].month = MONTH[mon - 1];\n                }\n            } else {\n                if (CITY_HELPLINE_CITIES[city].includes(currCity)) {\n                    let currDonations = h[\"Helpline_Handler.Donor_Count\"];\n                    data[mon - 1].donations +=\n                        currDonations && currDonations.length > 0\n                            ? parseInt(currDonations)\n                            : 0;\n                    data[mon - 1].helplines += 1;\n                    data[mon - 1].month = MONTH[mon - 1];\n                }\n            }\n        });\n        console.log(data);\n        chart.current.data = data;\n    };\n\n    useEffect(() => {\n        if (selectedCity && selectedCity !== city) setCity(selectedCity);\n    }, [selectedCity]);\n\n    useLayoutEffect(() => {\n        if (city && helplines) {\n            filterData();\n        }\n    }, [city, helplines]);\n\n    useLayoutEffect(() => {\n        let x = am4core.create(\"chartdiv\", am4charts.XYChart);\n\n        x.paddingRight = 20;\n\n        x.data = [\n            {\n                month: \"January\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"February\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"March\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"April\",\n                donations: 5,\n                helplines: 52,\n            },\n            {\n                month: \"May\",\n                donations: 5,\n                helplines: 52,\n            },\n        ];\n\n        let xAxis = x.xAxes.push(new am4charts.CategoryAxis());\n        xAxis.dataFields.category = \"month\";\n        xAxis.title.text = \"Months\";\n        xAxis.renderer.minGridDistance = 20;\n\n        xAxis.renderer.cellStartLocation = 0.2;\n        xAxis.renderer.cellEndLocation = 0.6;\n\n        let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.title.text = \"Total Requests\";\n\n        let donationAxis = x.yAxes.push(new am4charts.ValueAxis());\n        donationAxis.title.text = \"Donations\";\n        donationAxis.renderer.opposite = true;\n\n        let series = x.series.push(new am4charts.ColumnSeries());\n        series.name = \"Requests\";\n        series.yAxis = valueAxis;\n        series.columns.template.fill = am4core.color(\"#104547\"); // fill\n        series.columns.template.width = am4core.percent(80);\n        series.dataFields.valueY = \"helplines\";\n        series.dataFields.categoryX = \"month\";\n        series.tooltipText = \"{valueY}\";\n\n        let series2 = x.series.push(new am4charts.ColumnSeries());\n        series2.name = \"Donations\";\n        series2.yAxis = donationAxis;\n        series2.columns.template.fill = am4core.color(\"#CDA2AB\");\n        series2.columns.template.width = am4core.percent(80);\n        series2.dataFields.valueY = \"donations\";\n        series2.dataFields.categoryX = \"month\";\n        series2.tooltipText = \"{valueY} donations\";\n\n        let scrollbarX = new am4charts.XYChartScrollbar();\n        x.cursor = new am4charts.XYCursor();\n        scrollbarX.series.push(series);\n\n        x.legend = new am4charts.Legend();\n        chart.current = x;\n\n        return () => {\n            x.dispose();\n        };\n    }, []);\n\n    return (\n        <div\n            className=\"container mx-0 px-0\"\n            style={{ backgroundColor: \"#ffffff\" }}>\n                <h6 className=\"px-4 pt-4\">Monthly Helpline Data </h6>\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n        </div>\n    );\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { exportComponentAsPDF } from \"react-component-export-image\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport {\r\n    VictoryAxis, VictoryBar,\r\n    VictoryChart,\r\n\r\n\r\n    VictoryLabel, VictoryTheme,\r\n\r\n    VictoryTooltip\r\n} from \"victory\";\r\nimport { Event } from \"../../Types\";\r\nimport \"./Chart.css\";\r\n\r\ninterface Props {\r\n    selectedCity: string;\r\n    camps: Event[] | undefined;\r\n}\r\n\r\ninterface dataProps {\r\n    month: number;\r\n    donations: number;\r\n    label: string;\r\n}\r\n\r\ninterface MonthData {\r\n    city: string;\r\n    date: string;\r\n    donations: number;\r\n}\r\n\r\nconst DonationCharts = ({ selectedCity, camps }: Props) => {\r\n    // for year data  like jan, feb, mar\r\n    const initial_data = [\r\n        { month: 1, donations: 0, label: \"0\" },\r\n        { month: 2, donations: 0, label: \"0\" },\r\n        { month: 3, donations: 0, label: \"0\" },\r\n        { month: 4, donations: 0, label: \"0\" },\r\n        { month: 5, donations: 0, label: \"0\" },\r\n        { month: 6, donations: 0, label: \"0\" },\r\n        { month: 7, donations: 0, label: \"0\" },\r\n        { month: 8, donations: 0, label: \"0\" },\r\n        { month: 9, donations: 0, label: \"0\" },\r\n        { month: 10, donations: 0, label: \"0\" },\r\n        { month: 11, donations: 0, label: \"0\" },\r\n        { month: 12, donations: 0, label: \"0\" },\r\n    ];\r\n\r\n    const [chartData, setData] = useState<dataProps[]>(initial_data);\r\n    const [city, setCity] = useState<string>(selectedCity);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [monthStatShown, showMonthStat] = useState<boolean>(false);\r\n    const [allCamps, setCamps] = useState<Event[]>();\r\n    // month details\r\n    const [monthStat, setMonthStat] = useState<any>();\r\n    const [currMonthStat, setCurrMonthStat] = useState<MonthData[]>();\r\n\r\n    let ref = React.createRef<any>();\r\n\r\n    const downloadChart = () => {\r\n        exportComponentAsPDF(ref);\r\n    };\r\n\r\n   ;\r\n\r\n    const filterData = () => {\r\n        let monthData = Array(12) // camps and their donation details each month\r\n            .fill(0)\r\n            .map(() => [{}]);\r\n        if (!allCamps) return;\r\n        let tempCamps = Array.from(allCamps);\r\n        \r\n        let monthDonation:number[]  = Array(12).fill(0)\r\n        if (city !== \"All\") {\r\n            tempCamps = tempCamps.filter((c) => c.BloodConnect_City === city);\r\n        }\r\n        tempCamps.map((e) => {\r\n            let [, mon, year] = e.Date_field.split(\"-\");\r\n            let currDonation = e[\"Post_Camp_ID.Number_of_Donation\"];\r\n            if (parseInt(year) === new Date().getFullYear()) {\r\n                monthData[parseInt(mon) - 1].push({\r\n                    donations:\r\n                        currDonation && currDonation.length > 0\r\n                            ? parseInt(currDonation)\r\n                            : 0,\r\n                    label: e.ID,\r\n                    month: parseInt(mon) - 1,\r\n                    date: e.Date_field,\r\n                    city: e.BloodConnect_City\r\n                });\r\n                if (currDonation && currDonation.length > 0)\r\n                    monthDonation[parseInt(mon)- 1] += parseInt(currDonation)\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        \r\n        \r\n        setLoading(false);\r\n\r\n        // setting data for first chart\r\n        setData((data) => {\r\n            const newData = Array.from(data);\r\n            return newData.map((d) => {\r\n                d.donations = monthDonation[d.month - 1];\r\n                d.label = monthDonation[d.month - 1] + \"\";\r\n                return d;\r\n            });\r\n        });\r\n        console.log(monthData)\r\n        setMonthStat(monthData);\r\n    };\r\n\r\n    const handleClick = (i: number) => {\r\n        if (monthStat && monthStat[i]) {\r\n            console.log(\"Setting current month stat\", monthStat[i])\r\n            setCurrMonthStat(c => monthStat[i]);\r\n        }\r\n        showMonthStat(true);\r\n        console.log(\"Done setting current month stat\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedCity !== city) setCity(selectedCity);\r\n    }, [selectedCity]);\r\n\r\n    // i neeed to filter data in year  based and with city filter\r\n\r\n    useEffect(() => {\r\n        if (!camps) return;\r\n        setLoading(true);\r\n        filterData();\r\n        //fetchYearData();\r\n    }, [city, camps]);\r\n\r\n    useEffect(() => {\r\n        if (camps) setCamps(camps);\r\n    }, [camps]);\r\n\r\n    return (\r\n        <>\r\n            {!monthStatShown ? (\r\n                <div\r\n                    id=\"chart\"\r\n                    ref={ref}\r\n                    className=\"container chart-container my-4\">\r\n                    <button className=\"mx-2\" onClick={() => downloadChart()}>\r\n                        Download Chart\r\n                    </button>\r\n                    <VictoryChart\r\n                        theme={VictoryTheme.material}\r\n                        width={800}\r\n                        height={400}\r\n                        domainPadding={100}\r\n                        animate={{\r\n                            duration: 2000,\r\n                            onLoad: { duration: 1000 },\r\n                        }}>\r\n                        <VictoryLabel\r\n                            text=\"Monthly Report\"\r\n                            x={225}\r\n                            y={30}\r\n                            textAnchor=\"middle\"\r\n                        />\r\n                        <VictoryAxis\r\n                            tickValues={chartData.map((f) => f.month)}\r\n                            tickFormat={[\r\n                                \"Jan\",\r\n                                \"Feb\",\r\n                                \"Mar\",\r\n                                \"Apr\",\r\n                                \"May\",\r\n                                \"June\",\r\n                                \"July\",\r\n                                \"Aug\",\r\n                                \"Sep\",\r\n                                \"Oct\",\r\n                                \"Nov\",\r\n                                \"Dec\",\r\n                            ]}\r\n                        />\r\n                        <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                        <VictoryBar\r\n                            data={chartData}\r\n                            x=\"month\"\r\n                            y=\"donations\"\r\n                            alignment=\"middle\"\r\n                            events={[\r\n                                {\r\n                                    target: \"data\",\r\n                                    eventHandlers: {\r\n                                        onClick: () => {\r\n                                            return [\r\n                                                {\r\n                                                    target: \"data\",\r\n                                                    mutation: (props) => {\r\n                                                        console.log(\r\n                                                            props.index\r\n                                                        );\r\n                                                        handleClick(\r\n                                                            props.data[\r\n                                                                props.index\r\n                                                            ].month - 1\r\n                                                        );\r\n                                                        return true;\r\n                                                    },\r\n                                                },\r\n                                            ];\r\n                                        },\r\n                                    },\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n            ) : (\r\n                <CampDonationChart\r\n                    back={() => {\r\n                        console.log(\"back pressed\");\r\n                        showMonthStat(false);\r\n                    }}\r\n                    data={currMonthStat}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst CampDonationChart = ({ back, data }): ReactElement => {\r\n    const initial_data: Array<MonthData & { x: string; label: string }> = [\r\n        {\r\n            city: \"Agra\",\r\n            date: \"10-07-2020\",\r\n            x: \"12\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"11-07-2020\",\r\n            x: \"22\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"12-07-2020\",\r\n            x: \"34\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n    ];\r\n    const [chartData, setData] = useState<\r\n        Array<MonthData & { x: string; label: string }>\r\n    >(initial_data);\r\n    useEffect(() => {\r\n        if (data) {\r\n            let d2 = data.filter((d) => d.date != null && d.date.length > 0);\r\n            let d = d2.map((da) => {\r\n                return {\r\n                    city: da.city,\r\n                    date: da.date.split(\"-\")[0],\r\n                    donations: parseInt(da.donations.toString()),\r\n                    label: da.donations + ` donations on ${da.date} `,\r\n                    x: da.date.split(\"-\")[0] + `(${da.city})`,\r\n                };\r\n            });\r\n            let sorted = d.sort((a, b) => parseInt(a.date) - parseInt(b.date));\r\n            setData(d);\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"container chart-container my-4\">\r\n            <FiArrowLeft size={24} onClick={back} />\r\n            <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                width={800}\r\n                height={400}\r\n                domainPadding={100}>\r\n                <VictoryLabel\r\n                    text=\"Monthly Donations\"\r\n                    x={225}\r\n                    y={30}\r\n                    textAnchor=\"middle\"\r\n                />\r\n\r\n                <VictoryAxis\r\n                    tickValues={chartData.map((f) => f.x)}\r\n                    //tickFormat={['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']}\r\n                />\r\n                <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                <VictoryBar\r\n                    data={chartData}\r\n                    labelComponent={<VictoryTooltip />}\r\n                    x=\"x\"\r\n                    y=\"donations\"\r\n                    alignment=\"middle\"\r\n                    barWidth={24}\r\n                    events={[\r\n                        {\r\n                            target: \"data\",\r\n                            eventHandlers: {\r\n                                onClick: () => {\r\n                                    return [\r\n                                        {\r\n                                            target: \"data\",\r\n                                            mutation: (props) => {\r\n                                                console.log(\r\n                                                    props.data[props.index].url\r\n                                                );\r\n                                                return true;\r\n                                            },\r\n                                        },\r\n                                    ];\r\n                                },\r\n                            },\r\n                        },\r\n                    ]}\r\n                />\r\n            </VictoryChart>\r\n        </div>\r\n    );\r\n};\r\nexport default DonationCharts;\r\n","import React, { useEffect, useState, ReactElement } from 'react'\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryGroup, VictoryLegend } from 'victory'\nimport './Chart.css'\n\ninterface Props {\n    camp?: number[];\n    awareness?: number[]\n}\ninterface dataProps {\n    month: number;\n    donations: number;\n    label: number;\n    url: string\n}\n\ninterface GraphData {\n    month: number;\n    count: number;\n    label: number;\n}\n\nexport default function MonthlyEventChart({ camp, awareness }: Props): ReactElement {\n    const initial_data = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n    const initial_data1 = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n\n    const [campData, setCampData] = useState<GraphData[]>(initial_data)\n    const [awarenessData, setAwarenessData] = useState<GraphData[]>(initial_data1)\n    useEffect(() => {\n        if (camp) {\n            setCampData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = camp[da.month - 1]\n                    da.label = camp[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [camp])\n\n    useEffect(() => {\n        if (awareness) {\n            setAwarenessData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = awareness[da.month - 1]\n                    da.label = awareness[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [awareness])\n    return (\n        <div className=\"container chart-container my-4\">\n            <VictoryChart\n                theme={VictoryTheme.material}\n                width={800}\n                height={400}\n                domainPadding={100}\n            >\n\n                <VictoryLabel text=\"Monthly Report\" x={225} y={30} textAnchor=\"middle\" />\n                <VictoryLegend x={125} y={50}\n                    title=\"Legend\"\n                    centerTitle\n                    orientation=\"horizontal\"\n                    gutter={20}\n                    style={{ border: { stroke: \"black\" }, title: { fontSize: 20 } }}\n                    data={[\n                        { name: \"Camp\", symbol: { fill: \"blue\", type:\"rectangle\" } },\n                        { name: \"Awareness\", symbol: { fill: \"cyan\" } }\n                    ]}\n                />\n                <VictoryAxis\n\n                    tickValues={campData.map(f => f.month)}\n                    tickFormat={['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']}\n                />\n                <VictoryAxis\n                    dependentAxis\n\n                    tickFormat={x => x}\n                />\n                <VictoryGroup\n                    offset={20}\n                    colorScale={'qualitative'}\n                    animate={{\n                        duration: 2000,\n                        onLoad: { duration: 1000 }\n                    }}\n                >\n                    <VictoryBar\n                        data={campData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                    <VictoryBar\n                        data={awarenessData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                </VictoryGroup>\n            </VictoryChart>\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { FiArrowUp } from \"react-icons/fi\";\nimport Lottie from \"react-lottie\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES } from \"../../Constans\";\nimport { Helpline } from \"../../Types\";\n\ninterface Props {\n    searchedCity: string;\n    helplines: Helpline[] | undefined;\n}\n\nconst HelplineComponent = ({ searchedCity, helplines }: Props) => {\n    const [city, setCity] = useState<string>(\"All\");\n    const [isLoading, setLoading] = useState<boolean>(true);\n    const [totalHelpline, setTotal] = useState(0);\n    const [openHelpline, setOpen] = useState(0);\n    const [closedHelpline, setClosed] = useState(0);\n    const [helplineDonations, setDonations] = useState(0);\n\n    const filterData = () => {\n        if (!helplines) return;\n        let total = 0,\n            open = 0,\n            closed = 0,\n            donations = 0;\n        helplines.map((e) => {\n            let currCity = e.City_Region.display_value;\n            if(city === \"Consulting\") {\n                if(!CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(currCity) && !CITY_HELPLINE_CITIES.Odisha.includes(currCity) && !CITIES_ARRAY.includes(currCity)){\n                if (e.Status === \"Open\") open += 1;\n                else if (e.Status === \"Closed\"){\n                     closed += 1;\n                     if(e[\"Helpline_Handler.Donor_Count\"]  && e[\"Helpline_Handler.Donor_Count\"].length > 0)\n                     donations += parseInt(e[\"Helpline_Handler.Donor_Count\"])\n                }\n                total += 1;\n            }\n            }\n            else if (city === \"All\" || CITY_HELPLINE_CITIES[city].includes(currCity)) {\n                if (e.Status === \"Open\") open += 1;\n                else if (e.Status === \"Closed\"){\n                     closed += 1;\n                     if(e[\"Helpline_Handler.Donor_Count\"]  && e[\"Helpline_Handler.Donor_Count\"].length > 0)\n                     donations += parseInt(e[\"Helpline_Handler.Donor_Count\"])\n                }\n                total += 1;\n                \n            }\n        });\n\n        setOpen(open);\n        setClosed(closed);\n        setTotal(total);\n        setDonations(donations)\n        setLoading(false);\n    };\n\n    // function to fecth helpline stats\n    useEffect(() => {\n        console.log(\"City changed\", searchedCity);\n        if (searchedCity !== city) setCity(searchedCity);\n    }, [searchedCity]);\n\n    useEffect(() => {\n        setLoading(true);\n        if (helplines) filterData();\n        // fetchData();\n    }, [city, helplines]);\n\n    const Loading = () => {\n        return (\n            <div>\n                <Lottie\n                    options={{\n                        animationData: require(\"../../assets/animation/dot.json\"),\n                        loop: true,\n                        autoplay: true,\n                    }}\n                    height={100}\n                    width={100}\n                    isStopped={!isLoading}\n                />\n            </div>\n        );\n    };\n    return (\n        <div className=\"container mx-0 px-0\">\n            <div className=\"row \">\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Total Requests\n                                </p>\n                                <p className=\"stat\">{totalHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Open\n                                </p>\n                                <p className=\"stat\">{openHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Closed\n                                </p>\n                                <p className=\"stat\">{closedHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        <div className=\"stat-icon-container\">\n                            <FiArrowUp size={34} color=\"#D20003\" />\n                        </div>\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\">\n                                   Donations\n                                </p>\n                                <p className=\"stat\">{helplineDonations}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default HelplineComponent;\n","import React, { ReactElement, useState } from 'react'\r\nimport { FiSearch } from 'react-icons/fi'\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nimport './Search.css'\r\nimport theme from \"./SearchTheme.module.css\"\r\ninterface Props {\r\n    handleChange: (c: string) => void\r\n}\r\ninterface CityProps {\r\n    name: string\r\n}\r\n\r\nexport default function Search({ handleChange }: Props): ReactElement {\r\n\r\n    const [suggestions, setSuggestion] = useState<CityProps[]>([])\r\n    const [value, setValue] = useState('')\r\n    const city = [\r\n        { name: 'Delhi NCR' },\r\n        { name: 'Agra' },\r\n        { name: 'Lucknow' },\r\n        { name: 'Jaipur' },\r\n        { name: 'Kolkata' },\r\n        { name: 'Ranchi' },\r\n        { name: 'Odisha' },\r\n        { name: 'Varanasi' },\r\n        { name: 'Pune' },\r\n        { name: 'Kanpur' },\r\n        { name: 'Consulting' }\r\n    ]\r\n    const getSuggestions = (value: string) => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n\r\n        return inputLength === 0 ? [] : city.filter(c =>\r\n            c.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n    };\r\n\r\n    const getSuggestionValue = suggestion => suggestion.name;\r\n\r\n    // Use your imagination to render suggestions.\r\n    const renderSuggestion = suggestion => (\r\n        <div className=\"suggestion\">\r\n            {suggestion.name}\r\n        </div>\r\n    );\r\n\r\n    const onSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestion(getSuggestions(value))\r\n    };\r\n\r\n    const onSuggestionsClearRequested = () => {\r\n        setSuggestion([])\r\n    }\r\n    const onChange = (event, { newValue }) => {\r\n        setValue(newValue)\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if(e.key === 'Enter') {\r\n            handleChange(e.target.value)\r\n        }\r\n    }\r\n\r\n    const inputProps = {\r\n        placeholder: 'Enter the city',\r\n        value,\r\n        onChange: onChange,\r\n        onKeyDown: handleKeyDown\r\n    };\r\n    return (\r\n        <div className=\"my-4 col-lg-6\">\r\n            <div className=\"d-flex container\">\r\n                <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                    theme={theme}\r\n                />\r\n                \r\n                <div className=\"search-icon\" onClick={() => {\r\n                    console.log(value)\r\n                    handleChange(value)\r\n                }}>\r\n                    <FiSearch color=\"white\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport { exportComponentAsPDF } from \"react-component-export-image\";\nimport { Loading } from \"../../App\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES } from \"../../Constans\";\nimport { getDateRange } from \"../../Helplers\";\nimport { Event, Helpline, TableStatsType, Team } from \"../../Types\";\nimport \"./Table.css\";\n\ninterface Props {\n    events: Event[] | undefined;\n    av: Team[] | undefined;\n    allHelplines:Helpline[] | undefined\n}\n\nexport default function StatTable({ events, av, allHelplines }: Props): ReactElement {\n    const [data, setData] = useState<TableStatsType[] | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [month, setMonth] = useState<number>(0);\n    const [year, setYear] = useState<number>(0);\n\n    let totalCamps = 0,\n        totalAwareness = 0,\n        totalHelpline = 0,\n        totalVolunteer = 0,\n        totalDonation = 0;\n    const ref = React.createRef<any>();\n\n    const filterData = () => {\n        const tempData: TableStatsType[] = [];\n        const [startDate,endDate ] = getDateRange(month,year);\n        if (!events) return;\n        for (let i in CITIES_ARRAY) {\n            let city = CITIES_ARRAY[i];\n            let camps = 0,\n                donations = 0,\n                awareness = 0,\n                helplines = 0;\n            events.map((e) => {\n              let campDate = new Date(e.Date_field.split(\"-\").reverse().join(\"-\")).getTime()\n                if (e.BloodConnect_City === city && campDate >= startDate && campDate <= endDate) {\n                  let d = e[\"Post_Camp_ID.Number_of_Donation\"]\n                  if(e.TypeOfEvent === \"Awareness\"){\n                    awareness ++;\n                  } else {\n                    camps ++;\n                    donations += d && d.length > 0 ? parseInt(d) : 0\n                  }\n                }\n            });\n            if(allHelplines)\n            if(city === \"Consulting\") {\n            allHelplines.map(h => {\n                let date = new Date(h.Added_Time.split(\" \")[0].split(\"-\").reverse().join(\"-\")).getTime();\n                let currCity = h.City_Region.display_value;\n                if(CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(currCity) || CITY_HELPLINE_CITIES.Odisha.includes(currCity))\n                    return 0;\n                else if(!CITIES_ARRAY.filter(c => c !== city).includes(currCity) && date >= startDate && date <= endDate){\n                    helplines += 1;\n                }\n            })\n        } else {\n\n            allHelplines.map(h => {\n                let date = new Date(h.Added_Time.split(\" \")[0].split(\"-\").reverse().join(\"-\")).getTime();\n                if(CITY_HELPLINE_CITIES[city].includes(h.City_Region.display_value) && date >= startDate && date <= endDate){\n                    helplines += 1;\n                }\n            })\n        }\n            tempData.push({\n              city: city,\n              activeVolunteer: av ?  av.filter(v => v.BloodConnect_City === city).length : 0,\n              camps,\n              awareness,\n              donations,\n              helpline: helplines\n            })\n        }\n\n        console.log(tempData)\n        setData(tempData)\n        setLoading(false)\n    };\n\n    \n\n    useEffect(() => {\n        console.log(\"called functin\");\n        setLoading(true);\n        if(events && av)\n          filterData()\n    }, [month, year,events,av]);\n\n    return (\n        <div className=\"container py-4 mx-0 px-0\" ref={ref}>\n            <div id=\"wrapper\" className=\"d-flex flex-column\">\n                <div className=\"d-flex flex-row justify-content-between py-4 px-3\">\n                    <h4>Report Table</h4>\n                    <div className=\"d-flex flex-row\">\n                        <div className=\"d-flex flex-column max-2\">\n                            <label htmlFor=\"month\">Month</label>\n                            <select\n                                id=\"month\"\n                                onChange={({ target }) =>\n                                    setMonth(parseInt(target.value))\n                                }>\n                                <option value=\"0\">All</option>\n                                <option value=\"1\">January</option>\n                                <option value=\"2\">Febraury</option>\n                                <option value=\"3\">March</option>\n                                <option value=\"4\">April</option>\n                                <option value=\"5\">May</option>\n                                <option value=\"6\">June</option>\n                                <option value=\"7\">July</option>\n                                <option value=\"8\">August</option>\n                                <option value=\"9\">September</option>\n                                <option value=\"10\">October</option>\n                                <option value=\"11\">November</option>\n                                <option value=\"12\">Decenmber</option>\n                            </select>\n                        </div>\n\n                        {/* Year filter */}\n\n                        <div className=\"d-flex flex-column mx-2\">\n                            <label htmlFor=\"month\">Year</label>\n                            <select\n                                id=\"month\"\n                                onChange={({ target }) =>\n                                    setYear(parseInt(target.value))\n                                }>\n                                <option value=\"0\">All</option>\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2019\">2019</option>\n                            </select>\n                        </div>\n                        <div className=\"d-flex flex-column mx-2\">\n                            <p className=\"mb-1\">Download Table</p>\n                            <button onClick={() => exportComponentAsPDF(ref)}>\n                                Download\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <table id=\"keywords\" cellSpacing=\"0\" cellPadding=\"0\">\n                    <thead>\n                        <tr>\n                            <th>\n                                <span>City</span>\n                            </th>\n                            <th>\n                                <span>Camps</span>\n                            </th>\n                            <th>\n                                <span>Awareness</span>\n                            </th>\n                            <th>\n                                <span>Helpline</span>\n                            </th>\n                            <th>\n                                <span>Donations</span>\n                            </th>\n                            <th>\n                                <span>Active Volunteer</span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {loading ? (\n                            <div className=\"container-fluid d-flex justiify-content-center align-items-center\">\n                                <Loading loading={loading} />\n                            </div>\n                        ) : (\n                            data!.map(\n                                (\n                                    {\n                                        city,\n                                        camps,\n                                        awareness,\n                                        helpline,\n                                        donations,\n                                        activeVolunteer,\n                                    },\n                                    index\n                                ) => {\n                                    totalCamps += camps;\n                                    totalAwareness += awareness;\n                                    totalDonation += donations;\n                                    totalHelpline += helpline;\n                                    totalVolunteer += activeVolunteer;\n                                    return (\n                                        <tr key={index}>\n                                            <td className=\"lalign\">{city}</td>\n                                            <td>{camps}</td>\n                                            <td>{awareness}</td>\n                                            <td>{helpline}</td>\n                                            <td>{donations}</td>\n                                            <td>{activeVolunteer}</td>\n                                        </tr>\n                                    );\n                                }\n                            )\n                        )}\n\n                        <tr style={{ backgroundColor: \"#ececec\" }}>\n                            <td className=\"lalign\">Total</td>\n                            <td>{totalCamps}</td>\n                            <td>{totalAwareness}</td>\n                            <td>{totalHelpline}</td>\n                            <td>{totalDonation}</td>\n                            <td>{totalVolunteer}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n","import { start } from \"repl\";\nimport { MONTH_END } from \"../Constans\";\n\nexport const sleep = (ms:number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n// inputs \n// Jan - Dec - [1 - 12] 0 - All Months\n// year = 0 means all years\nexport const getDateRange = (month:number,year: number):number []=> {\n\n    // start and end date for filter \n    let startDate: Array<string> = [],\n        endDate: Array<string> = [];\n    startDate[0] = \"01\";\n\n    // selecting all years\n    if (year === 0) {\n        startDate[2] = \"2000\";\n        endDate[2] = \"2099\";\n    }else {\n      startDate[2] = year.toString();\n      endDate[2] = year.toString();\n    }\n    // selecting all month\n    if (month === 0) {\n        startDate[1] = \"01\";\n        endDate[1] = \"12\";\n        endDate[0] = \"31\"\n    } else {\n      let mon = month > 9 ? month.toString() : \"0\"+month.toString()\n      startDate[1] = mon\n      endDate[1] = mon\n      endDate[0] = MONTH_END[month-1].toString();\n    }\n    let sdTimestamp = new Date(startDate.reverse().join(\"-\")).getTime()\n    let edTimestamp = new Date(endDate.reverse().join(\"-\")).getTime()\n    return [sdTimestamp,edTimestamp]\n}","import { CITIES_ARRAY } from \".\";\nimport { sleep } from \"../Helplers\";\nimport { TableStatsType } from \"../Types\";\nimport CAMPDATA from \"./CAMP.json\";\nimport HELPLINEDATA from \"./HELPLINE.json\";\nimport TEAMDATA from \"./TEAM.json\";\n\nexport const TABLESTATSDEMO: TableStatsType[] = [];\n\nfor (let i in CITIES_ARRAY) {\n    TABLESTATSDEMO.push({\n        city: CITIES_ARRAY[i],\n        camps: Math.floor(Math.random() * 10),\n        awareness: Math.floor(Math.random() * 5),\n        helpline: Math.floor(Math.random() * 20),\n        donations: Math.floor(Math.random() * 25),\n        activeVolunteer: Math.floor(Math.random() * 150),\n    });\n}\n\nexport const CAMP_DATA_DEMO = CAMPDATA;\n\nexport const getDemoVolunteerData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return TEAMDATA \n    return TEAMDATA.data.filter((t) => t.BloodConnect_City === city)\n    \n};\n\nexport const getDemoCampData = async (city?: string):Promise<any> => {\n   await sleep(300);\n    if (!city) return CAMPDATA;\n    return  CAMPDATA.data.filter((c) => c.BloodConnect_City === city)\n    \n};\n\nexport const getDemoHelplineData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return  HELPLINEDATA \n    // @ts-ignore\n    return  HELPLINEDATA.data.filter((h) =>city !== \"Consulting\" ?  h.City_Region.display_value === city : !CITIES_ARRAY.includes(h.City_Region.display_value))\n    \n};\n","import { __IS_DEV__ } from \"../Constans\";\r\nimport {\r\n    getDemoCampData,\r\n    getDemoHelplineData, getDemoVolunteerData\r\n} from \"../Constans/DemoData\";\r\nimport {\r\n    CreatorResponse,\r\n\r\n    Event,\r\n\r\n    Helpline, Team\r\n} from \"../Types\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ZOHO: any;\r\n    }\r\n}\r\n\r\ninterface overall {\r\n    city: string;\r\n    donations: number;\r\n}\r\ninterface API<Data> {\r\n    code: number;\r\n    data: Data[];\r\n}\r\ninterface PostCamp {\r\n    Number_of_Donation: any;\r\n    Camp_Awareness: {\r\n        display_value: string;\r\n    };\r\n}\r\n\r\ninterface MonthData {\r\n    city: string;\r\n    date: string;\r\n    donations: number;\r\n}\r\n\r\nconst CREATOR = window.ZOHO.CREATOR;\r\n\r\nexport const get = () => {\r\n    CREATOR.init()\r\n        .then((d) => {\r\n            let config = {\r\n                reportName: \"BloodConnect_Team_Report\",\r\n                page: \"1\",\r\n                pageSize: \"200\",\r\n            };\r\n\r\n            //get all records API\r\n            CREATOR.API.getAllRecords(config).then(function (response) {\r\n                //callback block\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n        });\r\n};\r\n\r\nconst getVolunteer = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Team>> => {\r\n    let criteria = '(Status==\"Active\")';\r\n    if (city !== \"All\") {\r\n        criteria = `(Status==\"Active\" && BloodConnect_City==\"${city}\")`;\r\n    }\r\n    console.log(__IS_DEV__)\r\n    if (__IS_DEV__) {\r\n        console.log(\"Heya\")\r\n        if (city !== \"All\") return getDemoVolunteerData(city);\r\n        return getDemoVolunteerData();\r\n    }\r\n\r\n    let config = {\r\n        reportName: \"BloodConnect_Team_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getEvent = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Event>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\") {\r\n        criteria = `(BloodConnect_City==\"${city}\")`;\r\n    }\r\n\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoCampData(city);\r\n        return getDemoCampData();\r\n    }\r\n    let config = {\r\n        reportName: \"Camp_Awareness_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getCity = (city: string) => {\r\n    let config = {\r\n        reportName: \"Vlookup_Report\",\r\n        criteria: `City==\"${city}\"`,\r\n        page: 1,\r\n        pageSize: \"1\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getHelplines = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Helpline>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\" && city !== \"Consulting\") {\r\n        criteria = `(City_Region==${city})`;\r\n    }\r\n\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoHelplineData(city);\r\n        return getDemoHelplineData();\r\n    }\r\n\r\n    let config = {\r\n        reportName: \"Helpline_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getPostCamp = (page: number, city: string): Promise<API<PostCamp>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\") {\r\n        criteria = `(BloodConnect_City==\"${city}\")`;\r\n    }\r\n    let config = {\r\n        reportName: \"Post_Camp_Form_Report\",\r\n        criteria: criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n    // return new Promise((resolve, reject) => {\r\n    //     let response = CREATOR.API.getAllRecords(config)\r\n    //     if (response)\r\n    //         resolve(response)\r\n    //     else\r\n    //         reject({ code: 500, data: []})\r\n    // })\r\n};\r\n// fetching all data at once to make the api calls less\r\nexport const fetchAllData = async (): Promise<{\r\n    events: Event[]| undefined;\r\n    activeVolunteers: Team[] | undefined;\r\n    helplines: Helpline[] | undefined;\r\n}> => {\r\n    if(!__IS_DEV__)\r\n        await CREATOR.init()\r\n\r\n    let events: Event[] | undefined = [];\r\n    let activeVolunteers: Team[] | undefined = [];\r\n    let helplines: Helpline[] | undefined = [];\r\n    let len = 0;\r\n    let page = 1;\r\n    try {\r\n        let { data } = await getEvent(page++, \"All\");\r\n        events.push(...data);\r\n        len = data.length;\r\n\r\n        while (len === 200) {\r\n            let { data: data1 } = await getEvent(page++, \"All\");\r\n            events.push(...data1);\r\n            len = data1.length;\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in event fetching\",e);\r\n    }\r\n    // getting volunteer data\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: av } = await getVolunteer(page++, \"All\");\r\n        len = av.length;\r\n        activeVolunteers.push(...av);\r\n        while (len === 200) {\r\n            let { data: av1 } = await getVolunteer(page++, \"All\");\r\n            len = av1.length;\r\n            activeVolunteers.push(...av1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in volunteer fetching\");\r\n    }\r\n    // helplines\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: hlp } = await getHelplines(page++, \"All\");\r\n        len = hlp.length;\r\n        helplines.push(...hlp);\r\n\r\n        while (len === 200) {\r\n            let { data: hlp1 } = await getHelplines(page++, \"All\");\r\n            len = hlp1.length;\r\n            helplines.push(...hlp1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in helpline fetching\");\r\n    }\r\n\r\n    console.log(\"Helplines are \",helplines)\r\n    return {\r\n        events: events,\r\n        activeVolunteers: activeVolunteers,\r\n        helplines: helplines,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FiArrowUp, FiCalendar, FiUser, FiUsers } from \"react-icons/fi\";\r\nimport Lottie from \"react-lottie\";\r\nimport \"./App.css\";\r\nimport HelplineChart from \"./components/Chart/HelplineChart\";\r\nimport DonationCharts from \"./components/Chart/MonthlyDonation\";\r\nimport MonthlyEventChart from \"./components/Chart/MonthlyEventChart\";\r\nimport HelplineComponent from \"./components/Helpline\";\r\nimport Search from \"./components/Search/Search\";\r\nimport StatTable from \"./components/Table/StatTable\";\r\nimport { fetchAllData } from \"./services/index\";\r\nimport { Event, Helpline, Team } from \"./Types\";\r\n\r\nconst App = () => {\r\n    let BASE_URL =\r\n        \"https://app.zohocreator.in/deepak64/bloodconnect-india-donor-system\";\r\n    if (\r\n        window.location.ancestorOrigins &&\r\n        window.location.ancestorOrigins[0] &&\r\n        !window.location.ancestorOrigins[0].includes(\"localhost\")\r\n    ) {\r\n        if (window.location.ancestorOrigins[0].includes(\"bloodconnect\"))\r\n            BASE_URL = window.location.ancestorOrigins[0];\r\n    }\r\n\r\n    const [allEvents, setEvents] = useState<Event[] | undefined>();\r\n    const [allHelplines, setHelplines] = useState<Helpline[] | undefined>();\r\n    const [allVolunteer, setVolunteer] = useState<Team[] | undefined>();\r\n\r\n    const [city, setCity] = useState(\"All\");\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [aV, setAV] = useState(-1);\r\n    const [camps, setCamps] = useState(-1);\r\n    const [awareness, setAwareness] = useState(-1);\r\n    const [donations, setDonations] = useState(-1);\r\n\r\n    // Monthly Datas\r\n    // Donations data\r\n    // Camp data\r\n    const [monthlyCampData, setmonthlyCampData] = useState(Array(12).fill(0));\r\n    // Awareness data\r\n    const [monthlyAwarenessData, setmonthlyAwarenessData] = useState(\r\n        Array(12).fill(0)\r\n    );\r\n    const [aVUrl, setaVUrl] = useState(\r\n        `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active`\r\n    );\r\n    const [campUrl, setcampUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp`\r\n    );\r\n    const [awarenessUrl, setawarenessUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness`\r\n    );\r\n\r\n    const filterData = () => {\r\n        console.log(\"Filtering data\", allEvents, allVolunteer);\r\n        setLoading(true);\r\n        let camps = 0,\r\n            awareness = 0,\r\n            donations = 0,\r\n            volunteer = 0;\r\n        let monthCamp = Array(12).fill(0);\r\n        let monthAwareness = Array(12).fill(0);\r\n        if (allEvents) {\r\n            if (city === \"All\") {\r\n                camps = allEvents.filter((e) => e.TypeOfEvent === \"Camp\")\r\n                    .length;\r\n                awareness = allEvents.filter(\r\n                    (e) => e.TypeOfEvent === \"Awareness\"\r\n                ).length;\r\n\r\n                allEvents.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        if (e.TypeOfEvent === \"Camp\") monthCamp[mon - 1] += 1;\r\n                        else monthAwareness[mon - 1] += 1;\r\n                    }\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                });\r\n            } else {\r\n                let myCamps = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Camp\" && e.BloodConnect_City === city\r\n                );\r\n                camps = myCamps.length;\r\n                let myAwareness = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Awareness\" &&\r\n                        e.BloodConnect_City === city\r\n                );\r\n                awareness = myAwareness.length;\r\n\r\n                // calcuating camp and awarness per month\r\n                myCamps.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthCamp[mon - 1] += 1;\r\n                    }\r\n                });\r\n                myAwareness.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthAwareness[mon - 1] += 1;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        if (allVolunteer) {\r\n            if (city === \"All\") volunteer = allVolunteer.length;\r\n            else\r\n                volunteer = allVolunteer.filter(\r\n                    (v) => v.BloodConnect_City === city\r\n                ).length;\r\n            console.log(\"volunteer filter complete\", volunteer);\r\n        }\r\n\r\n        setCamps(camps);\r\n        setAV(volunteer);\r\n        setDonations(donations);\r\n        setAwareness(awareness);\r\n        setmonthlyAwarenessData(monthAwareness);\r\n        setmonthlyCampData(monthCamp);\r\n        setLoading(false);\r\n        return;\r\n    };\r\n    const loadData = async () => {\r\n        const { events, helplines, activeVolunteers } = await fetchAllData();\r\n        setEvents((e) => events);\r\n        setHelplines((e) => helplines);\r\n        setVolunteer((e) => activeVolunteers);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //loadAllData();\r\n        if (!!allEvents && !!allVolunteer) filterData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [city, allEvents, allVolunteer]);\r\n\r\n    // only once\r\n    useEffect(() => {\r\n        loadData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const setSearch = (c: string): void => {\r\n        if (c !== city) {\r\n            setLoading(true);\r\n            setCity(c);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (city !== \"All\") {\r\n            setaVUrl(\r\n                `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active&BloodConnect_City=${city}`\r\n            );\r\n            setcampUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp&BloodConnect_City=${city}`\r\n            );\r\n            setawarenessUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness&BloodConnect_City=${city}`\r\n            );\r\n        }\r\n    }, [BASE_URL, city]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-between \">\r\n                <h4 className=\"stat col-lg-4 col-sm-12  mt-2 d-flex align-items-center justify-content-center\">\r\n                    {city === \"All\" ? \"BloodConnect\" : city}\r\n                </h4>\r\n                <Search handleChange={setSearch} />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card\"\r\n                        onClick={() => {\r\n                            window.open(aVUrl, \"_blank\");\r\n                        }}>\r\n                        \r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Active Volunteer\r\n                                </p>\r\n                                <p className=\"stat\">{aV}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(campUrl, \"_blank\");\r\n                        }}>\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Camps\r\n                                </p>\r\n                                <p className=\"stat\">{camps}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(awarenessUrl, \"_blank\");\r\n                        }}>\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Awareness\r\n                                </p>\r\n                                <p className=\"stat\">{awareness}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div className=\"stat-card \">\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiArrowUp size={34} color=\"#D20003\" />\r\n                        </div>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    Donations\r\n                                </p>\r\n                                <p className=\"stat\">{donations}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n             <HelplineComponent helplines={allHelplines} searchedCity={city} /> \r\n            <StatTable events={allEvents} allHelplines={allHelplines} av={allVolunteer} />\r\n            <DonationCharts\r\n                camps={allEvents?.filter((e) => e.TypeOfEvent === \"Camp\")}\r\n                selectedCity={city}\r\n            />\r\n            <MonthlyEventChart\r\n                camp={monthlyCampData}\r\n                awareness={monthlyAwarenessData}\r\n            />\r\n            <HelplineChart helplines={allHelplines} selectedCity={city} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Loading = ({ loading }) => {\r\n    return (\r\n        <div>\r\n            <Lottie\r\n                options={{\r\n                    animationData: require(\"./assets/animation/dot.json\"),\r\n                    loop: true,\r\n                    autoplay: true,\r\n                }}\r\n                height={100}\r\n                width={100}\r\n                isStopped={!loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}