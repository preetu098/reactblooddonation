{"version":3,"sources":["components/Search/SearchTheme.module.css","components/Chart/MonthlyDonation.tsx","components/Chart/MonthlyEventChart.tsx","components/Helpline/index.tsx","components/Search/Search.tsx","Constans/index.ts","components/Table/StatTable.tsx","Helplers/index.ts","Constans/DemoData.ts","services/index.ts","App.tsx","index.tsx"],"names":["module","exports","CampDonationChart","back","data","useState","city","date","x","donations","label","chartData","setData","useEffect","d","filter","length","map","da","split","parseInt","toString","sort","a","b","className","size","onClick","theme","VictoryTheme","material","width","height","domainPadding","text","y","textAnchor","tickValues","f","dependentAxis","tickFormat","labelComponent","alignment","barWidth","events","target","eventHandlers","mutation","props","console","log","index","url","DonationCharts","selectedCity","camps","month","setCity","setLoading","monthStatShown","showMonthStat","allCamps","setCamps","monthStat","setMonthStat","currMonthStat","setCurrMonthStat","ref","React","createRef","monthData","Array","fill","tempCamps","from","monthDonation","c","BloodConnect_City","e","Date_field","mon","year","currDonation","Date","getFullYear","push","ID","filterData","id","exportComponentAsPDF","animate","duration","onLoad","i","MonthlyEventChart","camp","awareness","count","campData","setCampData","awarenessData","setAwarenessData","title","centerTitle","orientation","gutter","style","border","stroke","fontSize","name","symbol","type","offset","colorScale","HelplineComponent","searchedCity","helplines","isLoading","totalHelpline","setTotal","openHelpline","setOpen","closedHelpline","setClosed","handlingHelpline","setHandling","total","open","closed","handling","City_Region","display_value","Status","Loading","options","animationData","require","loop","autoplay","isStopped","Search","handleChange","suggestions","setSuggestion","value","setValue","inputProps","placeholder","onChange","event","newValue","onKeyDown","key","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","slice","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","color","CITIES_ARRAY","MONTH_END","CITY_HELPLINE_CITIES","Agra","Jaipur","Kanpur","Kolkata","Lucknow","Odisha","Pune","Ranchi","Varanasi","StatTable","av","allHelplines","loading","setMonth","setYear","totalCamps","totalAwareness","totalVolunteer","totalDonation","tempData","startDate","endDate","reverse","join","getTime","getDateRange","campDate","TypeOfEvent","h","Added_Time","currCity","includes","activeVolunteer","v","helpline","htmlFor","cellSpacing","cellPadding","backgroundColor","TABLESTATSDEMO","Math","floor","random","CREATOR","window","ZOHO","getVolunteer","page","criteria","config","reportName","pageSize","API","getAllRecords","getEvent","getHelplines","fetchAllData","init","activeVolunteers","len","data1","av1","hlp","hlp1","App","BASE_URL","location","ancestorOrigins","allEvents","setEvents","setHelplines","allVolunteer","setVolunteer","aV","setAV","setAwareness","setDonations","monthlyCampData","setmonthlyCampData","monthlyAwarenessData","setmonthlyAwarenessData","aVUrl","setaVUrl","campUrl","setcampUrl","awarenessUrl","setawarenessUrl","loadData","volunteer","monthCamp","monthAwareness","myCamps","myAwareness","Helpline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39eca804.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchTheme_container__1nyy1\",\"suggestionsContainer\":\"SearchTheme_suggestionsContainer__11igi\",\"suggestionsList\":\"SearchTheme_suggestionsList__2fUzU\",\"suggestion\":\"SearchTheme_suggestion__1AGtJ\"};","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport { exportComponentAsPDF } from \"react-component-export-image\";\r\nimport { FiArrowLeft } from \"react-icons/fi\";\r\nimport {\r\n    VictoryAxis, VictoryBar,\r\n    VictoryChart,\r\n\r\n\r\n    VictoryLabel, VictoryTheme,\r\n\r\n    VictoryTooltip\r\n} from \"victory\";\r\nimport { Event } from \"../../Types\";\r\nimport \"./Chart.css\";\r\n\r\ninterface Props {\r\n    selectedCity: string;\r\n    camps: Event[] | undefined;\r\n}\r\n\r\ninterface dataProps {\r\n    month: number;\r\n    donations: number;\r\n    label: string;\r\n}\r\n\r\ninterface MonthData {\r\n    city: string;\r\n    date: string;\r\n    donations: number;\r\n}\r\n\r\nconst DonationCharts = ({ selectedCity, camps }: Props) => {\r\n    // for year data  like jan, feb, mar\r\n    const initial_data = [\r\n        { month: 1, donations: 0, label: \"0\" },\r\n        { month: 2, donations: 0, label: \"0\" },\r\n        { month: 3, donations: 0, label: \"0\" },\r\n        { month: 4, donations: 0, label: \"0\" },\r\n        { month: 5, donations: 0, label: \"0\" },\r\n        { month: 6, donations: 0, label: \"0\" },\r\n        { month: 7, donations: 0, label: \"0\" },\r\n        { month: 8, donations: 0, label: \"0\" },\r\n        { month: 9, donations: 0, label: \"0\" },\r\n        { month: 10, donations: 0, label: \"0\" },\r\n        { month: 11, donations: 0, label: \"0\" },\r\n        { month: 12, donations: 0, label: \"0\" },\r\n    ];\r\n\r\n    const [chartData, setData] = useState<dataProps[]>(initial_data);\r\n    const [city, setCity] = useState<string>(selectedCity);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [monthStatShown, showMonthStat] = useState<boolean>(false);\r\n    const [allCamps, setCamps] = useState<Event[]>();\r\n    // month details\r\n    const [monthStat, setMonthStat] = useState<any>();\r\n    const [currMonthStat, setCurrMonthStat] = useState<MonthData[]>();\r\n\r\n    let ref = React.createRef<any>();\r\n\r\n    const downloadChart = () => {\r\n        exportComponentAsPDF(ref);\r\n    };\r\n\r\n   ;\r\n\r\n    const filterData = () => {\r\n        let monthData = Array(12) // camps and their donation details each month\r\n            .fill(0)\r\n            .map(() => [{}]);\r\n        if (!allCamps) return;\r\n        let tempCamps = Array.from(allCamps);\r\n        \r\n        let monthDonation:number[]  = Array(12).fill(0)\r\n        if (city !== \"All\") {\r\n            tempCamps = tempCamps.filter((c) => c.BloodConnect_City === city);\r\n        }\r\n        tempCamps.map((e) => {\r\n            let [, mon, year] = e.Date_field.split(\"-\");\r\n            let currDonation = e[\"Post_Camp_ID.Number_of_Donation\"];\r\n            if (parseInt(year) === new Date().getFullYear()) {\r\n                monthData[parseInt(mon) - 1].push({\r\n                    donations:\r\n                        currDonation && currDonation.length > 0\r\n                            ? parseInt(currDonation)\r\n                            : 0,\r\n                    label: e.ID,\r\n                    month: parseInt(mon) - 1,\r\n                    date: e.Date_field,\r\n                    city: e.BloodConnect_City\r\n                });\r\n                if (currDonation && currDonation.length > 0)\r\n                    monthDonation[parseInt(mon)- 1] += parseInt(currDonation)\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        \r\n        \r\n        setLoading(false);\r\n\r\n        // setting data for first chart\r\n        setData((data) => {\r\n            const newData = Array.from(data);\r\n            return newData.map((d) => {\r\n                d.donations = monthDonation[d.month - 1];\r\n                d.label = monthDonation[d.month - 1] + \"\";\r\n                return d;\r\n            });\r\n        });\r\n        console.log(monthData)\r\n        setMonthStat(monthData);\r\n    };\r\n\r\n    const handleClick = (i: number) => {\r\n        if (monthStat && monthStat[i]) {\r\n            console.log(\"Setting current month stat\", monthStat[i])\r\n            setCurrMonthStat(c => monthStat[i]);\r\n        }\r\n        showMonthStat(true);\r\n        console.log(\"Done setting current month stat\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (selectedCity !== city) setCity(selectedCity);\r\n    }, [selectedCity]);\r\n\r\n    // i neeed to filter data in year  based and with city filter\r\n\r\n    useEffect(() => {\r\n        if (!camps) return;\r\n        setLoading(true);\r\n        filterData();\r\n        //fetchYearData();\r\n    }, [city, camps]);\r\n\r\n    useEffect(() => {\r\n        if (camps) setCamps(camps);\r\n    }, [camps]);\r\n\r\n    return (\r\n        <>\r\n            {!monthStatShown ? (\r\n                <div\r\n                    id=\"chart\"\r\n                    ref={ref}\r\n                    className=\"container chart-container my-4\">\r\n                    <button className=\"mx-2\" onClick={() => downloadChart()}>\r\n                        Download Chart\r\n                    </button>\r\n                    <VictoryChart\r\n                        theme={VictoryTheme.material}\r\n                        width={800}\r\n                        height={400}\r\n                        domainPadding={100}\r\n                        animate={{\r\n                            duration: 2000,\r\n                            onLoad: { duration: 1000 },\r\n                        }}>\r\n                        <VictoryLabel\r\n                            text=\"Monthly Report\"\r\n                            x={225}\r\n                            y={30}\r\n                            textAnchor=\"middle\"\r\n                        />\r\n                        <VictoryAxis\r\n                            tickValues={chartData.map((f) => f.month)}\r\n                            tickFormat={[\r\n                                \"Jan\",\r\n                                \"Feb\",\r\n                                \"Mar\",\r\n                                \"Apr\",\r\n                                \"May\",\r\n                                \"June\",\r\n                                \"July\",\r\n                                \"Aug\",\r\n                                \"Sep\",\r\n                                \"Oct\",\r\n                                \"Nov\",\r\n                                \"Dec\",\r\n                            ]}\r\n                        />\r\n                        <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                        <VictoryBar\r\n                            data={chartData}\r\n                            x=\"month\"\r\n                            y=\"donations\"\r\n                            alignment=\"middle\"\r\n                            events={[\r\n                                {\r\n                                    target: \"data\",\r\n                                    eventHandlers: {\r\n                                        onClick: () => {\r\n                                            return [\r\n                                                {\r\n                                                    target: \"data\",\r\n                                                    mutation: (props) => {\r\n                                                        console.log(\r\n                                                            props.index\r\n                                                        );\r\n                                                        handleClick(\r\n                                                            props.data[\r\n                                                                props.index\r\n                                                            ].month - 1\r\n                                                        );\r\n                                                        return true;\r\n                                                    },\r\n                                                },\r\n                                            ];\r\n                                        },\r\n                                    },\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n            ) : (\r\n                <CampDonationChart\r\n                    back={() => {\r\n                        console.log(\"back pressed\");\r\n                        showMonthStat(false);\r\n                    }}\r\n                    data={currMonthStat}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nconst CampDonationChart = ({ back, data }): ReactElement => {\r\n    const initial_data: Array<MonthData & { x: string; label: string }> = [\r\n        {\r\n            city: \"Agra\",\r\n            date: \"10-07-2020\",\r\n            x: \"12\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"11-07-2020\",\r\n            x: \"22\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n        {\r\n            city: \"Agra\",\r\n            date: \"12-07-2020\",\r\n            x: \"34\",\r\n            donations: 20,\r\n            label: \"20\",\r\n        },\r\n    ];\r\n    const [chartData, setData] = useState<\r\n        Array<MonthData & { x: string; label: string }>\r\n    >(initial_data);\r\n    useEffect(() => {\r\n        if (data) {\r\n            let d2 = data.filter((d) => d.date != null && d.date.length > 0);\r\n            let d = d2.map((da) => {\r\n                return {\r\n                    city: da.city,\r\n                    date: da.date.split(\"-\")[0],\r\n                    donations: parseInt(da.donations.toString()),\r\n                    label: da.donations + ` donations on ${da.date} `,\r\n                    x: da.date.split(\"-\")[0] + `(${da.city})`,\r\n                };\r\n            });\r\n            let sorted = d.sort((a, b) => parseInt(a.date) - parseInt(b.date));\r\n            setData(d);\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className=\"container chart-container my-4\">\r\n            <FiArrowLeft size={24} onClick={back} />\r\n            <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                width={800}\r\n                height={400}\r\n                domainPadding={100}>\r\n                <VictoryLabel\r\n                    text=\"Monthly Donations\"\r\n                    x={225}\r\n                    y={30}\r\n                    textAnchor=\"middle\"\r\n                />\r\n\r\n                <VictoryAxis\r\n                    tickValues={chartData.map((f) => f.x)}\r\n                    //tickFormat={['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']}\r\n                />\r\n                <VictoryAxis dependentAxis tickFormat={(x) => x} />\r\n                <VictoryBar\r\n                    data={chartData}\r\n                    labelComponent={<VictoryTooltip />}\r\n                    x=\"x\"\r\n                    y=\"donations\"\r\n                    alignment=\"middle\"\r\n                    barWidth={24}\r\n                    events={[\r\n                        {\r\n                            target: \"data\",\r\n                            eventHandlers: {\r\n                                onClick: () => {\r\n                                    return [\r\n                                        {\r\n                                            target: \"data\",\r\n                                            mutation: (props) => {\r\n                                                console.log(\r\n                                                    props.data[props.index].url\r\n                                                );\r\n                                                return true;\r\n                                            },\r\n                                        },\r\n                                    ];\r\n                                },\r\n                            },\r\n                        },\r\n                    ]}\r\n                />\r\n            </VictoryChart>\r\n        </div>\r\n    );\r\n};\r\nexport default DonationCharts;\r\n","import React, { useEffect, useState, ReactElement } from 'react'\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryTheme, VictoryLabel, VictoryGroup, VictoryLegend } from 'victory'\nimport './Chart.css'\n\ninterface Props {\n    camp?: number[];\n    awareness?: number[]\n}\ninterface dataProps {\n    month: number;\n    donations: number;\n    label: number;\n    url: string\n}\n\ninterface GraphData {\n    month: number;\n    count: number;\n    label: number;\n}\n\nexport default function MonthlyEventChart({ camp, awareness }: Props): ReactElement {\n    const initial_data = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n    const initial_data1 = [\n        { month: 1, count: 0, label: 0 },\n        { month: 2, count: 0, label: 0 },\n        { month: 3, count: 0, label: 0 },\n        { month: 4, count: 0, label: 0 },\n        { month: 5, count: 0, label: 0 },\n        { month: 6, count: 0, label: 0 },\n        { month: 7, count: 0, label: 0 },\n        { month: 8, count: 0, label: 0 },\n        { month: 9, count: 0, label: 0 },\n        { month: 10, count: 0, label: 0 },\n        { month: 11, count: 0, label: 0 },\n        { month: 12, count: 0, label: 0 },\n    ];\n\n    const [campData, setCampData] = useState<GraphData[]>(initial_data)\n    const [awarenessData, setAwarenessData] = useState<GraphData[]>(initial_data1)\n    useEffect(() => {\n        if (camp) {\n            setCampData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = camp[da.month - 1]\n                    da.label = camp[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [camp])\n\n    useEffect(() => {\n        if (awareness) {\n            setAwarenessData((d: GraphData[]) => {\n                return d.map(da => {\n                    da.count = awareness[da.month - 1]\n                    da.label = awareness[da.month - 1]\n                    return da\n                })\n            })\n        }\n    }, [awareness])\n    return (\n        <div className=\"container chart-container my-4\">\n            <VictoryChart\n                theme={VictoryTheme.material}\n                width={800}\n                height={400}\n                domainPadding={100}\n            >\n\n                <VictoryLabel text=\"Monthly Report\" x={225} y={30} textAnchor=\"middle\" />\n                <VictoryLegend x={125} y={50}\n                    title=\"Legend\"\n                    centerTitle\n                    orientation=\"horizontal\"\n                    gutter={20}\n                    style={{ border: { stroke: \"black\" }, title: { fontSize: 20 } }}\n                    data={[\n                        { name: \"Camp\", symbol: { fill: \"blue\", type:\"rectangle\" } },\n                        { name: \"Awareness\", symbol: { fill: \"cyan\" } }\n                    ]}\n                />\n                <VictoryAxis\n\n                    tickValues={campData.map(f => f.month)}\n                    tickFormat={['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']}\n                />\n                <VictoryAxis\n                    dependentAxis\n\n                    tickFormat={x => x}\n                />\n                <VictoryGroup\n                    offset={20}\n                    colorScale={'qualitative'}\n                    animate={{\n                        duration: 2000,\n                        onLoad: { duration: 1000 }\n                    }}\n                >\n                    <VictoryBar\n                        data={campData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                    <VictoryBar\n                        data={awarenessData}\n                        x=\"month\"\n                        y=\"count\"\n                        alignment='middle'\n                        events={[{\n                            target: \"data\",\n                            eventHandlers: {\n                                onClick: () => {\n                                    return [{\n                                        target: \"data\",\n                                        mutation: (props) => {\n                                            console.log(props.data[props.index].url)\n                                            return true\n                                        }\n                                    }];\n                                }\n                            }\n                        }]}\n                    />\n                </VictoryGroup>\n            </VictoryChart>\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { FiCalendar, FiUser, FiUsers } from \"react-icons/fi\";\nimport Lottie from \"react-lottie\";\nimport { Helpline } from \"../../Types\";\n\ninterface Props {\n    searchedCity: string;\n    helplines: Helpline[] | undefined;\n}\n\nconst HelplineComponent = ({ searchedCity, helplines }: Props) => {\n    const [city, setCity] = useState<string>(\"All\");\n    const [isLoading, setLoading] = useState<boolean>(true);\n    const [totalHelpline, setTotal] = useState(0);\n    const [openHelpline, setOpen] = useState(0);\n    const [closedHelpline, setClosed] = useState(0);\n    const [handlingHelpline, setHandling] = useState(0);\n\n    const filterData = () => {\n        if (!helplines) return;\n        let total = 0,\n            open = 0,\n            closed = 0,\n            handling = 0;\n        helplines.map((e) => {\n            if (city === \"All\" || e.City_Region.display_value === city) {\n                if (e.Status === \"Open\") open += 1;\n                else if (e.Status === \"Closed\") closed += 1;\n                else if (e.Status === \"Handling\") handling += 1;\n                total += 1;\n            }\n        });\n\n        setOpen(open);\n        setClosed(closed);\n        setHandling(handling);\n        setTotal(total);\n        setLoading(false);\n    };\n\n    // function to fecth helpline stats\n    useEffect(() => {\n        console.log(\"City changed\", searchedCity);\n        if (searchedCity !== city) setCity(searchedCity);\n    }, [searchedCity]);\n\n    useEffect(() => {\n        setLoading(true);\n        if (helplines) filterData();\n        // fetchData();\n    }, [city, helplines]);\n\n    const Loading = () => {\n        return (\n            <div>\n                <Lottie\n                    options={{\n                        animationData: require(\"../../assets/animation/dot.json\"),\n                        loop: true,\n                        autoplay: true,\n                    }}\n                    height={100}\n                    width={100}\n                    isStopped={!isLoading}\n                />\n            </div>\n        );\n    };\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\"> Total Requests</p>\n                                <p className=\"display-4\">{totalHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                        <div className=\"stat-icon-container\">\n                            <FiUser size={34} />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\"> Open</p>\n                                <p className=\"display-4\">{openHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                        <div className=\"stat-icon-container\">\n                            <FiCalendar size={34} />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        {!isLoading ? (\n                            <div>\n                                <p className=\"card-heading\"> Closed</p>\n                                <p className=\"display-4\">{closedHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                        <div className=\"stat-icon-container\">\n                            <FiCalendar size={34} />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"col-lg-3\">\n                    <div className=\"stat-card \">\n                        {true ? (\n                            <div>\n                                <p className=\"card-heading\"> Handling </p>\n                                <p className=\"display-4\">{handlingHelpline}</p>\n                            </div>\n                        ) : (\n                            <Loading />\n                        )}\n                        <div className=\"stat-icon-container\">\n                            <FiUsers size={34} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default HelplineComponent;\n","import React, { ReactElement, useState } from 'react'\r\nimport { FiSearch } from 'react-icons/fi'\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nimport './Search.css'\r\nimport theme from \"./SearchTheme.module.css\"\r\ninterface Props {\r\n    handleChange: (c: string) => void\r\n}\r\ninterface CityProps {\r\n    name: string\r\n}\r\n\r\nexport default function Search({ handleChange }: Props): ReactElement {\r\n\r\n    const [suggestions, setSuggestion] = useState<CityProps[]>([])\r\n    const [value, setValue] = useState('')\r\n    const city = [\r\n        { name: 'Delhi NCR' },\r\n        { name: 'Agra' },\r\n        { name: 'Lucknow' },\r\n        { name: 'Jaipur' },\r\n        { name: 'Kolkata' },\r\n        { name: 'Ranchi' },\r\n        { name: 'Odisha' },\r\n        { name: 'Varanasi' },\r\n        { name: 'Pune' },\r\n        { name: 'Kanpur' },\r\n        { name: 'Consulting' }\r\n    ]\r\n    const getSuggestions = (value: string) => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n\r\n        return inputLength === 0 ? [] : city.filter(c =>\r\n            c.name.toLowerCase().slice(0, inputLength) === inputValue\r\n        );\r\n    };\r\n\r\n    const getSuggestionValue = suggestion => suggestion.name;\r\n\r\n    // Use your imagination to render suggestions.\r\n    const renderSuggestion = suggestion => (\r\n        <div className=\"suggestion\">\r\n            {suggestion.name}\r\n        </div>\r\n    );\r\n\r\n    const onSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestion(getSuggestions(value))\r\n    };\r\n\r\n    const onSuggestionsClearRequested = () => {\r\n        setSuggestion([])\r\n    }\r\n    const onChange = (event, { newValue }) => {\r\n        setValue(newValue)\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if(e.key === 'Enter') {\r\n            handleChange(e.target.value)\r\n        }\r\n    }\r\n\r\n    const inputProps = {\r\n        placeholder: 'Enter the city',\r\n        value,\r\n        onChange: onChange,\r\n        onKeyDown: handleKeyDown\r\n    };\r\n    return (\r\n        <div className=\"my-4 col-lg-6\">\r\n            <div className=\"d-flex container\">\r\n                <Autosuggest\r\n                    suggestions={suggestions}\r\n                    onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n                    getSuggestionValue={getSuggestionValue}\r\n                    renderSuggestion={renderSuggestion}\r\n                    inputProps={inputProps}\r\n                    theme={theme}\r\n                />\r\n                \r\n                <div className=\"search-icon\" onClick={() => {\r\n                    console.log(value)\r\n                    handleChange(value)\r\n                }}>\r\n                    <FiSearch color=\"white\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export const CITIES_ARRAY = [ \"Agra\",\"Consulting\",\"Delhi NCR\",\"Jaipur\",\"Kanpur\",\"Kolkata\",\"Lucknow\",\"Odisha\",\"Pune\",\"Ranchi\",\"Varanasi\"];\nexport const __IS_DEV__ = false \n\nexport const MONTH_END = [31,28,31,30,31,30,31,31,30,31,30,31];\n\nexport const CITY_HELPLINE_CITIES = {\n        Agra: [\"Agra\"],\n        \"Delhi NCR\":[\"Delhi NCR\",\"Delhi\"],\n        Jaipur:[\"Jaipur\"],\n        Kanpur:[\"Kanpur\"],\n        Kolkata:[\"Kolkata\"],\n        Lucknow:[\"Lucknow\"],\n        Odisha:[\"Bhubaneswar\",\"Cuttack\"],\n        Pune:[\"Pune\"],\n        Ranchi:[\"Ranchi\"],\n        Varanasi:[\"Varanasi\"]\n}","import React, { ReactElement, useEffect, useState } from \"react\";\nimport { exportComponentAsPDF } from \"react-component-export-image\";\nimport { Loading } from \"../../App\";\nimport { CITIES_ARRAY, CITY_HELPLINE_CITIES } from \"../../Constans\";\nimport { getDateRange } from \"../../Helplers\";\nimport { Event, Helpline, TableStatsType, Team } from \"../../Types\";\nimport \"./Table.css\";\n\ninterface Props {\n    events: Event[] | undefined;\n    av: Team[] | undefined;\n    allHelplines:Helpline[] | undefined\n}\n\nexport default function StatTable({ events, av, allHelplines }: Props): ReactElement {\n    const [data, setData] = useState<TableStatsType[] | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [month, setMonth] = useState<number>(0);\n    const [year, setYear] = useState<number>(0);\n\n    let totalCamps = 0,\n        totalAwareness = 0,\n        totalHelpline = 0,\n        totalVolunteer = 0,\n        totalDonation = 0;\n    const ref = React.createRef<any>();\n\n    const filterData = () => {\n        const tempData: TableStatsType[] = [];\n        const [startDate,endDate ] = getDateRange(month,year);\n        if (!events) return;\n        for (let i in CITIES_ARRAY) {\n            let city = CITIES_ARRAY[i];\n            let camps = 0,\n                donations = 0,\n                awareness = 0,\n                helplines = 0;\n            events.map((e) => {\n              let campDate = new Date(e.Date_field.split(\"-\").reverse().join(\"-\")).getTime()\n                if (e.BloodConnect_City === city && campDate >= startDate && campDate <= endDate) {\n                  let d = e[\"Post_Camp_ID.Number_of_Donation\"]\n                  if(e.TypeOfEvent === \"Awareness\"){\n                    awareness ++;\n                  } else {\n                    camps ++;\n                    donations += d && d.length > 0 ? parseInt(d) : 0\n                  }\n                }\n            });\n            if(allHelplines)\n            if(city === \"Consulting\") {\n            allHelplines.map(h => {\n                let date = new Date(h.Added_Time.split(\" \")[0].split(\"-\").reverse().join(\"-\")).getTime();\n                let currCity = h.City_Region.display_value;\n                if(CITY_HELPLINE_CITIES[\"Delhi NCR\"].includes(currCity) || CITY_HELPLINE_CITIES.Odisha.includes(currCity))\n                    return 0;\n                else if(!CITIES_ARRAY.filter(c => c !== city).includes(currCity) && date >= startDate && date <= endDate){\n                    helplines += 1;\n                }\n            })\n        } else {\n\n            allHelplines.map(h => {\n                let date = new Date(h.Added_Time.split(\" \")[0].split(\"-\").reverse().join(\"-\")).getTime();\n                if(CITY_HELPLINE_CITIES[city].includes(h.City_Region.display_value) && date >= startDate && date <= endDate){\n                    helplines += 1;\n                }\n            })\n        }\n            tempData.push({\n              city: city,\n              activeVolunteer: av ?  av.filter(v => v.BloodConnect_City === city).length : 0,\n              camps,\n              awareness,\n              donations,\n              helpline: helplines\n            })\n        }\n\n        console.log(tempData)\n        setData(tempData)\n        setLoading(false)\n    };\n\n    \n\n    useEffect(() => {\n        console.log(\"called functin\");\n        setLoading(true);\n        if(events && av)\n          filterData()\n    }, [month, year,events,av]);\n\n    return (\n        <div className=\"container p-4\" ref={ref}>\n            <div id=\"wrapper\" className=\"d-flex flex-column\">\n                <div className=\"d-flex flex-row justify-content-between py-4 px-3\">\n                    <h4>Report Table</h4>\n                    <div className=\"d-flex flex-row\">\n                        <div className=\"d-flex flex-column max-2\">\n                            <label htmlFor=\"month\">Month</label>\n                            <select\n                                id=\"month\"\n                                onChange={({ target }) =>\n                                    setMonth(parseInt(target.value))\n                                }>\n                                <option value=\"0\">All</option>\n                                <option value=\"1\">January</option>\n                                <option value=\"2\">Febraury</option>\n                                <option value=\"3\">March</option>\n                                <option value=\"4\">April</option>\n                                <option value=\"5\">May</option>\n                                <option value=\"6\">June</option>\n                                <option value=\"7\">July</option>\n                                <option value=\"8\">August</option>\n                                <option value=\"9\">September</option>\n                                <option value=\"10\">October</option>\n                                <option value=\"11\">November</option>\n                                <option value=\"12\">Decenmber</option>\n                            </select>\n                        </div>\n\n                        {/* Year filter */}\n\n                        <div className=\"d-flex flex-column mx-2\">\n                            <label htmlFor=\"month\">Year</label>\n                            <select\n                                id=\"month\"\n                                onChange={({ target }) =>\n                                    setYear(parseInt(target.value))\n                                }>\n                                <option value=\"0\">All</option>\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2019\">2019</option>\n                            </select>\n                        </div>\n                        <div className=\"d-flex flex-column mx-2\">\n                            <p className=\"mb-1\">Download Table</p>\n                            <button onClick={() => exportComponentAsPDF(ref)}>\n                                Download\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <table id=\"keywords\" cellSpacing=\"0\" cellPadding=\"0\">\n                    <thead>\n                        <tr>\n                            <th>\n                                <span>City</span>\n                            </th>\n                            <th>\n                                <span>Camps</span>\n                            </th>\n                            <th>\n                                <span>Awareness</span>\n                            </th>\n                            <th>\n                                <span>Helpline</span>\n                            </th>\n                            <th>\n                                <span>Donations</span>\n                            </th>\n                            <th>\n                                <span>Active Volunteer</span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {loading ? (\n                            <div className=\"container-fluid d-flex justiify-content-center align-items-center\">\n                                <Loading loading={loading} />\n                            </div>\n                        ) : (\n                            data!.map(\n                                (\n                                    {\n                                        city,\n                                        camps,\n                                        awareness,\n                                        helpline,\n                                        donations,\n                                        activeVolunteer,\n                                    },\n                                    index\n                                ) => {\n                                    totalCamps += camps;\n                                    totalAwareness += awareness;\n                                    totalDonation += donations;\n                                    totalHelpline += helpline;\n                                    totalVolunteer += activeVolunteer;\n                                    return (\n                                        <tr key={index}>\n                                            <td className=\"lalign\">{city}</td>\n                                            <td>{camps}</td>\n                                            <td>{awareness}</td>\n                                            <td>{helpline}</td>\n                                            <td>{donations}</td>\n                                            <td>{activeVolunteer}</td>\n                                        </tr>\n                                    );\n                                }\n                            )\n                        )}\n\n                        <tr style={{ backgroundColor: \"#ececec\" }}>\n                            <td className=\"lalign\">Total</td>\n                            <td>{totalCamps}</td>\n                            <td>{totalAwareness}</td>\n                            <td>{totalHelpline}</td>\n                            <td>{totalDonation}</td>\n                            <td>{totalVolunteer}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n","import { start } from \"repl\";\nimport { MONTH_END } from \"../Constans\";\n\nexport const sleep = (ms:number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n// inputs \n// Jan - Dec - [1 - 12] 0 - All Months\n// year = 0 means all years\nexport const getDateRange = (month:number,year: number):number []=> {\n\n    // start and end date for filter \n    let startDate: Array<string> = [],\n        endDate: Array<string> = [];\n    startDate[0] = \"01\";\n\n    // selecting all years\n    if (year === 0) {\n        startDate[2] = \"2000\";\n        endDate[2] = \"2099\";\n    }else {\n      startDate[2] = year.toString();\n      endDate[2] = year.toString();\n    }\n    // selecting all month\n    if (month === 0) {\n        startDate[1] = \"01\";\n        endDate[1] = \"12\";\n        endDate[0] = \"31\"\n    } else {\n      let mon = month > 9 ? month.toString() : \"0\"+month.toString()\n      startDate[1] = mon\n      endDate[1] = mon\n      endDate[0] = MONTH_END[month-1].toString();\n    }\n    let sdTimestamp = new Date(startDate.reverse().join(\"-\")).getTime()\n    let edTimestamp = new Date(endDate.reverse().join(\"-\")).getTime()\n    return [sdTimestamp,edTimestamp]\n}","import { CITIES_ARRAY } from \".\";\nimport { sleep } from \"../Helplers\";\nimport { TableStatsType } from \"../Types\";\nimport CAMPDATA from \"./CAMP.json\";\nimport HELPLINEDATA from \"./HELPLINE.json\";\nimport TEAMDATA from \"./TEAM.json\";\n\nexport const TABLESTATSDEMO: TableStatsType[] = [];\n\nfor (let i in CITIES_ARRAY) {\n    TABLESTATSDEMO.push({\n        city: CITIES_ARRAY[i],\n        camps: Math.floor(Math.random() * 10),\n        awareness: Math.floor(Math.random() * 5),\n        helpline: Math.floor(Math.random() * 20),\n        donations: Math.floor(Math.random() * 25),\n        activeVolunteer: Math.floor(Math.random() * 150),\n    });\n}\n\nexport const CAMP_DATA_DEMO = CAMPDATA;\n\nexport const getDemoVolunteerData = async (city?: string) => {\n    if (!city) return TEAMDATA;\n    // await sleep(300);\n    return {\n        code: 3000,\n        data: TEAMDATA.data.filter((t) => t.BloodConnect_City === city),\n    };\n};\n\nexport const getDemoCampData = async (city?: string) => {\n    if (!city) return CAMPDATA;\n    // await sleep(300);\n    return {\n        code: 3000,\n        data: CAMPDATA.data.filter((c) => c.BloodConnect_City === city),\n    };\n};\n\nexport const getDemoHelplineData = async (city?: string):Promise<any> => {\n    await sleep(300);\n    if (!city) return HELPLINEDATA;\n    return {\n        code: 3000,\n        data: HELPLINEDATA.data.filter(\n                //@ts-ignore\n            (h) =>city !== \"Consulting\" ?  h.City_Region.display_value === city : !CITIES_ARRAY.includes(h.City_Region.display_value))\n    };\n};\n","import { __IS_DEV__ } from \"../Constans\";\r\nimport {\r\n    getDemoHelplineData\r\n} from \"../Constans/DemoData\";\r\nimport {\r\n    CreatorResponse,\r\n\r\n    Event,\r\n\r\n    Helpline, Team\r\n} from \"../Types\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        ZOHO: any;\r\n    }\r\n}\r\n\r\ninterface overall {\r\n    city: string;\r\n    donations: number;\r\n}\r\ninterface API<Data> {\r\n    code: number;\r\n    data: Data[];\r\n}\r\ninterface PostCamp {\r\n    Number_of_Donation: any;\r\n    Camp_Awareness: {\r\n        display_value: string;\r\n    };\r\n}\r\n\r\ninterface MonthData {\r\n    city: string;\r\n    date: string;\r\n    donations: number;\r\n}\r\n\r\nconst CREATOR = window.ZOHO.CREATOR;\r\n\r\nexport const get = () => {\r\n    CREATOR.init()\r\n        .then((d) => {\r\n            let config = {\r\n                reportName: \"BloodConnect_Team_Report\",\r\n                page: \"1\",\r\n                pageSize: \"200\",\r\n            };\r\n\r\n            //get all records API\r\n            CREATOR.API.getAllRecords(config).then(function (response) {\r\n                //callback block\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            console.log(e);\r\n        });\r\n};\r\n\r\nconst getVolunteer = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Team>> => {\r\n    let criteria = '(Status==\"Active\")';\r\n    if (city !== \"All\") {\r\n        criteria = `(Status==\"Active\" && BloodConnect_City==\"${city}\")`;\r\n    }\r\n    // if (__IS_DEV__) {\r\n    //     if (city !== \"All\") return getDemoVolunteerData(city);\r\n    //     return getDemoVolunteerData();\r\n    // }\r\n\r\n    let config = {\r\n        reportName: \"BloodConnect_Team_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getEvent = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Event>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\") {\r\n        criteria = `(BloodConnect_City==\"${city}\")`;\r\n    }\r\n\r\n    // if (__IS_DEV__) {\r\n    //     if (city !== \"All\") return getDemoCampData(city);\r\n    //     return getDemoCampData();\r\n    // }\r\n    let config = {\r\n        reportName: \"Camp_Awareness_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getCity = (city: string) => {\r\n    let config = {\r\n        reportName: \"Vlookup_Report\",\r\n        criteria: `City==\"${city}\"`,\r\n        page: 1,\r\n        pageSize: \"1\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getHelplines = (\r\n    page: number,\r\n    city: string\r\n): Promise<CreatorResponse<Helpline>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\" && city !== \"Consulting\") {\r\n        criteria = `(City_Region==${city})`;\r\n    }\r\n\r\n    if (__IS_DEV__) {\r\n        if (city !== \"All\") return getDemoHelplineData(city);\r\n        return getDemoHelplineData();\r\n    }\r\n\r\n    let config = {\r\n        reportName: \"Helpline_Report\",\r\n        criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n};\r\n\r\nconst getPostCamp = (page: number, city: string): Promise<API<PostCamp>> => {\r\n    let criteria = \"\";\r\n    if (city !== \"All\") {\r\n        criteria = `(BloodConnect_City==\"${city}\")`;\r\n    }\r\n    let config = {\r\n        reportName: \"Post_Camp_Form_Report\",\r\n        criteria: criteria,\r\n        page: page.toString(),\r\n        pageSize: \"200\",\r\n    };\r\n    return CREATOR.API.getAllRecords(config);\r\n    // return new Promise((resolve, reject) => {\r\n    //     let response = CREATOR.API.getAllRecords(config)\r\n    //     if (response)\r\n    //         resolve(response)\r\n    //     else\r\n    //         reject({ code: 500, data: []})\r\n    // })\r\n};\r\n// fetching all data at once to make the api calls less\r\nexport const fetchAllData = async (): Promise<{\r\n    events: Event[]| undefined;\r\n    activeVolunteers: Team[] | undefined;\r\n    helplines: Helpline[] | undefined;\r\n}> => {\r\n    await CREATOR.init();\r\n\r\n    let events: Event[] | undefined = [];\r\n    let activeVolunteers: Team[] | undefined = [];\r\n    let helplines: Helpline[] | undefined = [];\r\n    let len = 0;\r\n    let page = 1;\r\n    try {\r\n        let { data } = await getEvent(page++, \"All\");\r\n        events.push(...data);\r\n        len = data.length;\r\n\r\n        while (len === 200) {\r\n            let { data: data1 } = await getEvent(page++, \"All\");\r\n            events.push(...data1);\r\n            len = data1.length;\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in event fetching\");\r\n    }\r\n    // getting volunteer data\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: av } = await getVolunteer(page++, \"All\");\r\n        len = av.length;\r\n        activeVolunteers.push(...av);\r\n        while (len === 200) {\r\n            let { data: av1 } = await getVolunteer(page++, \"All\");\r\n            len = av1.length;\r\n            activeVolunteers.push(...av1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in volunteer fetching\");\r\n    }\r\n    // helplines\r\n    page = 1;\r\n    len = 0;\r\n    try {\r\n        let { data: hlp } = await getHelplines(page++, \"All\");\r\n        len = hlp.length;\r\n        helplines.push(...hlp);\r\n\r\n        while (len === 200) {\r\n            let { data: hlp1 } = await getHelplines(page++, \"All\");\r\n            len = hlp1.length;\r\n            helplines.push(...hlp1);\r\n        }\r\n    } catch (e) {\r\n        console.log(\"Error in helpline fetching\");\r\n    }\r\n\r\n    console.log(\"Helplines are \",helplines)\r\n    return {\r\n        events: events,\r\n        activeVolunteers: activeVolunteers,\r\n        helplines: helplines,\r\n    };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FiCalendar, FiUser, FiUsers } from \"react-icons/fi\";\r\nimport Lottie from \"react-lottie\";\r\nimport \"./App.css\";\r\nimport DonationCharts from \"./components/Chart/MonthlyDonation\";\r\nimport MonthlyEventChart from \"./components/Chart/MonthlyEventChart\";\r\nimport HelplineComponent from \"./components/Helpline\";\r\nimport Search from \"./components/Search/Search\";\r\nimport StatTable from \"./components/Table/StatTable\";\r\nimport { fetchAllData } from \"./services/index\";\r\nimport { Event, Helpline, Team } from \"./Types\";\r\n\r\nconst App = () => {\r\n    let BASE_URL =\r\n        \"https://app.zohocreator.in/deepak64/bloodconnect-india-donor-system\";\r\n    if (\r\n        window.location.ancestorOrigins &&\r\n        window.location.ancestorOrigins[0] &&\r\n        !window.location.ancestorOrigins[0].includes(\"localhost\")\r\n    ) {\r\n        if (window.location.ancestorOrigins[0].includes(\"bloodconnect\"))\r\n            BASE_URL = window.location.ancestorOrigins[0];\r\n    }\r\n\r\n    const [allEvents, setEvents] = useState<Event[] | undefined>();\r\n    const [allHelplines, setHelplines] = useState<Helpline[] | undefined>();\r\n    const [allVolunteer, setVolunteer] = useState<Team[] | undefined>();\r\n\r\n    const [city, setCity] = useState(\"All\");\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [aV, setAV] = useState(-1);\r\n    const [camps, setCamps] = useState(-1);\r\n    const [awareness, setAwareness] = useState(-1);\r\n    const [donations, setDonations] = useState(-1);\r\n\r\n    // Monthly Datas\r\n    // Donations data\r\n    // Camp data\r\n    const [monthlyCampData, setmonthlyCampData] = useState(Array(12).fill(0));\r\n    // Awareness data\r\n    const [monthlyAwarenessData, setmonthlyAwarenessData] = useState(\r\n        Array(12).fill(0)\r\n    );\r\n    const [aVUrl, setaVUrl] = useState(\r\n        `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active`\r\n    );\r\n    const [campUrl, setcampUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp`\r\n    );\r\n    const [awarenessUrl, setawarenessUrl] = useState(\r\n        `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness`\r\n    );\r\n\r\n    const filterData = () => {\r\n        console.log(\"Filtering data\", allEvents, allVolunteer);\r\n        setLoading(true);\r\n        let camps = 0,\r\n            awareness = 0,\r\n            donations = 0,\r\n            volunteer = 0;\r\n        let monthCamp = Array(12).fill(0);\r\n        let monthAwareness = Array(12).fill(0);\r\n        if (allEvents) {\r\n            if (city === \"All\") {\r\n                camps = allEvents.filter((e) => e.TypeOfEvent === \"Camp\")\r\n                    .length;\r\n                awareness = allEvents.filter(\r\n                    (e) => e.TypeOfEvent === \"Awareness\"\r\n                ).length;\r\n\r\n                allEvents.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        if (e.TypeOfEvent === \"Camp\") monthCamp[mon - 1] += 1;\r\n                        else monthAwareness[mon - 1] += 1;\r\n                    }\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                });\r\n            } else {\r\n                let myCamps = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Camp\" && e.BloodConnect_City === city\r\n                );\r\n                camps = myCamps.length;\r\n                let myAwareness = allEvents.filter(\r\n                    (e) =>\r\n                        e.TypeOfEvent === \"Awareness\" &&\r\n                        e.BloodConnect_City === city\r\n                );\r\n                awareness = myAwareness.length;\r\n\r\n                // calcuating camp and awarness per month\r\n                myCamps.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    donations +=\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"] != null &&\r\n                        e[\"Post_Camp_ID.Number_of_Donation\"].length > 0\r\n                            ? parseInt(e[\"Post_Camp_ID.Number_of_Donation\"])\r\n                            : 0;\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthCamp[mon - 1] += 1;\r\n                    }\r\n                });\r\n                myAwareness.map((e) => {\r\n                    let mon = parseInt(e.Date_field.split(\"-\")[1]);\r\n                    let year = parseInt(e.Date_field.split(\"-\")[2]);\r\n                    if (year === new Date().getFullYear()) {\r\n                        monthAwareness[mon - 1] += 1;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        if (allVolunteer) {\r\n            if (city === \"All\") volunteer = allVolunteer.length;\r\n            else\r\n                volunteer = allVolunteer.filter(\r\n                    (v) => v.BloodConnect_City === city\r\n                ).length;\r\n            console.log(\"volunteer filter complete\", volunteer);\r\n        }\r\n\r\n        setCamps(camps);\r\n        setAV(volunteer);\r\n        setDonations(donations);\r\n        setAwareness(awareness);\r\n        setmonthlyAwarenessData(monthAwareness);\r\n        setmonthlyCampData(monthCamp);\r\n        setLoading(false);\r\n        return;\r\n    };\r\n    const loadData = async () => {\r\n        const { events, helplines, activeVolunteers } = await fetchAllData();\r\n        setEvents((e) => events);\r\n        setHelplines((e) => helplines);\r\n        setVolunteer((e) => activeVolunteers);\r\n    };\r\n\r\n    useEffect(() => {\r\n        //loadAllData();\r\n        if (!!allEvents && !!allVolunteer) filterData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [city, allEvents, allVolunteer]);\r\n\r\n    // only once\r\n    useEffect(() => {\r\n        loadData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const setSearch = (c: string): void => {\r\n        if (c !== city) {\r\n            setLoading(true);\r\n            setCity(c);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (city !== \"All\") {\r\n            setaVUrl(\r\n                `${BASE_URL}/#Report:BloodConnect_Team_Report?Status=Active&BloodConnect_City=${city}`\r\n            );\r\n            setcampUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Camp&BloodConnect_City=${city}`\r\n            );\r\n            setawarenessUrl(\r\n                `${BASE_URL}/#Report:Camp_Awareness_Report?TypeOfEvent=Awareness&BloodConnect_City=${city}`\r\n            );\r\n        }\r\n    }, [BASE_URL, city]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-between \">\r\n                <h4 className=\"stat col-lg-4 col-sm-12  mt-2 d-flex align-items-center justify-content-center\">\r\n                    {city === \"All\" ? \"BloodConnect\" : city}\r\n                </h4>\r\n                <Search handleChange={setSearch} />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(aVUrl, \"_blank\");\r\n                        }}>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    {\" \"}\r\n                                    Active Volunteer\r\n                                </p>\r\n                                <p className=\"display-4\">{aV}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiUser size={34} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(campUrl, \"_blank\");\r\n                        }}>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\"> Camps</p>\r\n                                <p className=\"display-4\">{camps}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiCalendar size={34} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div\r\n                        className=\"stat-card \"\r\n                        onClick={() => {\r\n                            window.open(awarenessUrl, \"_blank\");\r\n                        }}>\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\"> Awareness</p>\r\n                                <p className=\"display-4\">{awareness}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiCalendar size={34} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-lg-3\">\r\n                    <div className=\"stat-card \">\r\n                        {!isLoading ? (\r\n                            <div>\r\n                                <p className=\"card-heading\">\r\n                                    {\" \"}\r\n                                    Toatal Donation{\" \"}\r\n                                </p>\r\n                                <p className=\"display-4\">{donations}</p>\r\n                            </div>\r\n                        ) : (\r\n                            <Loading loading={isLoading} />\r\n                        )}\r\n                        <div className=\"stat-icon-container\">\r\n                            <FiUsers size={34} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n             <HelplineComponent helplines={allHelplines} searchedCity={city} /> \r\n            <StatTable events={allEvents} allHelplines={allHelplines} av={allVolunteer} />\r\n            <DonationCharts\r\n                camps={allEvents?.filter((e) => e.TypeOfEvent === \"Camp\")}\r\n                selectedCity={city}\r\n            />\r\n            <MonthlyEventChart\r\n                camp={monthlyCampData}\r\n                awareness={monthlyAwarenessData}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Loading = ({ loading }) => {\r\n    return (\r\n        <div>\r\n            <Lottie\r\n                options={{\r\n                    animationData: require(\"./assets/animation/dot.json\"),\r\n                    loop: true,\r\n                    autoplay: true,\r\n                }}\r\n                height={100}\r\n                width={100}\r\n                isStopped={!loading}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}